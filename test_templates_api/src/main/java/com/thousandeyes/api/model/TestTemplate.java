/*
 * Test Template
 *  ## Overview  Test templates allow you create a set of tests, alert rules, dashboards, and labels from a single template configuration file.    The following applies to test templates:  * You can create tests for monitoring common services and applications such as Microsoft 365, Webex, and others using a predefined set of certified templates.  * Test templates reduce the time and complexity of creating tests for common SaaS or other services by providing a set of templates for creating tests, alert rules, and other assets within the ThousandEyes platform.  * Templates created with an account group in a particular organization are visible to all account groups in that organization, provided they have the `View Test Templates` permission.  * Credentials (usernames, passwords, tokens, etc.) can be included in a test template only as placeholders whose value is provided by user input when the template is deployed. Creating or updating a test template that contains a credentials field in plain text will result in a bad request (HTTP 400).  * The schemas to use for `labels`, `tests`, `alertRules` and `dashboards` are defined at https://developer.thousandeyes.com/v7/.  * To support referencing an asset from another asset of a different type (for example, defining the `testId` field of an `alertRule` by referencing the ID of a test defined in the template itself), the deployment of assets is done in a specific order:      1. Labels     2. Tests     3. Alert rules     4. Dashboards      For a given asset type, you can reference any asset type with a higher order. (For example, labels cannot reference other assets in the template; tests can only reference labels; alert rules can reference tests and labels, etc.)
 *
 * The version of the OpenAPI document: 7.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.DeploymentStrategy;
import com.thousandeyes.api.model.Link;
import com.thousandeyes.api.model.UserInput;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * TestTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:29.165180Z[Europe/London]")
public class TestTemplate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_IS_BUILT_IN = "isBuiltIn";
  @SerializedName(SERIALIZED_NAME_IS_BUILT_IN)
  private Boolean isBuiltIn;

  public static final String SERIALIZED_NAME_CERTIFICATION_LEVEL = "certificationLevel";
  @SerializedName(SERIALIZED_NAME_CERTIFICATION_LEVEL)
  private String certificationLevel;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_USER_INPUTS = "userInputs";
  @SerializedName(SERIALIZED_NAME_USER_INPUTS)
  private Map<String, UserInput> userInputs = new HashMap<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Object labels;

  public static final String SERIALIZED_NAME_TESTS = "tests";
  @SerializedName(SERIALIZED_NAME_TESTS)
  private Object tests;

  public static final String SERIALIZED_NAME_ALERT_RULES = "alertRules";
  @SerializedName(SERIALIZED_NAME_ALERT_RULES)
  private Object alertRules;

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private Object dashboards;

  public static final String SERIALIZED_NAME_DEPLOYMENT_STRATEGY = "deploymentStrategy";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_STRATEGY)
  private Map<String, DeploymentStrategy> deploymentStrategy = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Map<String, Link> links = new HashMap<>();

  public TestTemplate() {
  }

  public TestTemplate id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the test template.
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public TestTemplate name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the test template.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TestTemplate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Text that describes the test template.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TestTemplate icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * Icon for the test template; will be displayed in the UI.
   * @return icon
  **/
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }


  public void setIcon(String icon) {
    this.icon = icon;
  }


  public TestTemplate isBuiltIn(Boolean isBuiltIn) {
    
    this.isBuiltIn = isBuiltIn;
    return this;
  }

   /**
   * Indicates whether the test template is a built-in template. Note that built-in test templates are read-only.
   * @return isBuiltIn
  **/
  @javax.annotation.Nullable
  public Boolean getIsBuiltIn() {
    return isBuiltIn;
  }


  public void setIsBuiltIn(Boolean isBuiltIn) {
    this.isBuiltIn = isBuiltIn;
  }


  public TestTemplate certificationLevel(String certificationLevel) {
    
    this.certificationLevel = certificationLevel;
    return this;
  }

   /**
   * 
   * @return certificationLevel
  **/
  @javax.annotation.Nullable
  public String getCertificationLevel() {
    return certificationLevel;
  }


  public void setCertificationLevel(String certificationLevel) {
    this.certificationLevel = certificationLevel;
  }


  public TestTemplate dateCreated(String dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * The date and time the test template was created.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public TestTemplate userInputs(Map<String, UserInput> userInputs) {
    
    this.userInputs = userInputs;
    return this;
  }

  public TestTemplate putUserInputsItem(String key, UserInput userInputsItem) {
    if (this.userInputs == null) {
      this.userInputs = new HashMap<>();
    }
    this.userInputs.put(key, userInputsItem);
    return this;
  }

   /**
   * Get userInputs
   * @return userInputs
  **/
  @javax.annotation.Nullable
  public Map<String, UserInput> getUserInputs() {
    return userInputs;
  }


  public void setUserInputs(Map<String, UserInput> userInputs) {
    this.userInputs = userInputs;
  }


  public TestTemplate labels(Object labels) {
    
    this.labels = labels;
    return this;
  }

   /**
   * A map of &lt;labelKey, labelConfiguration&gt;.
   * @return labels
  **/
  @javax.annotation.Nullable
  public Object getLabels() {
    return labels;
  }


  public void setLabels(Object labels) {
    this.labels = labels;
  }


  public TestTemplate tests(Object tests) {
    
    this.tests = tests;
    return this;
  }

   /**
   * A map of &lt;testKey, testConfiguration&gt;.
   * @return tests
  **/
  @javax.annotation.Nullable
  public Object getTests() {
    return tests;
  }


  public void setTests(Object tests) {
    this.tests = tests;
  }


  public TestTemplate alertRules(Object alertRules) {
    
    this.alertRules = alertRules;
    return this;
  }

   /**
   * A map of &lt;alertRuleKey, alertRuleConfiguration&gt;.
   * @return alertRules
  **/
  @javax.annotation.Nullable
  public Object getAlertRules() {
    return alertRules;
  }


  public void setAlertRules(Object alertRules) {
    this.alertRules = alertRules;
  }


  public TestTemplate dashboards(Object dashboards) {
    
    this.dashboards = dashboards;
    return this;
  }

   /**
   * A map of &lt;dashboardKey, dashboardConfiguration&gt;.
   * @return dashboards
  **/
  @javax.annotation.Nullable
  public Object getDashboards() {
    return dashboards;
  }


  public void setDashboards(Object dashboards) {
    this.dashboards = dashboards;
  }


  public TestTemplate deploymentStrategy(Map<String, DeploymentStrategy> deploymentStrategy) {
    
    this.deploymentStrategy = deploymentStrategy;
    return this;
  }

  public TestTemplate putDeploymentStrategyItem(String key, DeploymentStrategy deploymentStrategyItem) {
    if (this.deploymentStrategy == null) {
      this.deploymentStrategy = new HashMap<>();
    }
    this.deploymentStrategy.put(key, deploymentStrategyItem);
    return this;
  }

   /**
   * A map of &lt;assetKey, deploymentStrategy&gt;.
   * @return deploymentStrategy
  **/
  @javax.annotation.Nullable
  public Map<String, DeploymentStrategy> getDeploymentStrategy() {
    return deploymentStrategy;
  }


  public void setDeploymentStrategy(Map<String, DeploymentStrategy> deploymentStrategy) {
    this.deploymentStrategy = deploymentStrategy;
  }


  public TestTemplate links(Map<String, Link> links) {
    
    this.links = links;
    return this;
  }

  public TestTemplate putLinksItem(String key, Link linksItem) {
    if (this.links == null) {
      this.links = new HashMap<>();
    }
    this.links.put(key, linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public Map<String, Link> getLinks() {
    return links;
  }


  public void setLinks(Map<String, Link> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestTemplate testTemplate = (TestTemplate) o;
    return Objects.equals(this.id, testTemplate.id) &&
        Objects.equals(this.name, testTemplate.name) &&
        Objects.equals(this.description, testTemplate.description) &&
        Objects.equals(this.icon, testTemplate.icon) &&
        Objects.equals(this.isBuiltIn, testTemplate.isBuiltIn) &&
        Objects.equals(this.certificationLevel, testTemplate.certificationLevel) &&
        Objects.equals(this.dateCreated, testTemplate.dateCreated) &&
        Objects.equals(this.userInputs, testTemplate.userInputs) &&
        Objects.equals(this.labels, testTemplate.labels) &&
        Objects.equals(this.tests, testTemplate.tests) &&
        Objects.equals(this.alertRules, testTemplate.alertRules) &&
        Objects.equals(this.dashboards, testTemplate.dashboards) &&
        Objects.equals(this.deploymentStrategy, testTemplate.deploymentStrategy) &&
        Objects.equals(this.links, testTemplate.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, icon, isBuiltIn, certificationLevel, dateCreated, userInputs, labels, tests, alertRules, dashboards, deploymentStrategy, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    isBuiltIn: ").append(toIndentedString(isBuiltIn)).append("\n");
    sb.append("    certificationLevel: ").append(toIndentedString(certificationLevel)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    userInputs: ").append(toIndentedString(userInputs)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("    alertRules: ").append(toIndentedString(alertRules)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    deploymentStrategy: ").append(toIndentedString(deploymentStrategy)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("icon");
    openapiFields.add("isBuiltIn");
    openapiFields.add("certificationLevel");
    openapiFields.add("dateCreated");
    openapiFields.add("userInputs");
    openapiFields.add("labels");
    openapiFields.add("tests");
    openapiFields.add("alertRules");
    openapiFields.add("dashboards");
    openapiFields.add("deploymentStrategy");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TestTemplate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestTemplate is not found in the empty JSON string", TestTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("certificationLevel") != null && !jsonObj.get("certificationLevel").isJsonNull()) && !jsonObj.get("certificationLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificationLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificationLevel").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<TestTemplate>() {
           @Override
           public void write(JsonWriter out, TestTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestTemplate
  * @throws IOException if the JSON string is invalid with respect to TestTemplate
  */
  public static TestTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestTemplate.class);
  }

 /**
  * Convert an instance of TestTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

