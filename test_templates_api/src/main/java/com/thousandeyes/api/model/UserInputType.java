/*
 * Test Template
 *  ## Overview  Test templates allow you create a set of tests, alert rules, dashboards, and labels from a single template configuration file.    The following applies to test templates:  * You can create tests for monitoring common services and applications such as Microsoft 365, Webex, and others using a predefined set of certified templates.  * Test templates reduce the time and complexity of creating tests for common SaaS or other services by providing a set of templates for creating tests, alert rules, and other assets within the ThousandEyes platform.  * Templates created with an account group in a particular organization are visible to all account groups in that organization, provided they have the `View Test Templates` permission.  * Credentials (usernames, passwords, tokens, etc.) can be included in a test template only as placeholders whose value is provided by user input when the template is deployed. Creating or updating a test template that contains a credentials field in plain text will result in a bad request (HTTP 400).  * The schemas to use for `labels`, `tests`, `alertRules` and `dashboards` are defined at https://developer.thousandeyes.com/v7/.  * To support referencing an asset from another asset of a different type (for example, defining the `testId` field of an `alertRule` by referencing the ID of a test defined in the template itself), the deployment of assets is done in a specific order:      1. Labels     2. Tests     3. Alert rules     4. Dashboards      For a given asset type, you can reference any asset type with a higher order. (For example, labels cannot reference other assets in the template; tests can only reference labels; alert rules can reference tests and labels, etc.)
 *
 * The version of the OpenAPI document: 7.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of user input field. This is used to validate the user values provided when deploying a template.   - \&quot;string\&quot;: A string based user input. E.g., &#x60;\&quot;https://google.com\&quot;&#x60;  - \&quot;number\&quot;: A number based user input. E.g., &#x60;25.8&#x60;  - \&quot;boolean\&quot;: A boolean based user input. E.g., &#x60;false&#x60;  - \&quot;string[]\&quot;: A list of string based user inputs. E.g., &#x60;[\&quot;someId\&quot;, \&quot;someOtherId\&quot;]&#x60;  - \&quot;number[]\&quot;: A list of number based user inputs. E.g., &#x60;[1, 2.3, 5000]&#x60;  - \&quot;boolean[]\&quot;: A list of boolean based user inputs. E.g., &#x60;[true, false]&#x60;  - \&quot;any\&quot;: For any other user inputs that don&#39;t belong to the types listed above. E.g., &#x60;[{\&quot;agentId\&quot;: 22}]&#x60;  
 */
@JsonAdapter(UserInputType.Adapter.class)
public enum UserInputType {
  
  STRING("string"),
  
  NUMBER("number"),
  
  BOOLEAN("boolean"),
  
  STRING_("string[]"),
  
  NUMBER_("number[]"),
  
  BOOLEAN_("boolean[]"),
  
  AGENTSELECTIONCONFIG("agentSelectionConfig"),
  
  ANY("any");

  private String value;

  UserInputType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static UserInputType fromValue(String value) {
    for (UserInputType b : UserInputType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<UserInputType> {
    @Override
    public void write(final JsonWriter jsonWriter, final UserInputType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public UserInputType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return UserInputType.fromValue(value);
    }
  }
}

