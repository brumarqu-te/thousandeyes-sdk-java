/*
 * Test Template
 *  ## Overview  Test templates allow you create a set of tests, alert rules, dashboards, and labels from a single template configuration file.    The following applies to test templates:  * You can create tests for monitoring common services and applications such as Microsoft 365, Webex, and others using a predefined set of certified templates.  * Test templates reduce the time and complexity of creating tests for common SaaS or other services by providing a set of templates for creating tests, alert rules, and other assets within the ThousandEyes platform.  * Templates created with an account group in a particular organization are visible to all account groups in that organization, provided they have the `View Test Templates` permission.  * Credentials (usernames, passwords, tokens, etc.) can be included in a test template only as placeholders whose value is provided by user input when the template is deployed. Creating or updating a test template that contains a credentials field in plain text will result in a bad request (HTTP 400).  * The schemas to use for `labels`, `tests`, `alertRules` and `dashboards` are defined at https://developer.thousandeyes.com/v7/.  * To support referencing an asset from another asset of a different type (for example, defining the `testId` field of an `alertRule` by referencing the ID of a test defined in the template itself), the deployment of assets is done in a specific order:      1. Labels     2. Tests     3. Alert rules     4. Dashboards      For a given asset type, you can reference any asset type with a higher order. (For example, labels cannot reference other assets in the template; tests can only reference labels; alert rules can reference tests and labels, etc.)
 *
 * The version of the OpenAPI document: 7.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api;

import com.thousandeyes.ApiException;
import com.thousandeyes.api.model.ApiError;
import com.thousandeyes.api.model.BadRequestError;
import com.thousandeyes.api.model.DeployTestTemplate;
import com.thousandeyes.api.model.NotFoundError;
import com.thousandeyes.api.model.TestTemplate;
import com.thousandeyes.api.model.TestTemplateCollection;
import com.thousandeyes.api.model.TestTemplateUpsert;
import java.util.UUID;
import com.thousandeyes.api.model.UnauthorizedError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestTemplateEndpointsApi
 */
@Disabled
public class TestTemplateEndpointsApiTest {

    private final TestTemplateEndpointsApi api = new TestTemplateEndpointsApi();

    /**
     * Create a test template.
     *
     * Creates a test template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTestTemplateTest() throws ApiException {
        TestTemplateUpsert testTemplateUpsert = null;
        String aid = null;
        TestTemplate response = api.createTestTemplate(testTemplateUpsert, aid);
        // TODO: test validations
    }

    /**
     * Delete a test template
     *
     * Deletes a test template using its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTestTemplateTest() throws ApiException {
        UUID id = null;
        String aid = null;
        api.deleteTestTemplate(id, aid);
        // TODO: test validations
    }

    /**
     * Deploy a test template.
     *
     * Deploys a test template to create tests, alert rules, and dashboards defined by the template. You can deploy templates to easily create new tests.   To deploy test templates, you must specify &#x60;userInputValues&#x60; required by the template in the request body. &#x60;userInputValues&#x60; enables you to specify a minimum set of user values required to configure the tests from a test template. This way, you do not have to edit all the details of each test configuration. If necessary, you can edit the test details directly in the template.   ### Considerations  Consider the following when deploying a test template:  * To deploy a test template, you must first create the template or use one of ThousandEyes&#39; predefined test templates.  * The deployment strategy allows you to specify what should happen to a particular asset in the event that a test template is redeployed.    When you attempt to deploy a test template that has already been deployed, the API service compares any assets that have not yet been deployed with the assets that were deployed in the previous deployment (the comparison is done using the **asset key**; the asset keys are simply the object keys used in the &#x60;tests&#x60;, &#x60;labels&#x60;, &#x60;alertRules&#x60;, and &#x60;dashboards&#x60; fields). By default, if the configuration of a particular asset has not changed from the previous deployment, that asset is ignored.       If a change is detected:    * If the asset is a test, a new test is created with the new configuration.   * If the asset is not a test, the asset is updated.  * You can create new resources such as tests, alert rules, labels, dashboards, and modify existing resources defined in test templates, overwriting the default configurations.  * You can also use existing resources (such as those created outside the test template deployment flow) by adding their ID either in the raw test template or using the overrides when deploying the template. See example usage below for the raw test template sample.  **Note**: The test template API does not currently track \&quot;live\&quot; configuration of assets. Any changes made to assets outside of the test template API will not be considered when comparing changes during the redeployment scenario.  ### Example usage:  &#x60;&#x60;&#x60;POST /v7/tests/templates/fcbb89a7-61cf-4616-9c4f-828fa3cb4684/deploy  {   \&quot;userInputValues\&quot;: {     \&quot;interval\&quot;: 120,     \&quot;target\&quot;: \&quot;https://microsoft.com\&quot;,     \&quot;agents\&quot;: [{\&quot;agentId\&quot;:11}],     \&quot;domain\&quot;: \&quot;microsoft.com\&quot;   },   \&quot;name\&quot;:\&quot;Microsoft Suite\&quot;,   \&quot;tests\&quot;: {     \&quot;secondPageLoadTest\&quot;: {       \&quot;httpInterval\&quot;: 120,       \&quot;interval\&quot;: 120,       \&quot;testId\&quot;: 182481,       \&quot;type\&quot;: \&quot;page-load\&quot;,       \&quot;url\&quot;: \&quot;https://microsoft.com\&quot;,       \&quot;testName\&quot;: \&quot;Microsoft Suite - Second Page Load\&quot;,       \&quot;agents\&quot;: [         {           \&quot;agentId\&quot;: 11         }       ]     }   } } &#x60;&#x60;&#x60; #### Raw Test Template Sample  &#x60;&#x60;&#x60; {   ...   \&quot;tests\&quot;: {       \&quot;existingTest\&quot;: {           \&quot;testId\&quot;: \&quot;123\&quot;, //The API will only try to update this test; will never create it           \&quot;type\&quot;: \&quot;http-server\&quot;,           ....       },       ...   },   ... } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployUserTemplateTest() throws ApiException {
        UUID id = null;
        DeployTestTemplate deployTestTemplate = null;
        String aid = null;
        api.deployUserTemplate(id, deployTestTemplate, aid);
        // TODO: test validations
    }

    /**
     * Retrieve a test template
     *
     * Retrieves a test template using its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserOrgTestTemplateTest() throws ApiException {
        UUID id = null;
        String aid = null;
        TestTemplate response = api.getUserOrgTestTemplate(id, aid);
        // TODO: test validations
    }

    /**
     * List all test templates.
     *
     * Retrieves a list of all your test templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserOrgTestTemplatesTest() throws ApiException {
        String aid = null;
        TestTemplateCollection response = api.getUserOrgTestTemplates(aid);
        // TODO: test validations
    }

    /**
     * Update a test template
     *
     * Updates an existing test template. This operation overwrites the existing test template object with the object sent in the request. If a partial update is required, it is recommended that you retrieve the test template and modify the test template object before updating it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTestTemplateTest() throws ApiException {
        UUID id = null;
        TestTemplateUpsert testTemplateUpsert = null;
        String aid = null;
        TestTemplate response = api.updateTestTemplate(id, testTemplateUpsert, aid);
        // TODO: test validations
    }

}
