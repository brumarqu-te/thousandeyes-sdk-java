/*
 * Internet Insights API
 * # Overview We are happy to announce the release of the Internet Insights API set. This limited release includes endpoints that: * Make our catalog provider and Internet outage data accessible to API users. * Provide access to advanced filtering, which is part of our next-generation API efforts to allow API users to fine-tune queries across all of our APIs in a consistent manner.  Internet Insights provide visibility into core Internet infrastructure, including: ISPs, DNS providers, IaaS, CDNs , and SaaS providers. It tracks the macro-level impact of Internet events on individual users and enterprise networks connecting at the edge of the Internet. These events include: Outages, Routing hijacks and leaks, DDoS attacks, And political interference, among others.  Future releases of the Internet Insights API set will further unlock access to core Internet Insights functionality, unlocking potential integrations to enrich customer process flows. 
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.OutageScope;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * Advanced filter query used to filter the response. Can filter on: - outageScope (all, affected tests (e.g. my tests only)). - providerName - interfaceNetwork - applicationName - startDate, endDate - window
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:42.909342Z[Europe/London]")
public class ApiOutageFilter {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_WINDOW = "window";
  @SerializedName(SERIALIZED_NAME_WINDOW)
  private String window;

  public static final String SERIALIZED_NAME_OUTAGE_SCOPE = "outageScope";
  @SerializedName(SERIALIZED_NAME_OUTAGE_SCOPE)
  private OutageScope outageScope;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private List<String> providerName;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "applicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private List<String> applicationName;

  public static final String SERIALIZED_NAME_INTERFACE_NETWORK = "interfaceNetwork";
  @SerializedName(SERIALIZED_NAME_INTERFACE_NETWORK)
  private List<String> interfaceNetwork;

  public ApiOutageFilter() {
  }

  public ApiOutageFilter startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start of the time range. Must be paired with &#x60;endDate&#x60;.
   * @return startDate
  **/
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public ApiOutageFilter endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End of the time range. Must be paired with &#x60;startDate&#x60;.
   * @return endDate
  **/
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public ApiOutageFilter window(String window) {
    
    this.window = window;
    return this;
  }

   /**
   * Specify a time period in the past for which to retrieve data. Alternative to specifying &#x60;startDate&#x60; and &#x60;endDate&#x60;.
   * @return window
  **/
  @javax.annotation.Nullable
  public String getWindow() {
    return window;
  }


  public void setWindow(String window) {
    this.window = window;
  }


  public ApiOutageFilter outageScope(OutageScope outageScope) {
    
    this.outageScope = outageScope;
    return this;
  }

   /**
   * Get outageScope
   * @return outageScope
  **/
  @javax.annotation.Nullable
  public OutageScope getOutageScope() {
    return outageScope;
  }


  public void setOutageScope(OutageScope outageScope) {
    this.outageScope = outageScope;
  }


  public ApiOutageFilter providerName(List<String> providerName) {
    
    this.providerName = providerName;
    return this;
  }

  public ApiOutageFilter addProviderNameItem(String providerNameItem) {
    if (this.providerName == null) {
      this.providerName = new ArrayList<>();
    }
    this.providerName.add(providerNameItem);
    return this;
  }

   /**
   * The name used to identify the provider.
   * @return providerName
  **/
  @javax.annotation.Nullable
  public List<String> getProviderName() {
    return providerName;
  }


  public void setProviderName(List<String> providerName) {
    this.providerName = providerName;
  }


  public ApiOutageFilter applicationName(List<String> applicationName) {
    
    this.applicationName = applicationName;
    return this;
  }

  public ApiOutageFilter addApplicationNameItem(String applicationNameItem) {
    if (this.applicationName == null) {
      this.applicationName = new ArrayList<>();
    }
    this.applicationName.add(applicationNameItem);
    return this;
  }

   /**
   * The name to identify the application.
   * @return applicationName
  **/
  @javax.annotation.Nullable
  public List<String> getApplicationName() {
    return applicationName;
  }


  public void setApplicationName(List<String> applicationName) {
    this.applicationName = applicationName;
  }


  public ApiOutageFilter interfaceNetwork(List<String> interfaceNetwork) {
    
    this.interfaceNetwork = interfaceNetwork;
    return this;
  }

  public ApiOutageFilter addInterfaceNetworkItem(String interfaceNetworkItem) {
    if (this.interfaceNetwork == null) {
      this.interfaceNetwork = new ArrayList<>();
    }
    this.interfaceNetwork.add(interfaceNetworkItem);
    return this;
  }

   /**
   * The name of the ASN (Interface Network).
   * @return interfaceNetwork
  **/
  @javax.annotation.Nullable
  public List<String> getInterfaceNetwork() {
    return interfaceNetwork;
  }


  public void setInterfaceNetwork(List<String> interfaceNetwork) {
    this.interfaceNetwork = interfaceNetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiOutageFilter apiOutageFilter = (ApiOutageFilter) o;
    return Objects.equals(this.startDate, apiOutageFilter.startDate) &&
        Objects.equals(this.endDate, apiOutageFilter.endDate) &&
        Objects.equals(this.window, apiOutageFilter.window) &&
        Objects.equals(this.outageScope, apiOutageFilter.outageScope) &&
        Objects.equals(this.providerName, apiOutageFilter.providerName) &&
        Objects.equals(this.applicationName, apiOutageFilter.applicationName) &&
        Objects.equals(this.interfaceNetwork, apiOutageFilter.interfaceNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, endDate, window, outageScope, providerName, applicationName, interfaceNetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiOutageFilter {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("    outageScope: ").append(toIndentedString(outageScope)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    interfaceNetwork: ").append(toIndentedString(interfaceNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("window");
    openapiFields.add("outageScope");
    openapiFields.add("providerName");
    openapiFields.add("applicationName");
    openapiFields.add("interfaceNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiOutageFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiOutageFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiOutageFilter is not found in the empty JSON string", ApiOutageFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiOutageFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiOutageFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("window") != null && !jsonObj.get("window").isJsonNull()) && !jsonObj.get("window").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `window` to be a primitive type in the JSON string but got `%s`", jsonObj.get("window").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull() && !jsonObj.get("providerName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be an array in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicationName") != null && !jsonObj.get("applicationName").isJsonNull() && !jsonObj.get("applicationName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationName` to be an array in the JSON string but got `%s`", jsonObj.get("applicationName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("interfaceNetwork") != null && !jsonObj.get("interfaceNetwork").isJsonNull() && !jsonObj.get("interfaceNetwork").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceNetwork` to be an array in the JSON string but got `%s`", jsonObj.get("interfaceNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiOutageFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiOutageFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiOutageFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiOutageFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiOutageFilter>() {
           @Override
           public void write(JsonWriter out, ApiOutageFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiOutageFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiOutageFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiOutageFilter
  * @throws IOException if the JSON string is invalid with respect to ApiOutageFilter
  */
  public static ApiOutageFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiOutageFilter.class);
  }

 /**
  * Convert an instance of ApiOutageFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

