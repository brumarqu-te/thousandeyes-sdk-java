/*
 * Usage API
 * ## Overview These usage endpoints define the following operations: * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View Billing` permission to access this endpoint.     * This endpoint offers visibility across all account groups within the organization.     * Users with `View Billing` permission in multiple organizations should query the endpoint with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the API definitions below for detailed usage instructions and optional parameters.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api;

import com.thousandeyes.ApiException;
import com.thousandeyes.api.model.Error;
import com.thousandeyes.api.model.GetQuotas200Response;
import com.thousandeyes.api.model.OrganizationsQuotasAssign;
import com.thousandeyes.api.model.OrganizationsQuotasUnassign;
import com.thousandeyes.api.model.QuotasAssignRequest;
import com.thousandeyes.api.model.QuotasAssignResponse;
import com.thousandeyes.api.model.QuotasUnassign;
import com.thousandeyes.api.model.UnauthorizedError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuotasApi
 */
@Disabled
public class QuotasApiTest {

    private final QuotasApi api = new QuotasApi();

    /**
     * Create or update accout group quotas
     *
     * Assigns quota values to multiple account groups from multiple organizations. &#x60;Edit organization and account group quotas&#x60; permission (a management permission) is required. This endpoint has cumulative behavior: The quotas are assigned to the specified account groups, and the previous assignments persist. No unassignment takes place.  This endpoint assigns quota values to multiple account groups across multiple organizations. To use this endpoint, you need the &#x60;Edit organization and account group quotas&#x60; permission, which is a management-level permission. This endpoint follows a cumulative behavior––This means that the quotas are assigned to the designated account groups, and any previous assignments remain in place without any unassignment occurring.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignOrganizationsAccountGroupsQuotasTest() throws ApiException {
        String aid = null;
        OrganizationsQuotasAssign organizationsQuotasAssign = null;
        OrganizationsQuotasAssign response = api.assignOrganizationsAccountGroupsQuotas(aid, organizationsQuotasAssign);
        // TODO: test validations
    }

    /**
     * Create or update organizations quotas
     *
     * This endpoint recieves a list of organization quotas to create or update. If there&#39;s no specific &#x60;orgId&#x60; defined for a quota, it defaults to using the authenticated organization. To use this endpoint, you need the &#x60;Edit organization and account group quotas&#x60; permission, which is a management-level permission. This endpoint follows cumulative behavior––This means that the quotas are assigned to the specified organizations, and any previous assignments remain unchanged; no unassignments occur.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignOrganizationsQuotasTest() throws ApiException {
        String aid = null;
        QuotasAssignRequest quotasAssignRequest = null;
        QuotasAssignResponse response = api.assignOrganizationsQuotas(aid, quotasAssignRequest);
        // TODO: test validations
    }

    /**
     * Get organization and account group usage quota
     *
     * This endpoint retrieves usage quotas for both organization and account groups. To use this endpoint, you need the &#x60;Edit organization and account group quotas&#x60; permission, which is a management-level permission. If a user has quota update permission in multiple organizations, the API returns data from all such organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuotasTest() throws ApiException {
        GetQuotas200Response response = api.getQuotas();
        // TODO: test validations
    }

    /**
     * Remove account group quotas from organizations
     *
     * Removes the quotas from multiple account groups from multiple organizations. &#x60;Edit organization and account group quotas&#x60; permission (a management permission) is required. Removes quotas from multiple account groups across multiple organizations. To use this endpoint, you need the &#x60;Edit organization and account group quotas&#x60; permission, which is a management-level permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignOrganizationsAccountGroupsQuotasTest() throws ApiException {
        String aid = null;
        OrganizationsQuotasUnassign organizationsQuotasUnassign = null;
        api.unassignOrganizationsAccountGroupsQuotas(aid, organizationsQuotasUnassign);
        // TODO: test validations
    }

    /**
     * Remove organization quotas
     *
     * This endpoint recieves a list of organization IDs to remove their current quota. To use this endpoint, you need the &#x60;Edit organization and account group quotas&#x60; permission, which is a management-level permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignOrganizationsQuotasTest() throws ApiException {
        String aid = null;
        QuotasUnassign quotasUnassign = null;
        api.unassignOrganizationsQuotas(aid, quotasUnassign);
        // TODO: test validations
    }

}
