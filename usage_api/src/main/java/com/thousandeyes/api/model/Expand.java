/*
 * Usage API
 * ## Overview These usage endpoints define the following operations: * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View Billing` permission to access this endpoint.     * This endpoint offers visibility across all account groups within the organization.     * Users with `View Billing` permission in multiple organizations should query the endpoint with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the API definitions below for detailed usage instructions and optional parameters.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets Expand
 */
@JsonAdapter(Expand.Adapter.class)
public enum Expand {
  
  TEST("test"),
  
  ENTERPRISE_AGENT("enterprise-agent"),
  
  ENTERPRISE_AGENT_UNIT("enterprise-agent-unit"),
  
  ENDPOINT_AGENT("endpoint-agent"),
  
  ENDPOINT_AGENT_ESSENTIAL("endpoint-agent-essential"),
  
  ENDPOINT_AGENT_EMBEDDED("endpoint-agent-embedded");

  private String value;

  Expand(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Expand fromValue(String value) {
    for (Expand b : Expand.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Expand> {
    @Override
    public void write(final JsonWriter jsonWriter, final Expand enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Expand read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Expand.fromValue(value);
    }
  }
}

