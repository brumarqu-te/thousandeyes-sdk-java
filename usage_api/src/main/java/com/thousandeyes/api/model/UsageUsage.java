/*
 * Usage API
 * ## Overview These usage endpoints define the following operations: * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View Billing` permission to access this endpoint.     * This endpoint offers visibility across all account groups within the organization.     * Users with `View Billing` permission in multiple organizations should query the endpoint with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the API definitions below for detailed usage instructions and optional parameters.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.EndpointAgentsEmbeddedInner;
import com.thousandeyes.api.model.EndpointAgentsEssentialsInner;
import com.thousandeyes.api.model.EndpointAgentsInner;
import com.thousandeyes.api.model.EnterpriseAgentUnitsInner;
import com.thousandeyes.api.model.EnterpriseAgentsInner;
import com.thousandeyes.api.model.TestsInner;
import com.thousandeyes.api.model.UsageUsageQuota;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * UsageUsage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:30.044048Z[Europe/London]")
public class UsageUsage {
  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private UsageUsageQuota quota;

  public static final String SERIALIZED_NAME_CLOUD_UNITS_USED = "cloudUnitsUsed";
  @SerializedName(SERIALIZED_NAME_CLOUD_UNITS_USED)
  private Long cloudUnitsUsed;

  public static final String SERIALIZED_NAME_CLOUD_UNITS_PROJECTED = "cloudUnitsProjected";
  @SerializedName(SERIALIZED_NAME_CLOUD_UNITS_PROJECTED)
  private Long cloudUnitsProjected;

  public static final String SERIALIZED_NAME_CLOUD_UNITS_NEXT_BILLING_PERIOD = "cloudUnitsNextBillingPeriod";
  @SerializedName(SERIALIZED_NAME_CLOUD_UNITS_NEXT_BILLING_PERIOD)
  private Long cloudUnitsNextBillingPeriod;

  public static final String SERIALIZED_NAME_ENTERPRISE_UNITS_USED = "enterpriseUnitsUsed";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_UNITS_USED)
  private Long enterpriseUnitsUsed;

  public static final String SERIALIZED_NAME_ENTERPRISE_UNITS_PROJECTED = "enterpriseUnitsProjected";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_UNITS_PROJECTED)
  private Long enterpriseUnitsProjected;

  public static final String SERIALIZED_NAME_ENTERPRISE_UNITS_NEXT_BILLING_PERIOD = "enterpriseUnitsNextBillingPeriod";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_UNITS_NEXT_BILLING_PERIOD)
  private Long enterpriseUnitsNextBillingPeriod;

  public static final String SERIALIZED_NAME_ENDPOINT_AGENTS_USED = "endpointAgentsUsed";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_AGENTS_USED)
  private Long endpointAgentsUsed;

  public static final String SERIALIZED_NAME_ENDPOINT_AGENTS_ESSENTIALS_USED = "endpointAgentsEssentialsUsed";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_AGENTS_ESSENTIALS_USED)
  private Long endpointAgentsEssentialsUsed;

  public static final String SERIALIZED_NAME_ENDPOINT_AGENTS_EMBEDDED_USED = "endpointAgentsEmbeddedUsed";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_AGENTS_EMBEDDED_USED)
  private Long endpointAgentsEmbeddedUsed;

  public static final String SERIALIZED_NAME_ENTERPRISE_AGENTS_USED = "enterpriseAgentsUsed";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_AGENTS_USED)
  private Long enterpriseAgentsUsed;

  public static final String SERIALIZED_NAME_ENTERPRISE_AGENT_UNITS = "enterpriseAgentUnits";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_AGENT_UNITS)
  private List<EnterpriseAgentUnitsInner> enterpriseAgentUnits;

  public static final String SERIALIZED_NAME_TESTS = "tests";
  @SerializedName(SERIALIZED_NAME_TESTS)
  private List<TestsInner> tests;

  public static final String SERIALIZED_NAME_ENDPOINT_AGENTS = "endpointAgents";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_AGENTS)
  private List<EndpointAgentsInner> endpointAgents;

  public static final String SERIALIZED_NAME_ENDPOINT_AGENTS_ESSENTIALS = "endpointAgentsEssentials";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_AGENTS_ESSENTIALS)
  private List<EndpointAgentsEssentialsInner> endpointAgentsEssentials;

  public static final String SERIALIZED_NAME_ENDPOINT_AGENTS_EMBEDDED = "endpointAgentsEmbedded";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_AGENTS_EMBEDDED)
  private List<EndpointAgentsEmbeddedInner> endpointAgentsEmbedded;

  public static final String SERIALIZED_NAME_ENTERPRISE_AGENTS = "enterpriseAgents";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_AGENTS)
  private List<EnterpriseAgentsInner> enterpriseAgents;

  public UsageUsage() {
  }

  public UsageUsage quota(UsageUsageQuota quota) {
    
    this.quota = quota;
    return this;
  }

   /**
   * Get quota
   * @return quota
  **/
  @javax.annotation.Nullable
  public UsageUsageQuota getQuota() {
    return quota;
  }


  public void setQuota(UsageUsageQuota quota) {
    this.quota = quota;
  }


  public UsageUsage cloudUnitsUsed(Long cloudUnitsUsed) {
    
    this.cloudUnitsUsed = cloudUnitsUsed;
    return this;
  }

   /**
   * Number of cloud units consumed thus far in the usage period.
   * @return cloudUnitsUsed
  **/
  @javax.annotation.Nullable
  public Long getCloudUnitsUsed() {
    return cloudUnitsUsed;
  }


  public void setCloudUnitsUsed(Long cloudUnitsUsed) {
    this.cloudUnitsUsed = cloudUnitsUsed;
  }


  public UsageUsage cloudUnitsProjected(Long cloudUnitsProjected) {
    
    this.cloudUnitsProjected = cloudUnitsProjected;
    return this;
  }

   /**
   * Number of cloud units projected in the current usage period, based on units consumed to date and configuration of enabled tests. This value is updated hourly.
   * @return cloudUnitsProjected
  **/
  @javax.annotation.Nullable
  public Long getCloudUnitsProjected() {
    return cloudUnitsProjected;
  }


  public void setCloudUnitsProjected(Long cloudUnitsProjected) {
    this.cloudUnitsProjected = cloudUnitsProjected;
  }


  public UsageUsage cloudUnitsNextBillingPeriod(Long cloudUnitsNextBillingPeriod) {
    
    this.cloudUnitsNextBillingPeriod = cloudUnitsNextBillingPeriod;
    return this;
  }

   /**
   * Number of cloud units projected in the upcoming usage period, based on configuration of enabled tests. This value is updated hourly.
   * @return cloudUnitsNextBillingPeriod
  **/
  @javax.annotation.Nullable
  public Long getCloudUnitsNextBillingPeriod() {
    return cloudUnitsNextBillingPeriod;
  }


  public void setCloudUnitsNextBillingPeriod(Long cloudUnitsNextBillingPeriod) {
    this.cloudUnitsNextBillingPeriod = cloudUnitsNextBillingPeriod;
  }


  public UsageUsage enterpriseUnitsUsed(Long enterpriseUnitsUsed) {
    
    this.enterpriseUnitsUsed = enterpriseUnitsUsed;
    return this;
  }

   /**
   * Number of enterprise units consumed in the usage period. Returns non-zero value only for organizations with metered billing.
   * @return enterpriseUnitsUsed
  **/
  @javax.annotation.Nullable
  public Long getEnterpriseUnitsUsed() {
    return enterpriseUnitsUsed;
  }


  public void setEnterpriseUnitsUsed(Long enterpriseUnitsUsed) {
    this.enterpriseUnitsUsed = enterpriseUnitsUsed;
  }


  public UsageUsage enterpriseUnitsProjected(Long enterpriseUnitsProjected) {
    
    this.enterpriseUnitsProjected = enterpriseUnitsProjected;
    return this;
  }

   /**
   * Number of enterprise units projected in the current usage period, based on units consumed to date and configuration of enabled tests. This value is updated hourly. Returns non-zero value only for organizations with metered billing.
   * @return enterpriseUnitsProjected
  **/
  @javax.annotation.Nullable
  public Long getEnterpriseUnitsProjected() {
    return enterpriseUnitsProjected;
  }


  public void setEnterpriseUnitsProjected(Long enterpriseUnitsProjected) {
    this.enterpriseUnitsProjected = enterpriseUnitsProjected;
  }


  public UsageUsage enterpriseUnitsNextBillingPeriod(Long enterpriseUnitsNextBillingPeriod) {
    
    this.enterpriseUnitsNextBillingPeriod = enterpriseUnitsNextBillingPeriod;
    return this;
  }

   /**
   * Number of enterprise units projected in the upcoming usage period, based on configuration of enabled tests. This value is updated hourly. Returns non-zero value only for organizations with metered billing.
   * @return enterpriseUnitsNextBillingPeriod
  **/
  @javax.annotation.Nullable
  public Long getEnterpriseUnitsNextBillingPeriod() {
    return enterpriseUnitsNextBillingPeriod;
  }


  public void setEnterpriseUnitsNextBillingPeriod(Long enterpriseUnitsNextBillingPeriod) {
    this.enterpriseUnitsNextBillingPeriod = enterpriseUnitsNextBillingPeriod;
  }


  public UsageUsage endpointAgentsUsed(Long endpointAgentsUsed) {
    
    this.endpointAgentsUsed = endpointAgentsUsed;
    return this;
  }

   /**
   * Number of endpoint agents used in the current usage period. This number is calculated by taking the maximum number of agents enabled for any one-hour period in the usage period. Disabled agents are excluded from this calculation.
   * @return endpointAgentsUsed
  **/
  @javax.annotation.Nullable
  public Long getEndpointAgentsUsed() {
    return endpointAgentsUsed;
  }


  public void setEndpointAgentsUsed(Long endpointAgentsUsed) {
    this.endpointAgentsUsed = endpointAgentsUsed;
  }


  public UsageUsage endpointAgentsEssentialsUsed(Long endpointAgentsEssentialsUsed) {
    
    this.endpointAgentsEssentialsUsed = endpointAgentsEssentialsUsed;
    return this;
  }

   /**
   * Number of endpoint agents essentials used in the current usage period. This number is calculated by taking the maximum number of agents enabled for any one-hour period in the usage period. Disabled agents are excluded from this calculation.
   * @return endpointAgentsEssentialsUsed
  **/
  @javax.annotation.Nullable
  public Long getEndpointAgentsEssentialsUsed() {
    return endpointAgentsEssentialsUsed;
  }


  public void setEndpointAgentsEssentialsUsed(Long endpointAgentsEssentialsUsed) {
    this.endpointAgentsEssentialsUsed = endpointAgentsEssentialsUsed;
  }


  public UsageUsage endpointAgentsEmbeddedUsed(Long endpointAgentsEmbeddedUsed) {
    
    this.endpointAgentsEmbeddedUsed = endpointAgentsEmbeddedUsed;
    return this;
  }

   /**
   * Number of embedded endpoint agents used in the current usage period. This number is calculated by taking the maximum number of agents enabled for any one-hour period in the usage period. Disabled agents are excluded from this calculation.
   * @return endpointAgentsEmbeddedUsed
  **/
  @javax.annotation.Nullable
  public Long getEndpointAgentsEmbeddedUsed() {
    return endpointAgentsEmbeddedUsed;
  }


  public void setEndpointAgentsEmbeddedUsed(Long endpointAgentsEmbeddedUsed) {
    this.endpointAgentsEmbeddedUsed = endpointAgentsEmbeddedUsed;
  }


  public UsageUsage enterpriseAgentsUsed(Long enterpriseAgentsUsed) {
    
    this.enterpriseAgentsUsed = enterpriseAgentsUsed;
    return this;
  }

   /**
   * Number of enterprise agents used in the current usage period. This number is calculated by taking the maximum number of agents enabled for any one-hour period in the usage period. Disabled agents are excluded from this calculation.
   * @return enterpriseAgentsUsed
  **/
  @javax.annotation.Nullable
  public Long getEnterpriseAgentsUsed() {
    return enterpriseAgentsUsed;
  }


  public void setEnterpriseAgentsUsed(Long enterpriseAgentsUsed) {
    this.enterpriseAgentsUsed = enterpriseAgentsUsed;
  }


  public UsageUsage enterpriseAgentUnits(List<EnterpriseAgentUnitsInner> enterpriseAgentUnits) {
    
    this.enterpriseAgentUnits = enterpriseAgentUnits;
    return this;
  }

  public UsageUsage addEnterpriseAgentUnitsItem(EnterpriseAgentUnitsInner enterpriseAgentUnitsItem) {
    if (this.enterpriseAgentUnits == null) {
      this.enterpriseAgentUnits = new ArrayList<>();
    }
    this.enterpriseAgentUnits.add(enterpriseAgentUnitsItem);
    return this;
  }

   /**
   * A breakdown of enterprise unit consumption for each agent during the current monthly period. Each entry provides data for both the current actual usage and the projected usage. Returns non-zero values for organizations with metered billing.
   * @return enterpriseAgentUnits
  **/
  @javax.annotation.Nullable
  public List<EnterpriseAgentUnitsInner> getEnterpriseAgentUnits() {
    return enterpriseAgentUnits;
  }


  public void setEnterpriseAgentUnits(List<EnterpriseAgentUnitsInner> enterpriseAgentUnits) {
    this.enterpriseAgentUnits = enterpriseAgentUnits;
  }


  public UsageUsage tests(List<TestsInner> tests) {
    
    this.tests = tests;
    return this;
  }

  public UsageUsage addTestsItem(TestsInner testsItem) {
    if (this.tests == null) {
      this.tests = new ArrayList<>();
    }
    this.tests.add(testsItem);
    return this;
  }

   /**
   * A breakdown of unit consumption for each test during the current monthly period. Each entry provides information about both the current actual usage and the projected usage.
   * @return tests
  **/
  @javax.annotation.Nullable
  public List<TestsInner> getTests() {
    return tests;
  }


  public void setTests(List<TestsInner> tests) {
    this.tests = tests;
  }


  public UsageUsage endpointAgents(List<EndpointAgentsInner> endpointAgents) {
    
    this.endpointAgents = endpointAgents;
    return this;
  }

  public UsageUsage addEndpointAgentsItem(EndpointAgentsInner endpointAgentsItem) {
    if (this.endpointAgents == null) {
      this.endpointAgents = new ArrayList<>();
    }
    this.endpointAgents.add(endpointAgentsItem);
    return this;
  }

   /**
   * Endpoint agents used by account group.
   * @return endpointAgents
  **/
  @javax.annotation.Nullable
  public List<EndpointAgentsInner> getEndpointAgents() {
    return endpointAgents;
  }


  public void setEndpointAgents(List<EndpointAgentsInner> endpointAgents) {
    this.endpointAgents = endpointAgents;
  }


  public UsageUsage endpointAgentsEssentials(List<EndpointAgentsEssentialsInner> endpointAgentsEssentials) {
    
    this.endpointAgentsEssentials = endpointAgentsEssentials;
    return this;
  }

  public UsageUsage addEndpointAgentsEssentialsItem(EndpointAgentsEssentialsInner endpointAgentsEssentialsItem) {
    if (this.endpointAgentsEssentials == null) {
      this.endpointAgentsEssentials = new ArrayList<>();
    }
    this.endpointAgentsEssentials.add(endpointAgentsEssentialsItem);
    return this;
  }

   /**
   * Endpoint agents essentials used by account group.
   * @return endpointAgentsEssentials
  **/
  @javax.annotation.Nullable
  public List<EndpointAgentsEssentialsInner> getEndpointAgentsEssentials() {
    return endpointAgentsEssentials;
  }


  public void setEndpointAgentsEssentials(List<EndpointAgentsEssentialsInner> endpointAgentsEssentials) {
    this.endpointAgentsEssentials = endpointAgentsEssentials;
  }


  public UsageUsage endpointAgentsEmbedded(List<EndpointAgentsEmbeddedInner> endpointAgentsEmbedded) {
    
    this.endpointAgentsEmbedded = endpointAgentsEmbedded;
    return this;
  }

  public UsageUsage addEndpointAgentsEmbeddedItem(EndpointAgentsEmbeddedInner endpointAgentsEmbeddedItem) {
    if (this.endpointAgentsEmbedded == null) {
      this.endpointAgentsEmbedded = new ArrayList<>();
    }
    this.endpointAgentsEmbedded.add(endpointAgentsEmbeddedItem);
    return this;
  }

   /**
   * Endpoint agents embedded used by account group.
   * @return endpointAgentsEmbedded
  **/
  @javax.annotation.Nullable
  public List<EndpointAgentsEmbeddedInner> getEndpointAgentsEmbedded() {
    return endpointAgentsEmbedded;
  }


  public void setEndpointAgentsEmbedded(List<EndpointAgentsEmbeddedInner> endpointAgentsEmbedded) {
    this.endpointAgentsEmbedded = endpointAgentsEmbedded;
  }


  public UsageUsage enterpriseAgents(List<EnterpriseAgentsInner> enterpriseAgents) {
    
    this.enterpriseAgents = enterpriseAgents;
    return this;
  }

  public UsageUsage addEnterpriseAgentsItem(EnterpriseAgentsInner enterpriseAgentsItem) {
    if (this.enterpriseAgents == null) {
      this.enterpriseAgents = new ArrayList<>();
    }
    this.enterpriseAgents.add(enterpriseAgentsItem);
    return this;
  }

   /**
   * Enterprise agents used by account group.
   * @return enterpriseAgents
  **/
  @javax.annotation.Nullable
  public List<EnterpriseAgentsInner> getEnterpriseAgents() {
    return enterpriseAgents;
  }


  public void setEnterpriseAgents(List<EnterpriseAgentsInner> enterpriseAgents) {
    this.enterpriseAgents = enterpriseAgents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageUsage usageUsage = (UsageUsage) o;
    return Objects.equals(this.quota, usageUsage.quota) &&
        Objects.equals(this.cloudUnitsUsed, usageUsage.cloudUnitsUsed) &&
        Objects.equals(this.cloudUnitsProjected, usageUsage.cloudUnitsProjected) &&
        Objects.equals(this.cloudUnitsNextBillingPeriod, usageUsage.cloudUnitsNextBillingPeriod) &&
        Objects.equals(this.enterpriseUnitsUsed, usageUsage.enterpriseUnitsUsed) &&
        Objects.equals(this.enterpriseUnitsProjected, usageUsage.enterpriseUnitsProjected) &&
        Objects.equals(this.enterpriseUnitsNextBillingPeriod, usageUsage.enterpriseUnitsNextBillingPeriod) &&
        Objects.equals(this.endpointAgentsUsed, usageUsage.endpointAgentsUsed) &&
        Objects.equals(this.endpointAgentsEssentialsUsed, usageUsage.endpointAgentsEssentialsUsed) &&
        Objects.equals(this.endpointAgentsEmbeddedUsed, usageUsage.endpointAgentsEmbeddedUsed) &&
        Objects.equals(this.enterpriseAgentsUsed, usageUsage.enterpriseAgentsUsed) &&
        Objects.equals(this.enterpriseAgentUnits, usageUsage.enterpriseAgentUnits) &&
        Objects.equals(this.tests, usageUsage.tests) &&
        Objects.equals(this.endpointAgents, usageUsage.endpointAgents) &&
        Objects.equals(this.endpointAgentsEssentials, usageUsage.endpointAgentsEssentials) &&
        Objects.equals(this.endpointAgentsEmbedded, usageUsage.endpointAgentsEmbedded) &&
        Objects.equals(this.enterpriseAgents, usageUsage.enterpriseAgents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quota, cloudUnitsUsed, cloudUnitsProjected, cloudUnitsNextBillingPeriod, enterpriseUnitsUsed, enterpriseUnitsProjected, enterpriseUnitsNextBillingPeriod, endpointAgentsUsed, endpointAgentsEssentialsUsed, endpointAgentsEmbeddedUsed, enterpriseAgentsUsed, enterpriseAgentUnits, tests, endpointAgents, endpointAgentsEssentials, endpointAgentsEmbedded, enterpriseAgents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageUsage {\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    cloudUnitsUsed: ").append(toIndentedString(cloudUnitsUsed)).append("\n");
    sb.append("    cloudUnitsProjected: ").append(toIndentedString(cloudUnitsProjected)).append("\n");
    sb.append("    cloudUnitsNextBillingPeriod: ").append(toIndentedString(cloudUnitsNextBillingPeriod)).append("\n");
    sb.append("    enterpriseUnitsUsed: ").append(toIndentedString(enterpriseUnitsUsed)).append("\n");
    sb.append("    enterpriseUnitsProjected: ").append(toIndentedString(enterpriseUnitsProjected)).append("\n");
    sb.append("    enterpriseUnitsNextBillingPeriod: ").append(toIndentedString(enterpriseUnitsNextBillingPeriod)).append("\n");
    sb.append("    endpointAgentsUsed: ").append(toIndentedString(endpointAgentsUsed)).append("\n");
    sb.append("    endpointAgentsEssentialsUsed: ").append(toIndentedString(endpointAgentsEssentialsUsed)).append("\n");
    sb.append("    endpointAgentsEmbeddedUsed: ").append(toIndentedString(endpointAgentsEmbeddedUsed)).append("\n");
    sb.append("    enterpriseAgentsUsed: ").append(toIndentedString(enterpriseAgentsUsed)).append("\n");
    sb.append("    enterpriseAgentUnits: ").append(toIndentedString(enterpriseAgentUnits)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("    endpointAgents: ").append(toIndentedString(endpointAgents)).append("\n");
    sb.append("    endpointAgentsEssentials: ").append(toIndentedString(endpointAgentsEssentials)).append("\n");
    sb.append("    endpointAgentsEmbedded: ").append(toIndentedString(endpointAgentsEmbedded)).append("\n");
    sb.append("    enterpriseAgents: ").append(toIndentedString(enterpriseAgents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quota");
    openapiFields.add("cloudUnitsUsed");
    openapiFields.add("cloudUnitsProjected");
    openapiFields.add("cloudUnitsNextBillingPeriod");
    openapiFields.add("enterpriseUnitsUsed");
    openapiFields.add("enterpriseUnitsProjected");
    openapiFields.add("enterpriseUnitsNextBillingPeriod");
    openapiFields.add("endpointAgentsUsed");
    openapiFields.add("endpointAgentsEssentialsUsed");
    openapiFields.add("endpointAgentsEmbeddedUsed");
    openapiFields.add("enterpriseAgentsUsed");
    openapiFields.add("enterpriseAgentUnits");
    openapiFields.add("tests");
    openapiFields.add("endpointAgents");
    openapiFields.add("endpointAgentsEssentials");
    openapiFields.add("endpointAgentsEmbedded");
    openapiFields.add("enterpriseAgents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UsageUsage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageUsage is not found in the empty JSON string", UsageUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        UsageUsageQuota.validateJsonElement(jsonObj.get("quota"));
      }
      if (jsonObj.get("enterpriseAgentUnits") != null && !jsonObj.get("enterpriseAgentUnits").isJsonNull()) {
        JsonArray jsonArrayenterpriseAgentUnits = jsonObj.getAsJsonArray("enterpriseAgentUnits");
        if (jsonArrayenterpriseAgentUnits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enterpriseAgentUnits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enterpriseAgentUnits` to be an array in the JSON string but got `%s`", jsonObj.get("enterpriseAgentUnits").toString()));
          }

          // validate the optional field `enterpriseAgentUnits` (array)
          for (int i = 0; i < jsonArrayenterpriseAgentUnits.size(); i++) {
            EnterpriseAgentUnitsInner.validateJsonElement(jsonArrayenterpriseAgentUnits.get(i));
          };
        }
      }
      if (jsonObj.get("tests") != null && !jsonObj.get("tests").isJsonNull()) {
        JsonArray jsonArraytests = jsonObj.getAsJsonArray("tests");
        if (jsonArraytests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tests` to be an array in the JSON string but got `%s`", jsonObj.get("tests").toString()));
          }

          // validate the optional field `tests` (array)
          for (int i = 0; i < jsonArraytests.size(); i++) {
            TestsInner.validateJsonElement(jsonArraytests.get(i));
          };
        }
      }
      if (jsonObj.get("endpointAgents") != null && !jsonObj.get("endpointAgents").isJsonNull()) {
        JsonArray jsonArrayendpointAgents = jsonObj.getAsJsonArray("endpointAgents");
        if (jsonArrayendpointAgents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpointAgents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpointAgents` to be an array in the JSON string but got `%s`", jsonObj.get("endpointAgents").toString()));
          }

          // validate the optional field `endpointAgents` (array)
          for (int i = 0; i < jsonArrayendpointAgents.size(); i++) {
            EndpointAgentsInner.validateJsonElement(jsonArrayendpointAgents.get(i));
          };
        }
      }
      if (jsonObj.get("endpointAgentsEssentials") != null && !jsonObj.get("endpointAgentsEssentials").isJsonNull()) {
        JsonArray jsonArrayendpointAgentsEssentials = jsonObj.getAsJsonArray("endpointAgentsEssentials");
        if (jsonArrayendpointAgentsEssentials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpointAgentsEssentials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpointAgentsEssentials` to be an array in the JSON string but got `%s`", jsonObj.get("endpointAgentsEssentials").toString()));
          }

          // validate the optional field `endpointAgentsEssentials` (array)
          for (int i = 0; i < jsonArrayendpointAgentsEssentials.size(); i++) {
            EndpointAgentsEssentialsInner.validateJsonElement(jsonArrayendpointAgentsEssentials.get(i));
          };
        }
      }
      if (jsonObj.get("endpointAgentsEmbedded") != null && !jsonObj.get("endpointAgentsEmbedded").isJsonNull()) {
        JsonArray jsonArrayendpointAgentsEmbedded = jsonObj.getAsJsonArray("endpointAgentsEmbedded");
        if (jsonArrayendpointAgentsEmbedded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpointAgentsEmbedded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpointAgentsEmbedded` to be an array in the JSON string but got `%s`", jsonObj.get("endpointAgentsEmbedded").toString()));
          }

          // validate the optional field `endpointAgentsEmbedded` (array)
          for (int i = 0; i < jsonArrayendpointAgentsEmbedded.size(); i++) {
            EndpointAgentsEmbeddedInner.validateJsonElement(jsonArrayendpointAgentsEmbedded.get(i));
          };
        }
      }
      if (jsonObj.get("enterpriseAgents") != null && !jsonObj.get("enterpriseAgents").isJsonNull()) {
        JsonArray jsonArrayenterpriseAgents = jsonObj.getAsJsonArray("enterpriseAgents");
        if (jsonArrayenterpriseAgents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enterpriseAgents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enterpriseAgents` to be an array in the JSON string but got `%s`", jsonObj.get("enterpriseAgents").toString()));
          }

          // validate the optional field `enterpriseAgents` (array)
          for (int i = 0; i < jsonArrayenterpriseAgents.size(); i++) {
            EnterpriseAgentsInner.validateJsonElement(jsonArrayenterpriseAgents.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageUsage>() {
           @Override
           public void write(JsonWriter out, UsageUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsageUsage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsageUsage
  * @throws IOException if the JSON string is invalid with respect to UsageUsage
  */
  public static UsageUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageUsage.class);
  }

 /**
  * Convert an instance of UsageUsage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

