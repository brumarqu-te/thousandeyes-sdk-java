/*
 * Usage API
 * ## Overview These usage endpoints define the following operations: * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View Billing` permission to access this endpoint.     * This endpoint offers visibility across all account groups within the organization.     * Users with `View Billing` permission in multiple organizations should query the endpoint with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the API definitions below for detailed usage instructions and optional parameters.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * TestsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:30.044048Z[Europe/London]")
public class TestsInner {
  public static final String SERIALIZED_NAME_AID = "aid";
  @SerializedName(SERIALIZED_NAME_AID)
  private Object aid = null;

  public static final String SERIALIZED_NAME_ACCOUNT_GROUP_NAME = "accountGroupName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_GROUP_NAME)
  private Object accountGroupName = null;

  public static final String SERIALIZED_NAME_TEST_ID = "testId";
  @SerializedName(SERIALIZED_NAME_TEST_ID)
  private String testId;

  public static final String SERIALIZED_NAME_TEST_NAME = "testName";
  @SerializedName(SERIALIZED_NAME_TEST_NAME)
  private String testName;

  public static final String SERIALIZED_NAME_TEST_TYPE = "testType";
  @SerializedName(SERIALIZED_NAME_TEST_TYPE)
  private String testType;

  public static final String SERIALIZED_NAME_CLOUD_UNITS_USED = "cloudUnitsUsed";
  @SerializedName(SERIALIZED_NAME_CLOUD_UNITS_USED)
  private Long cloudUnitsUsed;

  public static final String SERIALIZED_NAME_CLOUD_UNITS_PROJECTED = "cloudUnitsProjected";
  @SerializedName(SERIALIZED_NAME_CLOUD_UNITS_PROJECTED)
  private Long cloudUnitsProjected;

  public TestsInner() {
  }

  public TestsInner aid(Object aid) {
    
    this.aid = aid;
    return this;
  }

   /**
   * Unique identifier of the account group which owns the test.
   * @return aid
  **/
  @javax.annotation.Nullable
  public Object getAid() {
    return aid;
  }


  public void setAid(Object aid) {
    this.aid = aid;
  }


  public TestsInner accountGroupName(Object accountGroupName) {
    
    this.accountGroupName = accountGroupName;
    return this;
  }

   /**
   * Name of the account group which owns the test.
   * @return accountGroupName
  **/
  @javax.annotation.Nullable
  public Object getAccountGroupName() {
    return accountGroupName;
  }


  public void setAccountGroupName(Object accountGroupName) {
    this.accountGroupName = accountGroupName;
  }


  public TestsInner testId(String testId) {
    
    this.testId = testId;
    return this;
  }

   /**
   * Unique identifier of the test generating usage.
   * @return testId
  **/
  @javax.annotation.Nullable
  public String getTestId() {
    return testId;
  }


  public void setTestId(String testId) {
    this.testId = testId;
  }


  public TestsInner testName(String testName) {
    
    this.testName = testName;
    return this;
  }

   /**
   * Name of the test generating usage.
   * @return testName
  **/
  @javax.annotation.Nullable
  public String getTestName() {
    return testName;
  }


  public void setTestName(String testName) {
    this.testName = testName;
  }


  public TestsInner testType(String testType) {
    
    this.testType = testType;
    return this;
  }

   /**
   * The type of test that generated the usage data. Note that this parameter provides a user-friendly description of the test type and should not be parsed to determine the endpoint for querying configuration details.
   * @return testType
  **/
  @javax.annotation.Nullable
  public String getTestType() {
    return testType;
  }


  public void setTestType(String testType) {
    this.testType = testType;
  }


  public TestsInner cloudUnitsUsed(Long cloudUnitsUsed) {
    
    this.cloudUnitsUsed = cloudUnitsUsed;
    return this;
  }

   /**
   * Number of cloud units that the test has consumed in the usage period.
   * @return cloudUnitsUsed
  **/
  @javax.annotation.Nullable
  public Long getCloudUnitsUsed() {
    return cloudUnitsUsed;
  }


  public void setCloudUnitsUsed(Long cloudUnitsUsed) {
    this.cloudUnitsUsed = cloudUnitsUsed;
  }


  public TestsInner cloudUnitsProjected(Long cloudUnitsProjected) {
    
    this.cloudUnitsProjected = cloudUnitsProjected;
    return this;
  }

   /**
   * The estimated number of cloud units that the test is expected to consume during the usage period. This estimate is determined by considering the units consumed up to the current time and the test&#39;s configuration. It&#39;s important to note that this value is updated every hour. For new tests, the &#x60;cloudUnitsProjected&#x60; parameter is absent until the projection is calculated.
   * @return cloudUnitsProjected
  **/
  @javax.annotation.Nullable
  public Long getCloudUnitsProjected() {
    return cloudUnitsProjected;
  }


  public void setCloudUnitsProjected(Long cloudUnitsProjected) {
    this.cloudUnitsProjected = cloudUnitsProjected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestsInner testsInner = (TestsInner) o;
    return Objects.equals(this.aid, testsInner.aid) &&
        Objects.equals(this.accountGroupName, testsInner.accountGroupName) &&
        Objects.equals(this.testId, testsInner.testId) &&
        Objects.equals(this.testName, testsInner.testName) &&
        Objects.equals(this.testType, testsInner.testType) &&
        Objects.equals(this.cloudUnitsUsed, testsInner.cloudUnitsUsed) &&
        Objects.equals(this.cloudUnitsProjected, testsInner.cloudUnitsProjected);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aid, accountGroupName, testId, testName, testType, cloudUnitsUsed, cloudUnitsProjected);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestsInner {\n");
    sb.append("    aid: ").append(toIndentedString(aid)).append("\n");
    sb.append("    accountGroupName: ").append(toIndentedString(accountGroupName)).append("\n");
    sb.append("    testId: ").append(toIndentedString(testId)).append("\n");
    sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
    sb.append("    testType: ").append(toIndentedString(testType)).append("\n");
    sb.append("    cloudUnitsUsed: ").append(toIndentedString(cloudUnitsUsed)).append("\n");
    sb.append("    cloudUnitsProjected: ").append(toIndentedString(cloudUnitsProjected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aid");
    openapiFields.add("accountGroupName");
    openapiFields.add("testId");
    openapiFields.add("testName");
    openapiFields.add("testType");
    openapiFields.add("cloudUnitsUsed");
    openapiFields.add("cloudUnitsProjected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TestsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestsInner is not found in the empty JSON string", TestsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("testId") != null && !jsonObj.get("testId").isJsonNull()) && !jsonObj.get("testId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testId").toString()));
      }
      if ((jsonObj.get("testName") != null && !jsonObj.get("testName").isJsonNull()) && !jsonObj.get("testName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testName").toString()));
      }
      if ((jsonObj.get("testType") != null && !jsonObj.get("testType").isJsonNull()) && !jsonObj.get("testType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TestsInner>() {
           @Override
           public void write(JsonWriter out, TestsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestsInner
  * @throws IOException if the JSON string is invalid with respect to TestsInner
  */
  public static TestsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestsInner.class);
  }

 /**
  * Convert an instance of TestsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

