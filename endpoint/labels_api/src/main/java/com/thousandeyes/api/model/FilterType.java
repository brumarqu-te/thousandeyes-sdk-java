/*
 * Endpoint Agent Labels API
 * Manage labels applied to endpoint agents using this API. 
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Type of filter - the data that will be used to filter. 
 */
@JsonAdapter(FilterType.Adapter.class)
public enum FilterType {
  
  AGENT_ID("agent-id"),
  
  PUBLIC_NETWORK("public-network"),
  
  LOCAL_NETWORK("local-network"),
  
  CONNECTION("connection"),
  
  GATEWAY("gateway"),
  
  PLATFORM("platform"),
  
  AGENT_TYPE("agent-type"),
  
  VPN_VENDOR("vpn-vendor"),
  
  VPN_GATEWAY_ADDRESS("vpn-gateway-address"),
  
  VPN_CLIENT_NETWORK("vpn-client-network"),
  
  VPN_CLIENT_ADDRESS("vpn-client-address"),
  
  IP_ADDRESS_FAMILY("ip-address-family"),
  
  SSID("ssid"),
  
  BSSID("bssid"),
  
  HOSTNAME("hostname"),
  
  USERNAME("username"),
  
  ASN("asn");

  private String value;

  FilterType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FilterType fromValue(String value) {
    for (FilterType b : FilterType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FilterType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FilterType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FilterType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FilterType.fromValue(value);
    }
  }
}

