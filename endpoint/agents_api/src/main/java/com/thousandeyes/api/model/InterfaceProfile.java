/*
 * Endpoint Agents API
 * Manage ThousandEyes Endpoint Agents using this API.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AddressProfile;
import com.thousandeyes.api.model.EthernetProfile;
import com.thousandeyes.api.model.InterfaceHardwareType;
import com.thousandeyes.api.model.WirelessProfile;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * InterfaceProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:35.446421Z[Europe/London]")
public class InterfaceProfile {
  public static final String SERIALIZED_NAME_INTERFACE_NAME = "interfaceName";
  @SerializedName(SERIALIZED_NAME_INTERFACE_NAME)
  private String interfaceName;

  public static final String SERIALIZED_NAME_ADDRESS_PROFILES = "addressProfiles";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PROFILES)
  private List<AddressProfile> addressProfiles;

  public static final String SERIALIZED_NAME_HARDWARE_TYPE = "hardwareType";
  @SerializedName(SERIALIZED_NAME_HARDWARE_TYPE)
  private InterfaceHardwareType hardwareType;

  public static final String SERIALIZED_NAME_ETHERNET_PROFILE = "ethernetProfile";
  @SerializedName(SERIALIZED_NAME_ETHERNET_PROFILE)
  private EthernetProfile ethernetProfile;

  public static final String SERIALIZED_NAME_WIRELESS_PROFILE = "wirelessProfile";
  @SerializedName(SERIALIZED_NAME_WIRELESS_PROFILE)
  private WirelessProfile wirelessProfile;

  public InterfaceProfile() {
  }

  public InterfaceProfile interfaceName(String interfaceName) {
    
    this.interfaceName = interfaceName;
    return this;
  }

   /**
   * Get interfaceName
   * @return interfaceName
  **/
  @javax.annotation.Nullable
  public String getInterfaceName() {
    return interfaceName;
  }


  public void setInterfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
  }


  public InterfaceProfile addressProfiles(List<AddressProfile> addressProfiles) {
    
    this.addressProfiles = addressProfiles;
    return this;
  }

  public InterfaceProfile addAddressProfilesItem(AddressProfile addressProfilesItem) {
    if (this.addressProfiles == null) {
      this.addressProfiles = new ArrayList<>();
    }
    this.addressProfiles.add(addressProfilesItem);
    return this;
  }

   /**
   * Get addressProfiles
   * @return addressProfiles
  **/
  @javax.annotation.Nullable
  public List<AddressProfile> getAddressProfiles() {
    return addressProfiles;
  }


  public void setAddressProfiles(List<AddressProfile> addressProfiles) {
    this.addressProfiles = addressProfiles;
  }


  public InterfaceProfile hardwareType(InterfaceHardwareType hardwareType) {
    
    this.hardwareType = hardwareType;
    return this;
  }

   /**
   * Get hardwareType
   * @return hardwareType
  **/
  @javax.annotation.Nullable
  public InterfaceHardwareType getHardwareType() {
    return hardwareType;
  }


  public void setHardwareType(InterfaceHardwareType hardwareType) {
    this.hardwareType = hardwareType;
  }


  public InterfaceProfile ethernetProfile(EthernetProfile ethernetProfile) {
    
    this.ethernetProfile = ethernetProfile;
    return this;
  }

   /**
   * Get ethernetProfile
   * @return ethernetProfile
  **/
  @javax.annotation.Nullable
  public EthernetProfile getEthernetProfile() {
    return ethernetProfile;
  }


  public void setEthernetProfile(EthernetProfile ethernetProfile) {
    this.ethernetProfile = ethernetProfile;
  }


  public InterfaceProfile wirelessProfile(WirelessProfile wirelessProfile) {
    
    this.wirelessProfile = wirelessProfile;
    return this;
  }

   /**
   * Get wirelessProfile
   * @return wirelessProfile
  **/
  @javax.annotation.Nullable
  public WirelessProfile getWirelessProfile() {
    return wirelessProfile;
  }


  public void setWirelessProfile(WirelessProfile wirelessProfile) {
    this.wirelessProfile = wirelessProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterfaceProfile interfaceProfile = (InterfaceProfile) o;
    return Objects.equals(this.interfaceName, interfaceProfile.interfaceName) &&
        Objects.equals(this.addressProfiles, interfaceProfile.addressProfiles) &&
        Objects.equals(this.hardwareType, interfaceProfile.hardwareType) &&
        Objects.equals(this.ethernetProfile, interfaceProfile.ethernetProfile) &&
        Objects.equals(this.wirelessProfile, interfaceProfile.wirelessProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceName, addressProfiles, hardwareType, ethernetProfile, wirelessProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterfaceProfile {\n");
    sb.append("    interfaceName: ").append(toIndentedString(interfaceName)).append("\n");
    sb.append("    addressProfiles: ").append(toIndentedString(addressProfiles)).append("\n");
    sb.append("    hardwareType: ").append(toIndentedString(hardwareType)).append("\n");
    sb.append("    ethernetProfile: ").append(toIndentedString(ethernetProfile)).append("\n");
    sb.append("    wirelessProfile: ").append(toIndentedString(wirelessProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interfaceName");
    openapiFields.add("addressProfiles");
    openapiFields.add("hardwareType");
    openapiFields.add("ethernetProfile");
    openapiFields.add("wirelessProfile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InterfaceProfile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InterfaceProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InterfaceProfile is not found in the empty JSON string", InterfaceProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InterfaceProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InterfaceProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("interfaceName") != null && !jsonObj.get("interfaceName").isJsonNull()) && !jsonObj.get("interfaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceName").toString()));
      }
      if (jsonObj.get("addressProfiles") != null && !jsonObj.get("addressProfiles").isJsonNull()) {
        JsonArray jsonArrayaddressProfiles = jsonObj.getAsJsonArray("addressProfiles");
        if (jsonArrayaddressProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addressProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addressProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("addressProfiles").toString()));
          }

          // validate the optional field `addressProfiles` (array)
          for (int i = 0; i < jsonArrayaddressProfiles.size(); i++) {
            AddressProfile.validateJsonElement(jsonArrayaddressProfiles.get(i));
          };
        }
      }
      // validate the optional field `ethernetProfile`
      if (jsonObj.get("ethernetProfile") != null && !jsonObj.get("ethernetProfile").isJsonNull()) {
        EthernetProfile.validateJsonElement(jsonObj.get("ethernetProfile"));
      }
      // validate the optional field `wirelessProfile`
      if (jsonObj.get("wirelessProfile") != null && !jsonObj.get("wirelessProfile").isJsonNull()) {
        WirelessProfile.validateJsonElement(jsonObj.get("wirelessProfile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InterfaceProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InterfaceProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InterfaceProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InterfaceProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<InterfaceProfile>() {
           @Override
           public void write(JsonWriter out, InterfaceProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InterfaceProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InterfaceProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InterfaceProfile
  * @throws IOException if the JSON string is invalid with respect to InterfaceProfile
  */
  public static InterfaceProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InterfaceProfile.class);
  }

 /**
  * Convert an instance of InterfaceProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

