/*
 * Endpoint Agents API
 * Manage ThousandEyes Endpoint Agents using this API.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * WirelessProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:21.121994Z[Europe/London]")
public class WirelessProfile {
  public static final String SERIALIZED_NAME_BSSID = "bssid";
  @SerializedName(SERIALIZED_NAME_BSSID)
  private String bssid;

  public static final String SERIALIZED_NAME_SSID = "ssid";
  @SerializedName(SERIALIZED_NAME_SSID)
  private String ssid;

  public static final String SERIALIZED_NAME_RSSI = "rssi";
  @SerializedName(SERIALIZED_NAME_RSSI)
  private Integer rssi;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Integer channel;

  public static final String SERIALIZED_NAME_PHY_MODE = "phyMode";
  @SerializedName(SERIALIZED_NAME_PHY_MODE)
  private String phyMode;

  public WirelessProfile() {
  }

  public WirelessProfile bssid(String bssid) {
    
    this.bssid = bssid;
    return this;
  }

   /**
   * Get bssid
   * @return bssid
  **/
  @javax.annotation.Nullable
  public String getBssid() {
    return bssid;
  }


  public void setBssid(String bssid) {
    this.bssid = bssid;
  }


  public WirelessProfile ssid(String ssid) {
    
    this.ssid = ssid;
    return this;
  }

   /**
   * Get ssid
   * @return ssid
  **/
  @javax.annotation.Nullable
  public String getSsid() {
    return ssid;
  }


  public void setSsid(String ssid) {
    this.ssid = ssid;
  }


  public WirelessProfile rssi(Integer rssi) {
    
    this.rssi = rssi;
    return this;
  }

   /**
   * Get rssi
   * @return rssi
  **/
  @javax.annotation.Nullable
  public Integer getRssi() {
    return rssi;
  }


  public void setRssi(Integer rssi) {
    this.rssi = rssi;
  }


  public WirelessProfile channel(Integer channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nullable
  public Integer getChannel() {
    return channel;
  }


  public void setChannel(Integer channel) {
    this.channel = channel;
  }


  public WirelessProfile phyMode(String phyMode) {
    
    this.phyMode = phyMode;
    return this;
  }

   /**
   * Get phyMode
   * @return phyMode
  **/
  @javax.annotation.Nullable
  public String getPhyMode() {
    return phyMode;
  }


  public void setPhyMode(String phyMode) {
    this.phyMode = phyMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WirelessProfile wirelessProfile = (WirelessProfile) o;
    return Objects.equals(this.bssid, wirelessProfile.bssid) &&
        Objects.equals(this.ssid, wirelessProfile.ssid) &&
        Objects.equals(this.rssi, wirelessProfile.rssi) &&
        Objects.equals(this.channel, wirelessProfile.channel) &&
        Objects.equals(this.phyMode, wirelessProfile.phyMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bssid, ssid, rssi, channel, phyMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WirelessProfile {\n");
    sb.append("    bssid: ").append(toIndentedString(bssid)).append("\n");
    sb.append("    ssid: ").append(toIndentedString(ssid)).append("\n");
    sb.append("    rssi: ").append(toIndentedString(rssi)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    phyMode: ").append(toIndentedString(phyMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bssid");
    openapiFields.add("ssid");
    openapiFields.add("rssi");
    openapiFields.add("channel");
    openapiFields.add("phyMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WirelessProfile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WirelessProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WirelessProfile is not found in the empty JSON string", WirelessProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WirelessProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WirelessProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bssid") != null && !jsonObj.get("bssid").isJsonNull()) && !jsonObj.get("bssid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bssid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bssid").toString()));
      }
      if ((jsonObj.get("ssid") != null && !jsonObj.get("ssid").isJsonNull()) && !jsonObj.get("ssid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssid").toString()));
      }
      if ((jsonObj.get("phyMode") != null && !jsonObj.get("phyMode").isJsonNull()) && !jsonObj.get("phyMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phyMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phyMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WirelessProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WirelessProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WirelessProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WirelessProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<WirelessProfile>() {
           @Override
           public void write(JsonWriter out, WirelessProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WirelessProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WirelessProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WirelessProfile
  * @throws IOException if the JSON string is invalid with respect to WirelessProfile
  */
  public static WirelessProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WirelessProfile.class);
  }

 /**
  * Convert an instance of WirelessProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

