/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.NetworkProfile;
import com.thousandeyes.api.model.RealUserTestNetworkGatewayPing;
import com.thousandeyes.api.model.RealUserTestNetworkPing;
import com.thousandeyes.api.model.RealUserTestNetworkTraceroute;
import com.thousandeyes.api.model.RealUserTestNetworkVpnPing;
import com.thousandeyes.api.model.RealUserTestNetworkVpnTraceroute;
import com.thousandeyes.api.model.SystemMetrics;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * Contains details about network profile and conditions during session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:26.016985Z[Europe/London]")
public class RealUserTestNetwork {
  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private NetworkProfile networkProfile;

  public static final String SERIALIZED_NAME_SYSTEM_METRICS = "systemMetrics";
  @SerializedName(SERIALIZED_NAME_SYSTEM_METRICS)
  private SystemMetrics systemMetrics;

  public static final String SERIALIZED_NAME_GATEWAY_PING = "gatewayPing";
  @SerializedName(SERIALIZED_NAME_GATEWAY_PING)
  private RealUserTestNetworkGatewayPing gatewayPing;

  public static final String SERIALIZED_NAME_PING = "ping";
  @SerializedName(SERIALIZED_NAME_PING)
  private RealUserTestNetworkPing ping;

  public static final String SERIALIZED_NAME_TRACEROUTE = "traceroute";
  @SerializedName(SERIALIZED_NAME_TRACEROUTE)
  private RealUserTestNetworkTraceroute traceroute;

  public static final String SERIALIZED_NAME_CONNECT_RTT = "connectRtt";
  @SerializedName(SERIALIZED_NAME_CONNECT_RTT)
  private Double connectRtt;

  public static final String SERIALIZED_NAME_IS_ICMP_BLOCKED = "isIcmpBlocked";
  @SerializedName(SERIALIZED_NAME_IS_ICMP_BLOCKED)
  private Boolean isIcmpBlocked;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<String> errors;

  public static final String SERIALIZED_NAME_VPN_PING = "vpnPing";
  @SerializedName(SERIALIZED_NAME_VPN_PING)
  private RealUserTestNetworkVpnPing vpnPing;

  public static final String SERIALIZED_NAME_VPN_TRACEROUTE = "vpnTraceroute";
  @SerializedName(SERIALIZED_NAME_VPN_TRACEROUTE)
  private RealUserTestNetworkVpnTraceroute vpnTraceroute;

  public RealUserTestNetwork() {
  }

  
  public RealUserTestNetwork(
     Double connectRtt, 
     Boolean isIcmpBlocked, 
     List<String> errors
  ) {
    this();
    this.connectRtt = connectRtt;
    this.isIcmpBlocked = isIcmpBlocked;
    this.errors = errors;
  }

  public RealUserTestNetwork networkProfile(NetworkProfile networkProfile) {
    
    this.networkProfile = networkProfile;
    return this;
  }

   /**
   * Get networkProfile
   * @return networkProfile
  **/
  @javax.annotation.Nullable
  public NetworkProfile getNetworkProfile() {
    return networkProfile;
  }


  public void setNetworkProfile(NetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
  }


  public RealUserTestNetwork systemMetrics(SystemMetrics systemMetrics) {
    
    this.systemMetrics = systemMetrics;
    return this;
  }

   /**
   * Get systemMetrics
   * @return systemMetrics
  **/
  @javax.annotation.Nullable
  public SystemMetrics getSystemMetrics() {
    return systemMetrics;
  }


  public void setSystemMetrics(SystemMetrics systemMetrics) {
    this.systemMetrics = systemMetrics;
  }


  public RealUserTestNetwork gatewayPing(RealUserTestNetworkGatewayPing gatewayPing) {
    
    this.gatewayPing = gatewayPing;
    return this;
  }

   /**
   * Get gatewayPing
   * @return gatewayPing
  **/
  @javax.annotation.Nullable
  public RealUserTestNetworkGatewayPing getGatewayPing() {
    return gatewayPing;
  }


  public void setGatewayPing(RealUserTestNetworkGatewayPing gatewayPing) {
    this.gatewayPing = gatewayPing;
  }


  public RealUserTestNetwork ping(RealUserTestNetworkPing ping) {
    
    this.ping = ping;
    return this;
  }

   /**
   * Get ping
   * @return ping
  **/
  @javax.annotation.Nullable
  public RealUserTestNetworkPing getPing() {
    return ping;
  }


  public void setPing(RealUserTestNetworkPing ping) {
    this.ping = ping;
  }


  public RealUserTestNetwork traceroute(RealUserTestNetworkTraceroute traceroute) {
    
    this.traceroute = traceroute;
    return this;
  }

   /**
   * Get traceroute
   * @return traceroute
  **/
  @javax.annotation.Nullable
  public RealUserTestNetworkTraceroute getTraceroute() {
    return traceroute;
  }


  public void setTraceroute(RealUserTestNetworkTraceroute traceroute) {
    this.traceroute = traceroute;
  }


   /**
   * Represents the number of milliseconds required to establish TCP connectivity with the target.
   * @return connectRtt
  **/
  @javax.annotation.Nullable
  public Double getConnectRtt() {
    return connectRtt;
  }




   /**
   * Set to &#x60;true&#x60; if network target is blocking ICMP echo (ping) queries.
   * @return isIcmpBlocked
  **/
  @javax.annotation.Nullable
  public Boolean getIsIcmpBlocked() {
    return isIcmpBlocked;
  }




   /**
   * Array of string representing possible network errors.
   * @return errors
  **/
  @javax.annotation.Nullable
  public List<String> getErrors() {
    return errors;
  }




  public RealUserTestNetwork vpnPing(RealUserTestNetworkVpnPing vpnPing) {
    
    this.vpnPing = vpnPing;
    return this;
  }

   /**
   * Get vpnPing
   * @return vpnPing
  **/
  @javax.annotation.Nullable
  public RealUserTestNetworkVpnPing getVpnPing() {
    return vpnPing;
  }


  public void setVpnPing(RealUserTestNetworkVpnPing vpnPing) {
    this.vpnPing = vpnPing;
  }


  public RealUserTestNetwork vpnTraceroute(RealUserTestNetworkVpnTraceroute vpnTraceroute) {
    
    this.vpnTraceroute = vpnTraceroute;
    return this;
  }

   /**
   * Get vpnTraceroute
   * @return vpnTraceroute
  **/
  @javax.annotation.Nullable
  public RealUserTestNetworkVpnTraceroute getVpnTraceroute() {
    return vpnTraceroute;
  }


  public void setVpnTraceroute(RealUserTestNetworkVpnTraceroute vpnTraceroute) {
    this.vpnTraceroute = vpnTraceroute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealUserTestNetwork realUserTestNetwork = (RealUserTestNetwork) o;
    return Objects.equals(this.networkProfile, realUserTestNetwork.networkProfile) &&
        Objects.equals(this.systemMetrics, realUserTestNetwork.systemMetrics) &&
        Objects.equals(this.gatewayPing, realUserTestNetwork.gatewayPing) &&
        Objects.equals(this.ping, realUserTestNetwork.ping) &&
        Objects.equals(this.traceroute, realUserTestNetwork.traceroute) &&
        Objects.equals(this.connectRtt, realUserTestNetwork.connectRtt) &&
        Objects.equals(this.isIcmpBlocked, realUserTestNetwork.isIcmpBlocked) &&
        Objects.equals(this.errors, realUserTestNetwork.errors) &&
        Objects.equals(this.vpnPing, realUserTestNetwork.vpnPing) &&
        Objects.equals(this.vpnTraceroute, realUserTestNetwork.vpnTraceroute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkProfile, systemMetrics, gatewayPing, ping, traceroute, connectRtt, isIcmpBlocked, errors, vpnPing, vpnTraceroute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealUserTestNetwork {\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    systemMetrics: ").append(toIndentedString(systemMetrics)).append("\n");
    sb.append("    gatewayPing: ").append(toIndentedString(gatewayPing)).append("\n");
    sb.append("    ping: ").append(toIndentedString(ping)).append("\n");
    sb.append("    traceroute: ").append(toIndentedString(traceroute)).append("\n");
    sb.append("    connectRtt: ").append(toIndentedString(connectRtt)).append("\n");
    sb.append("    isIcmpBlocked: ").append(toIndentedString(isIcmpBlocked)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    vpnPing: ").append(toIndentedString(vpnPing)).append("\n");
    sb.append("    vpnTraceroute: ").append(toIndentedString(vpnTraceroute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("networkProfile");
    openapiFields.add("systemMetrics");
    openapiFields.add("gatewayPing");
    openapiFields.add("ping");
    openapiFields.add("traceroute");
    openapiFields.add("connectRtt");
    openapiFields.add("isIcmpBlocked");
    openapiFields.add("errors");
    openapiFields.add("vpnPing");
    openapiFields.add("vpnTraceroute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RealUserTestNetwork
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealUserTestNetwork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealUserTestNetwork is not found in the empty JSON string", RealUserTestNetwork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealUserTestNetwork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealUserTestNetwork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `networkProfile`
      if (jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) {
        NetworkProfile.validateJsonElement(jsonObj.get("networkProfile"));
      }
      // validate the optional field `systemMetrics`
      if (jsonObj.get("systemMetrics") != null && !jsonObj.get("systemMetrics").isJsonNull()) {
        SystemMetrics.validateJsonElement(jsonObj.get("systemMetrics"));
      }
      // validate the optional field `gatewayPing`
      if (jsonObj.get("gatewayPing") != null && !jsonObj.get("gatewayPing").isJsonNull()) {
        RealUserTestNetworkGatewayPing.validateJsonElement(jsonObj.get("gatewayPing"));
      }
      // validate the optional field `ping`
      if (jsonObj.get("ping") != null && !jsonObj.get("ping").isJsonNull()) {
        RealUserTestNetworkPing.validateJsonElement(jsonObj.get("ping"));
      }
      // validate the optional field `traceroute`
      if (jsonObj.get("traceroute") != null && !jsonObj.get("traceroute").isJsonNull()) {
        RealUserTestNetworkTraceroute.validateJsonElement(jsonObj.get("traceroute"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull() && !jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }
      // validate the optional field `vpnPing`
      if (jsonObj.get("vpnPing") != null && !jsonObj.get("vpnPing").isJsonNull()) {
        RealUserTestNetworkVpnPing.validateJsonElement(jsonObj.get("vpnPing"));
      }
      // validate the optional field `vpnTraceroute`
      if (jsonObj.get("vpnTraceroute") != null && !jsonObj.get("vpnTraceroute").isJsonNull()) {
        RealUserTestNetworkVpnTraceroute.validateJsonElement(jsonObj.get("vpnTraceroute"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealUserTestNetwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealUserTestNetwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealUserTestNetwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealUserTestNetwork.class));

       return (TypeAdapter<T>) new TypeAdapter<RealUserTestNetwork>() {
           @Override
           public void write(JsonWriter out, RealUserTestNetwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealUserTestNetwork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RealUserTestNetwork given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RealUserTestNetwork
  * @throws IOException if the JSON string is invalid with respect to RealUserTestNetwork
  */
  public static RealUserTestNetwork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealUserTestNetwork.class);
  }

 /**
  * Convert an instance of RealUserTestNetwork to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

