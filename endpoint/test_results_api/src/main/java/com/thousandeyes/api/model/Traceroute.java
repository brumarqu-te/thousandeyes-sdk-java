/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.TracerouteHop;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * Traceroute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:40.551124Z[Europe/London]")
public class Traceroute {
  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_INFO_FLAGS = "infoFlags";
  @SerializedName(SERIALIZED_NAME_INFO_FLAGS)
  private List<String> infoFlags;

  public static final String SERIALIZED_NAME_INTERNAL_ERRORS = "internalErrors";
  @SerializedName(SERIALIZED_NAME_INTERNAL_ERRORS)
  private List<String> internalErrors;

  public static final String SERIALIZED_NAME_HOPS = "hops";
  @SerializedName(SERIALIZED_NAME_HOPS)
  private List<TracerouteHop> hops;

  public Traceroute() {
  }

  
  public Traceroute(
     String destination, 
     String error, 
     List<String> infoFlags, 
     List<String> internalErrors
  ) {
    this();
    this.destination = destination;
    this.error = error;
    this.infoFlags = infoFlags;
    this.internalErrors = internalErrors;
  }

   /**
   * The target IP address.
   * @return destination
  **/
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }




   /**
   * Only present when there is an error
   * @return error
  **/
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }




   /**
   * Get infoFlags
   * @return infoFlags
  **/
  @javax.annotation.Nullable
  public List<String> getInfoFlags() {
    return infoFlags;
  }




   /**
   * Get internalErrors
   * @return internalErrors
  **/
  @javax.annotation.Nullable
  public List<String> getInternalErrors() {
    return internalErrors;
  }




  public Traceroute hops(List<TracerouteHop> hops) {
    
    this.hops = hops;
    return this;
  }

  public Traceroute addHopsItem(TracerouteHop hopsItem) {
    if (this.hops == null) {
      this.hops = new ArrayList<>();
    }
    this.hops.add(hopsItem);
    return this;
  }

   /**
   * Get hops
   * @return hops
  **/
  @javax.annotation.Nullable
  public List<TracerouteHop> getHops() {
    return hops;
  }


  public void setHops(List<TracerouteHop> hops) {
    this.hops = hops;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Traceroute traceroute = (Traceroute) o;
    return Objects.equals(this.destination, traceroute.destination) &&
        Objects.equals(this.error, traceroute.error) &&
        Objects.equals(this.infoFlags, traceroute.infoFlags) &&
        Objects.equals(this.internalErrors, traceroute.internalErrors) &&
        Objects.equals(this.hops, traceroute.hops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, error, infoFlags, internalErrors, hops);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Traceroute {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    infoFlags: ").append(toIndentedString(infoFlags)).append("\n");
    sb.append("    internalErrors: ").append(toIndentedString(internalErrors)).append("\n");
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination");
    openapiFields.add("error");
    openapiFields.add("infoFlags");
    openapiFields.add("internalErrors");
    openapiFields.add("hops");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Traceroute
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Traceroute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Traceroute is not found in the empty JSON string", Traceroute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Traceroute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Traceroute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("infoFlags") != null && !jsonObj.get("infoFlags").isJsonNull() && !jsonObj.get("infoFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoFlags` to be an array in the JSON string but got `%s`", jsonObj.get("infoFlags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("internalErrors") != null && !jsonObj.get("internalErrors").isJsonNull() && !jsonObj.get("internalErrors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalErrors` to be an array in the JSON string but got `%s`", jsonObj.get("internalErrors").toString()));
      }
      if (jsonObj.get("hops") != null && !jsonObj.get("hops").isJsonNull()) {
        JsonArray jsonArrayhops = jsonObj.getAsJsonArray("hops");
        if (jsonArrayhops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hops` to be an array in the JSON string but got `%s`", jsonObj.get("hops").toString()));
          }

          // validate the optional field `hops` (array)
          for (int i = 0; i < jsonArrayhops.size(); i++) {
            TracerouteHop.validateJsonElement(jsonArrayhops.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Traceroute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Traceroute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Traceroute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Traceroute.class));

       return (TypeAdapter<T>) new TypeAdapter<Traceroute>() {
           @Override
           public void write(JsonWriter out, Traceroute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Traceroute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Traceroute given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Traceroute
  * @throws IOException if the JSON string is invalid with respect to Traceroute
  */
  public static Traceroute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Traceroute.class);
  }

 /**
  * Convert an instance of Traceroute to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

