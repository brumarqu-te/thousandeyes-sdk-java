/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.RealUserTestPagePageTimings;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * RealUserTestPage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:40.551124Z[Europe/London]")
public class RealUserTestPage {
  public static final String SERIALIZED_NAME_PAGE_ID = "pageId";
  @SerializedName(SERIALIZED_NAME_PAGE_ID)
  private String pageId;

  public static final String SERIALIZED_NAME_PAGE_TITLE = "pageTitle";
  @SerializedName(SERIALIZED_NAME_PAGE_TITLE)
  private String pageTitle;

  public static final String SERIALIZED_NAME_PAGE_URL = "pageUrl";
  @SerializedName(SERIALIZED_NAME_PAGE_URL)
  private String pageUrl;

  public static final String SERIALIZED_NAME_LOAD_DATE = "loadDate";
  @SerializedName(SERIALIZED_NAME_LOAD_DATE)
  private OffsetDateTime loadDate;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private Integer responseCode;

  public static final String SERIALIZED_NAME_PAGE_TIMINGS = "pageTimings";
  @SerializedName(SERIALIZED_NAME_PAGE_TIMINGS)
  private RealUserTestPagePageTimings pageTimings;

  public RealUserTestPage() {
  }

  
  public RealUserTestPage(
     String pageId, 
     String pageTitle, 
     String pageUrl, 
     OffsetDateTime loadDate, 
     Integer responseCode
  ) {
    this();
    this.pageId = pageId;
    this.pageTitle = pageTitle;
    this.pageUrl = pageUrl;
    this.loadDate = loadDate;
    this.responseCode = responseCode;
  }

   /**
   * Web page ID. The page ID is unique only within an endpoint real user test.
   * @return pageId
  **/
  @javax.annotation.Nullable
  public String getPageId() {
    return pageId;
  }




   /**
   * Web page title.
   * @return pageTitle
  **/
  @javax.annotation.Nullable
  public String getPageTitle() {
    return pageTitle;
  }




   /**
   * Web page url
   * @return pageUrl
  **/
  @javax.annotation.Nullable
  public String getPageUrl() {
    return pageUrl;
  }




   /**
   * UTC date when page load started (ISO date-time format).
   * @return loadDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLoadDate() {
    return loadDate;
  }




   /**
   * HTTP response code.
   * @return responseCode
  **/
  @javax.annotation.Nullable
  public Integer getResponseCode() {
    return responseCode;
  }




  public RealUserTestPage pageTimings(RealUserTestPagePageTimings pageTimings) {
    
    this.pageTimings = pageTimings;
    return this;
  }

   /**
   * Get pageTimings
   * @return pageTimings
  **/
  @javax.annotation.Nullable
  public RealUserTestPagePageTimings getPageTimings() {
    return pageTimings;
  }


  public void setPageTimings(RealUserTestPagePageTimings pageTimings) {
    this.pageTimings = pageTimings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealUserTestPage realUserTestPage = (RealUserTestPage) o;
    return Objects.equals(this.pageId, realUserTestPage.pageId) &&
        Objects.equals(this.pageTitle, realUserTestPage.pageTitle) &&
        Objects.equals(this.pageUrl, realUserTestPage.pageUrl) &&
        Objects.equals(this.loadDate, realUserTestPage.loadDate) &&
        Objects.equals(this.responseCode, realUserTestPage.responseCode) &&
        Objects.equals(this.pageTimings, realUserTestPage.pageTimings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageId, pageTitle, pageUrl, loadDate, responseCode, pageTimings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealUserTestPage {\n");
    sb.append("    pageId: ").append(toIndentedString(pageId)).append("\n");
    sb.append("    pageTitle: ").append(toIndentedString(pageTitle)).append("\n");
    sb.append("    pageUrl: ").append(toIndentedString(pageUrl)).append("\n");
    sb.append("    loadDate: ").append(toIndentedString(loadDate)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    pageTimings: ").append(toIndentedString(pageTimings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageId");
    openapiFields.add("pageTitle");
    openapiFields.add("pageUrl");
    openapiFields.add("loadDate");
    openapiFields.add("responseCode");
    openapiFields.add("pageTimings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RealUserTestPage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealUserTestPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealUserTestPage is not found in the empty JSON string", RealUserTestPage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealUserTestPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealUserTestPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pageId") != null && !jsonObj.get("pageId").isJsonNull()) && !jsonObj.get("pageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageId").toString()));
      }
      if ((jsonObj.get("pageTitle") != null && !jsonObj.get("pageTitle").isJsonNull()) && !jsonObj.get("pageTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageTitle").toString()));
      }
      if ((jsonObj.get("pageUrl") != null && !jsonObj.get("pageUrl").isJsonNull()) && !jsonObj.get("pageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageUrl").toString()));
      }
      // validate the optional field `pageTimings`
      if (jsonObj.get("pageTimings") != null && !jsonObj.get("pageTimings").isJsonNull()) {
        RealUserTestPagePageTimings.validateJsonElement(jsonObj.get("pageTimings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealUserTestPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealUserTestPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealUserTestPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealUserTestPage.class));

       return (TypeAdapter<T>) new TypeAdapter<RealUserTestPage>() {
           @Override
           public void write(JsonWriter out, RealUserTestPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealUserTestPage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RealUserTestPage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RealUserTestPage
  * @throws IOException if the JSON string is invalid with respect to RealUserTestPage
  */
  public static RealUserTestPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealUserTestPage.class);
  }

 /**
  * Convert an instance of RealUserTestPage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

