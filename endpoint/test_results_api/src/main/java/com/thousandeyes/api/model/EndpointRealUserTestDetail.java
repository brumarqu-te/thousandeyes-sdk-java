/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.EndpointBrowser;
import com.thousandeyes.api.model.RealUserTestCoordinates;
import com.thousandeyes.api.model.RealUserTestNetwork;
import com.thousandeyes.api.model.RealUserTestPage;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * EndpointRealUserTestDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:40.551124Z[Europe/London]")
public class EndpointRealUserTestDetail {
  public static final String SERIALIZED_NAME_AGENT_ID = "agentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private UUID agentId;

  public static final String SERIALIZED_NAME_COMMITTED = "committed";
  @SerializedName(SERIALIZED_NAME_COMMITTED)
  private OffsetDateTime committed;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_EXPERIENCE_SCORE = "experienceScore";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE_SCORE)
  private Double experienceScore;

  public static final String SERIALIZED_NAME_NUMBER_OF_PAGES = "numberOfPages";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PAGES)
  private Integer numberOfPages;

  public static final String SERIALIZED_NAME_ORGANIZATION_NAME = "organizationName";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_NAME)
  private String organizationName;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_ROUND_ID = "roundId";
  @SerializedName(SERIALIZED_NAME_ROUND_ID)
  private Integer roundId;

  public static final String SERIALIZED_NAME_SOURCE_ADDRESS = "sourceAddress";
  @SerializedName(SERIALIZED_NAME_SOURCE_ADDRESS)
  private String sourceAddress;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VISITED_SITE = "visitedSite";
  @SerializedName(SERIALIZED_NAME_VISITED_SITE)
  private String visitedSite;

  public static final String SERIALIZED_NAME_BROWSER = "browser";
  @SerializedName(SERIALIZED_NAME_BROWSER)
  private EndpointBrowser browser;

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private RealUserTestCoordinates coordinates;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List<RealUserTestPage> pages;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private RealUserTestNetwork network;

  public EndpointRealUserTestDetail() {
  }

  
  public EndpointRealUserTestDetail(
     UUID agentId, 
     OffsetDateTime committed, 
     OffsetDateTime date, 
     Double experienceScore, 
     Integer numberOfPages, 
     String organizationName, 
     Integer port, 
     String protocol, 
     Integer roundId, 
     String sourceAddress, 
     String id, 
     String visitedSite
  ) {
    this();
    this.agentId = agentId;
    this.committed = committed;
    this.date = date;
    this.experienceScore = experienceScore;
    this.numberOfPages = numberOfPages;
    this.organizationName = organizationName;
    this.port = port;
    this.protocol = protocol;
    this.roundId = roundId;
    this.sourceAddress = sourceAddress;
    this.id = id;
    this.visitedSite = visitedSite;
  }

   /**
   * Unique ID of endpoint agent, from &#x60;/endpoint/agents&#x60; endpoint.
   * @return agentId
  **/
  @javax.annotation.Nullable
  public UUID getAgentId() {
    return agentId;
  }




   /**
   * UTC date when endpoint real user test was committed to the controller (ISO date-time format).
   * @return committed
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCommitted() {
    return committed;
  }




   /**
   * UTC date when endpoint real user test took place (ISO date-time format).
   * @return date
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }




   /**
   * Score rating a userâ€™s experience when loading a particular page, from 0 (the worst) to 1 (the best). [More details](https://docs.thousandeyes.com/product-documentation/end-user-monitoring/viewing-data/endpoint-agent-views-reference#user-experience-score).
   * minimum: 0
   * maximum: 1.0
   * @return experienceScore
  **/
  @javax.annotation.Nullable
  public Double getExperienceScore() {
    return experienceScore;
  }




   /**
   * Number of web pages visited on target website.
   * @return numberOfPages
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfPages() {
    return numberOfPages;
  }




   /**
   * Name of the AS organization &#x60;sourceAddress&#x60; belongs to.
   * @return organizationName
  **/
  @javax.annotation.Nullable
  public String getOrganizationName() {
    return organizationName;
  }




   /**
   * Port used to visit target website.
   * @return port
  **/
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }




   /**
   * Protocol used to visit target website.
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }




   /**
   * Epoch time (seconds) indicating the start time of the round.
   * @return roundId
  **/
  @javax.annotation.Nullable
  public Integer getRoundId() {
    return roundId;
  }




   /**
   * Public IP address of the endpoint agent during the session.
   * @return sourceAddress
  **/
  @javax.annotation.Nullable
  public String getSourceAddress() {
    return sourceAddress;
  }




   /**
   * Endpoint real user test ID. Each endpoint real user test occurrence has a unique ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }




   /**
   * Domain used to visit target website.
   * @return visitedSite
  **/
  @javax.annotation.Nullable
  public String getVisitedSite() {
    return visitedSite;
  }




  public EndpointRealUserTestDetail browser(EndpointBrowser browser) {
    
    this.browser = browser;
    return this;
  }

   /**
   * Get browser
   * @return browser
  **/
  @javax.annotation.Nullable
  public EndpointBrowser getBrowser() {
    return browser;
  }


  public void setBrowser(EndpointBrowser browser) {
    this.browser = browser;
  }


  public EndpointRealUserTestDetail coordinates(RealUserTestCoordinates coordinates) {
    
    this.coordinates = coordinates;
    return this;
  }

   /**
   * Get coordinates
   * @return coordinates
  **/
  @javax.annotation.Nullable
  public RealUserTestCoordinates getCoordinates() {
    return coordinates;
  }


  public void setCoordinates(RealUserTestCoordinates coordinates) {
    this.coordinates = coordinates;
  }


  public EndpointRealUserTestDetail pages(List<RealUserTestPage> pages) {
    
    this.pages = pages;
    return this;
  }

  public EndpointRealUserTestDetail addPagesItem(RealUserTestPage pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<>();
    }
    this.pages.add(pagesItem);
    return this;
  }

   /**
   * Web site base domain visited during the session.
   * @return pages
  **/
  @javax.annotation.Nullable
  public List<RealUserTestPage> getPages() {
    return pages;
  }


  public void setPages(List<RealUserTestPage> pages) {
    this.pages = pages;
  }


  public EndpointRealUserTestDetail network(RealUserTestNetwork network) {
    
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nullable
  public RealUserTestNetwork getNetwork() {
    return network;
  }


  public void setNetwork(RealUserTestNetwork network) {
    this.network = network;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointRealUserTestDetail endpointRealUserTestDetail = (EndpointRealUserTestDetail) o;
    return Objects.equals(this.agentId, endpointRealUserTestDetail.agentId) &&
        Objects.equals(this.committed, endpointRealUserTestDetail.committed) &&
        Objects.equals(this.date, endpointRealUserTestDetail.date) &&
        Objects.equals(this.experienceScore, endpointRealUserTestDetail.experienceScore) &&
        Objects.equals(this.numberOfPages, endpointRealUserTestDetail.numberOfPages) &&
        Objects.equals(this.organizationName, endpointRealUserTestDetail.organizationName) &&
        Objects.equals(this.port, endpointRealUserTestDetail.port) &&
        Objects.equals(this.protocol, endpointRealUserTestDetail.protocol) &&
        Objects.equals(this.roundId, endpointRealUserTestDetail.roundId) &&
        Objects.equals(this.sourceAddress, endpointRealUserTestDetail.sourceAddress) &&
        Objects.equals(this.id, endpointRealUserTestDetail.id) &&
        Objects.equals(this.visitedSite, endpointRealUserTestDetail.visitedSite) &&
        Objects.equals(this.browser, endpointRealUserTestDetail.browser) &&
        Objects.equals(this.coordinates, endpointRealUserTestDetail.coordinates) &&
        Objects.equals(this.pages, endpointRealUserTestDetail.pages) &&
        Objects.equals(this.network, endpointRealUserTestDetail.network);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, committed, date, experienceScore, numberOfPages, organizationName, port, protocol, roundId, sourceAddress, id, visitedSite, browser, coordinates, pages, network);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointRealUserTestDetail {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    committed: ").append(toIndentedString(committed)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    experienceScore: ").append(toIndentedString(experienceScore)).append("\n");
    sb.append("    numberOfPages: ").append(toIndentedString(numberOfPages)).append("\n");
    sb.append("    organizationName: ").append(toIndentedString(organizationName)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    roundId: ").append(toIndentedString(roundId)).append("\n");
    sb.append("    sourceAddress: ").append(toIndentedString(sourceAddress)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    visitedSite: ").append(toIndentedString(visitedSite)).append("\n");
    sb.append("    browser: ").append(toIndentedString(browser)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentId");
    openapiFields.add("committed");
    openapiFields.add("date");
    openapiFields.add("experienceScore");
    openapiFields.add("numberOfPages");
    openapiFields.add("organizationName");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("roundId");
    openapiFields.add("sourceAddress");
    openapiFields.add("id");
    openapiFields.add("visitedSite");
    openapiFields.add("browser");
    openapiFields.add("coordinates");
    openapiFields.add("pages");
    openapiFields.add("network");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EndpointRealUserTestDetail
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointRealUserTestDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointRealUserTestDetail is not found in the empty JSON string", EndpointRealUserTestDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointRealUserTestDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointRealUserTestDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentId") != null && !jsonObj.get("agentId").isJsonNull()) && !jsonObj.get("agentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentId").toString()));
      }
      if ((jsonObj.get("organizationName") != null && !jsonObj.get("organizationName").isJsonNull()) && !jsonObj.get("organizationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationName").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("sourceAddress") != null && !jsonObj.get("sourceAddress").isJsonNull()) && !jsonObj.get("sourceAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAddress").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("visitedSite") != null && !jsonObj.get("visitedSite").isJsonNull()) && !jsonObj.get("visitedSite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitedSite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitedSite").toString()));
      }
      // validate the optional field `browser`
      if (jsonObj.get("browser") != null && !jsonObj.get("browser").isJsonNull()) {
        EndpointBrowser.validateJsonElement(jsonObj.get("browser"));
      }
      // validate the optional field `coordinates`
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        RealUserTestCoordinates.validateJsonElement(jsonObj.get("coordinates"));
      }
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) {
        JsonArray jsonArraypages = jsonObj.getAsJsonArray("pages");
        if (jsonArraypages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pages` to be an array in the JSON string but got `%s`", jsonObj.get("pages").toString()));
          }

          // validate the optional field `pages` (array)
          for (int i = 0; i < jsonArraypages.size(); i++) {
            RealUserTestPage.validateJsonElement(jsonArraypages.get(i));
          };
        }
      }
      // validate the optional field `network`
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) {
        RealUserTestNetwork.validateJsonElement(jsonObj.get("network"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointRealUserTestDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointRealUserTestDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointRealUserTestDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointRealUserTestDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointRealUserTestDetail>() {
           @Override
           public void write(JsonWriter out, EndpointRealUserTestDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointRealUserTestDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EndpointRealUserTestDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EndpointRealUserTestDetail
  * @throws IOException if the JSON string is invalid with respect to EndpointRealUserTestDetail
  */
  public static EndpointRealUserTestDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointRealUserTestDetail.class);
  }

 /**
  * Convert an instance of EndpointRealUserTestDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

