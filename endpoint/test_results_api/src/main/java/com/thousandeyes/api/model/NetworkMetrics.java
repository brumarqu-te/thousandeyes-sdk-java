/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * NetworkMetrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:40.551124Z[Europe/London]")
public class NetworkMetrics {
  public static final String SERIALIZED_NAME_JITTER = "jitter";
  @SerializedName(SERIALIZED_NAME_JITTER)
  private Integer jitter;

  public static final String SERIALIZED_NAME_LATENCY = "latency";
  @SerializedName(SERIALIZED_NAME_LATENCY)
  private Integer latency;

  public static final String SERIALIZED_NAME_LOSS = "loss";
  @SerializedName(SERIALIZED_NAME_LOSS)
  private Double loss;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public NetworkMetrics() {
  }

  
  public NetworkMetrics(
     Integer jitter, 
     Integer latency, 
     Double loss, 
     String target
  ) {
    this();
    this.jitter = jitter;
    this.latency = latency;
    this.loss = loss;
    this.target = target;
  }

   /**
   * Network jitter.
   * @return jitter
  **/
  @javax.annotation.Nullable
  public Integer getJitter() {
    return jitter;
  }




   /**
   * Network latency.
   * @return latency
  **/
  @javax.annotation.Nullable
  public Integer getLatency() {
    return latency;
  }




   /**
   * Network loss.
   * @return loss
  **/
  @javax.annotation.Nullable
  public Double getLoss() {
    return loss;
  }




   /**
   * Network target IP address.
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkMetrics networkMetrics = (NetworkMetrics) o;
    return Objects.equals(this.jitter, networkMetrics.jitter) &&
        Objects.equals(this.latency, networkMetrics.latency) &&
        Objects.equals(this.loss, networkMetrics.loss) &&
        Objects.equals(this.target, networkMetrics.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jitter, latency, loss, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkMetrics {\n");
    sb.append("    jitter: ").append(toIndentedString(jitter)).append("\n");
    sb.append("    latency: ").append(toIndentedString(latency)).append("\n");
    sb.append("    loss: ").append(toIndentedString(loss)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jitter");
    openapiFields.add("latency");
    openapiFields.add("loss");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NetworkMetrics
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkMetrics is not found in the empty JSON string", NetworkMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkMetrics>() {
           @Override
           public void write(JsonWriter out, NetworkMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NetworkMetrics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NetworkMetrics
  * @throws IOException if the JSON string is invalid with respect to NetworkMetrics
  */
  public static NetworkMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkMetrics.class);
  }

 /**
  * Convert an instance of NetworkMetrics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

