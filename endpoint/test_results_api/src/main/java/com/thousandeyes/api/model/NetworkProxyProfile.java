/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.NetworkProxyProfileProxiesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * NetworkProxyProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:40.551124Z[Europe/London]")
public class NetworkProxyProfile {
  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PROXIES = "proxies";
  @SerializedName(SERIALIZED_NAME_PROXIES)
  private List<NetworkProxyProfileProxiesInner> proxies;

  public NetworkProxyProfile() {
  }

  
  public NetworkProxyProfile(
     String method
  ) {
    this();
    this.method = method;
  }

   /**
   * Proxy profile method.
   * @return method
  **/
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }




  public NetworkProxyProfile proxies(List<NetworkProxyProfileProxiesInner> proxies) {
    
    this.proxies = proxies;
    return this;
  }

  public NetworkProxyProfile addProxiesItem(NetworkProxyProfileProxiesInner proxiesItem) {
    if (this.proxies == null) {
      this.proxies = new ArrayList<>();
    }
    this.proxies.add(proxiesItem);
    return this;
  }

   /**
   * Get proxies
   * @return proxies
  **/
  @javax.annotation.Nullable
  public List<NetworkProxyProfileProxiesInner> getProxies() {
    return proxies;
  }


  public void setProxies(List<NetworkProxyProfileProxiesInner> proxies) {
    this.proxies = proxies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkProxyProfile networkProxyProfile = (NetworkProxyProfile) o;
    return Objects.equals(this.method, networkProxyProfile.method) &&
        Objects.equals(this.proxies, networkProxyProfile.proxies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, proxies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkProxyProfile {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    proxies: ").append(toIndentedString(proxies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("method");
    openapiFields.add("proxies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NetworkProxyProfile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkProxyProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkProxyProfile is not found in the empty JSON string", NetworkProxyProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkProxyProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkProxyProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (jsonObj.get("proxies") != null && !jsonObj.get("proxies").isJsonNull()) {
        JsonArray jsonArrayproxies = jsonObj.getAsJsonArray("proxies");
        if (jsonArrayproxies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("proxies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `proxies` to be an array in the JSON string but got `%s`", jsonObj.get("proxies").toString()));
          }

          // validate the optional field `proxies` (array)
          for (int i = 0; i < jsonArrayproxies.size(); i++) {
            NetworkProxyProfileProxiesInner.validateJsonElement(jsonArrayproxies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkProxyProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkProxyProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkProxyProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkProxyProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkProxyProfile>() {
           @Override
           public void write(JsonWriter out, NetworkProxyProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkProxyProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NetworkProxyProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NetworkProxyProfile
  * @throws IOException if the JSON string is invalid with respect to NetworkProxyProfile
  */
  public static NetworkProxyProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkProxyProfile.class);
  }

 /**
  * Convert an instance of NetworkProxyProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

