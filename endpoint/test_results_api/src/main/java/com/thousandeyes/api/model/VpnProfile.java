/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.VpnType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * VpnProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:26.016985Z[Europe/London]")
public class VpnProfile {
  public static final String SERIALIZED_NAME_VPN_CLIENT_ADDRESSES = "vpnClientAddresses";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_ADDRESSES)
  private List<String> vpnClientAddresses;

  public static final String SERIALIZED_NAME_VPN_CLIENT_NETWORK_RANGE = "vpnClientNetworkRange";
  @SerializedName(SERIALIZED_NAME_VPN_CLIENT_NETWORK_RANGE)
  private List<String> vpnClientNetworkRange;

  public static final String SERIALIZED_NAME_VPN_GATEWAY_ADDRESS = "vpnGatewayAddress";
  @SerializedName(SERIALIZED_NAME_VPN_GATEWAY_ADDRESS)
  private String vpnGatewayAddress;

  public static final String SERIALIZED_NAME_VPN_TYPE = "vpnType";
  @SerializedName(SERIALIZED_NAME_VPN_TYPE)
  private VpnType vpnType;

  public VpnProfile() {
  }

  
  public VpnProfile(
     List<String> vpnClientAddresses, 
     List<String> vpnClientNetworkRange, 
     String vpnGatewayAddress
  ) {
    this();
    this.vpnClientAddresses = vpnClientAddresses;
    this.vpnClientNetworkRange = vpnClientNetworkRange;
    this.vpnGatewayAddress = vpnGatewayAddress;
  }

   /**
   * A list of private IP addresses assigned to the device by the VPN server.
   * @return vpnClientAddresses
  **/
  @javax.annotation.Nullable
  public List<String> getVpnClientAddresses() {
    return vpnClientAddresses;
  }




   /**
   * A list of private networks assigned to the device by the VPN server.
   * @return vpnClientNetworkRange
  **/
  @javax.annotation.Nullable
  public List<String> getVpnClientNetworkRange() {
    return vpnClientNetworkRange;
  }




   /**
   * IP address of the VPN gateway.
   * @return vpnGatewayAddress
  **/
  @javax.annotation.Nullable
  public String getVpnGatewayAddress() {
    return vpnGatewayAddress;
  }




  public VpnProfile vpnType(VpnType vpnType) {
    
    this.vpnType = vpnType;
    return this;
  }

   /**
   * Get vpnType
   * @return vpnType
  **/
  @javax.annotation.Nullable
  public VpnType getVpnType() {
    return vpnType;
  }


  public void setVpnType(VpnType vpnType) {
    this.vpnType = vpnType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnProfile vpnProfile = (VpnProfile) o;
    return Objects.equals(this.vpnClientAddresses, vpnProfile.vpnClientAddresses) &&
        Objects.equals(this.vpnClientNetworkRange, vpnProfile.vpnClientNetworkRange) &&
        Objects.equals(this.vpnGatewayAddress, vpnProfile.vpnGatewayAddress) &&
        Objects.equals(this.vpnType, vpnProfile.vpnType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpnClientAddresses, vpnClientNetworkRange, vpnGatewayAddress, vpnType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnProfile {\n");
    sb.append("    vpnClientAddresses: ").append(toIndentedString(vpnClientAddresses)).append("\n");
    sb.append("    vpnClientNetworkRange: ").append(toIndentedString(vpnClientNetworkRange)).append("\n");
    sb.append("    vpnGatewayAddress: ").append(toIndentedString(vpnGatewayAddress)).append("\n");
    sb.append("    vpnType: ").append(toIndentedString(vpnType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vpnClientAddresses");
    openapiFields.add("vpnClientNetworkRange");
    openapiFields.add("vpnGatewayAddress");
    openapiFields.add("vpnType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VpnProfile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpnProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpnProfile is not found in the empty JSON string", VpnProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpnProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpnProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("vpnClientAddresses") != null && !jsonObj.get("vpnClientAddresses").isJsonNull() && !jsonObj.get("vpnClientAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnClientAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("vpnClientAddresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vpnClientNetworkRange") != null && !jsonObj.get("vpnClientNetworkRange").isJsonNull() && !jsonObj.get("vpnClientNetworkRange").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnClientNetworkRange` to be an array in the JSON string but got `%s`", jsonObj.get("vpnClientNetworkRange").toString()));
      }
      if ((jsonObj.get("vpnGatewayAddress") != null && !jsonObj.get("vpnGatewayAddress").isJsonNull()) && !jsonObj.get("vpnGatewayAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnGatewayAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpnGatewayAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpnProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpnProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpnProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpnProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<VpnProfile>() {
           @Override
           public void write(JsonWriter out, VpnProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpnProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VpnProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VpnProfile
  * @throws IOException if the JSON string is invalid with respect to VpnProfile
  */
  public static VpnProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpnProfile.class);
  }

 /**
  * Convert an instance of VpnProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

