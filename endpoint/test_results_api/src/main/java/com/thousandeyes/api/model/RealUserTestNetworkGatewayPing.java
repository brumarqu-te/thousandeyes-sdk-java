/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * RealUserTestNetworkGatewayPing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:26.016985Z[Europe/London]")
public class RealUserTestNetworkGatewayPing {
  public static final String SERIALIZED_NAME_AVG_RTT = "avgRtt";
  @SerializedName(SERIALIZED_NAME_AVG_RTT)
  private Integer avgRtt;

  public static final String SERIALIZED_NAME_MAX_RTT = "maxRtt";
  @SerializedName(SERIALIZED_NAME_MAX_RTT)
  private Integer maxRtt;

  public static final String SERIALIZED_NAME_MEAN_DEV_RTT = "meanDevRtt";
  @SerializedName(SERIALIZED_NAME_MEAN_DEV_RTT)
  private Integer meanDevRtt;

  public static final String SERIALIZED_NAME_MIN_RTT = "minRtt";
  @SerializedName(SERIALIZED_NAME_MIN_RTT)
  private Integer minRtt;

  public static final String SERIALIZED_NAME_PKTS_RECEIVED = "pktsReceived";
  @SerializedName(SERIALIZED_NAME_PKTS_RECEIVED)
  private Integer pktsReceived;

  public static final String SERIALIZED_NAME_PKTS_SENT = "pktsSent";
  @SerializedName(SERIALIZED_NAME_PKTS_SENT)
  private Integer pktsSent;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_INFO_FLAGS = "infoFlags";
  @SerializedName(SERIALIZED_NAME_INFO_FLAGS)
  private List<String> infoFlags;

  public RealUserTestNetworkGatewayPing() {
  }

  
  public RealUserTestNetworkGatewayPing(
     Integer avgRtt, 
     Integer maxRtt, 
     Integer meanDevRtt, 
     Integer minRtt, 
     Integer pktsReceived, 
     Integer pktsSent, 
     String error, 
     List<String> infoFlags
  ) {
    this();
    this.avgRtt = avgRtt;
    this.maxRtt = maxRtt;
    this.meanDevRtt = meanDevRtt;
    this.minRtt = minRtt;
    this.pktsReceived = pktsReceived;
    this.pktsSent = pktsSent;
    this.error = error;
    this.infoFlags = infoFlags;
  }

   /**
   * Ping average response time.
   * @return avgRtt
  **/
  @javax.annotation.Nullable
  public Integer getAvgRtt() {
    return avgRtt;
  }




   /**
   * Ping maximum response time.
   * @return maxRtt
  **/
  @javax.annotation.Nullable
  public Integer getMaxRtt() {
    return maxRtt;
  }




   /**
   * Ping mean standard deviation response time.
   * @return meanDevRtt
  **/
  @javax.annotation.Nullable
  public Integer getMeanDevRtt() {
    return meanDevRtt;
  }




   /**
   * Ping minimum response time.
   * @return minRtt
  **/
  @javax.annotation.Nullable
  public Integer getMinRtt() {
    return minRtt;
  }




   /**
   * Ping packets received.
   * @return pktsReceived
  **/
  @javax.annotation.Nullable
  public Integer getPktsReceived() {
    return pktsReceived;
  }




   /**
   * Ping packets sent.
   * @return pktsSent
  **/
  @javax.annotation.Nullable
  public Integer getPktsSent() {
    return pktsSent;
  }




   /**
   * Only present when there is an error.
   * @return error
  **/
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }




   /**
   * Get infoFlags
   * @return infoFlags
  **/
  @javax.annotation.Nullable
  public List<String> getInfoFlags() {
    return infoFlags;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealUserTestNetworkGatewayPing realUserTestNetworkGatewayPing = (RealUserTestNetworkGatewayPing) o;
    return Objects.equals(this.avgRtt, realUserTestNetworkGatewayPing.avgRtt) &&
        Objects.equals(this.maxRtt, realUserTestNetworkGatewayPing.maxRtt) &&
        Objects.equals(this.meanDevRtt, realUserTestNetworkGatewayPing.meanDevRtt) &&
        Objects.equals(this.minRtt, realUserTestNetworkGatewayPing.minRtt) &&
        Objects.equals(this.pktsReceived, realUserTestNetworkGatewayPing.pktsReceived) &&
        Objects.equals(this.pktsSent, realUserTestNetworkGatewayPing.pktsSent) &&
        Objects.equals(this.error, realUserTestNetworkGatewayPing.error) &&
        Objects.equals(this.infoFlags, realUserTestNetworkGatewayPing.infoFlags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgRtt, maxRtt, meanDevRtt, minRtt, pktsReceived, pktsSent, error, infoFlags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealUserTestNetworkGatewayPing {\n");
    sb.append("    avgRtt: ").append(toIndentedString(avgRtt)).append("\n");
    sb.append("    maxRtt: ").append(toIndentedString(maxRtt)).append("\n");
    sb.append("    meanDevRtt: ").append(toIndentedString(meanDevRtt)).append("\n");
    sb.append("    minRtt: ").append(toIndentedString(minRtt)).append("\n");
    sb.append("    pktsReceived: ").append(toIndentedString(pktsReceived)).append("\n");
    sb.append("    pktsSent: ").append(toIndentedString(pktsSent)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    infoFlags: ").append(toIndentedString(infoFlags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avgRtt");
    openapiFields.add("maxRtt");
    openapiFields.add("meanDevRtt");
    openapiFields.add("minRtt");
    openapiFields.add("pktsReceived");
    openapiFields.add("pktsSent");
    openapiFields.add("error");
    openapiFields.add("infoFlags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RealUserTestNetworkGatewayPing
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealUserTestNetworkGatewayPing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealUserTestNetworkGatewayPing is not found in the empty JSON string", RealUserTestNetworkGatewayPing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealUserTestNetworkGatewayPing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealUserTestNetworkGatewayPing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("infoFlags") != null && !jsonObj.get("infoFlags").isJsonNull() && !jsonObj.get("infoFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infoFlags` to be an array in the JSON string but got `%s`", jsonObj.get("infoFlags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealUserTestNetworkGatewayPing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealUserTestNetworkGatewayPing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealUserTestNetworkGatewayPing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealUserTestNetworkGatewayPing.class));

       return (TypeAdapter<T>) new TypeAdapter<RealUserTestNetworkGatewayPing>() {
           @Override
           public void write(JsonWriter out, RealUserTestNetworkGatewayPing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealUserTestNetworkGatewayPing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RealUserTestNetworkGatewayPing given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RealUserTestNetworkGatewayPing
  * @throws IOException if the JSON string is invalid with respect to RealUserTestNetworkGatewayPing
  */
  public static RealUserTestNetworkGatewayPing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealUserTestNetworkGatewayPing.class);
  }

 /**
  * Convert an instance of RealUserTestNetworkGatewayPing to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

