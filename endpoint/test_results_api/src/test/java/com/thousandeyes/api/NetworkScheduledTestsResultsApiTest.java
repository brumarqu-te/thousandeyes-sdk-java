/*
 * Endpoint Test Results API
 * Retrieve results for scheduled and dynamic tests on endpoint agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api;

import com.thousandeyes.ApiException;
import java.math.BigDecimal;
import com.thousandeyes.api.model.Error;
import com.thousandeyes.api.model.GetTestResultNetworkPathvis200Response;
import com.thousandeyes.api.model.GetTestResultPathvisAgentRound200Response;
import com.thousandeyes.api.model.MultiTestIdTestsDataRoundsSearch;
import java.time.OffsetDateTime;
import com.thousandeyes.api.model.PostFetchTestResultMetrics200Response;
import com.thousandeyes.api.model.PostFetchTestResultMetricsMultiTest200Response;
import com.thousandeyes.api.model.TestsDataRoundsSearch;
import com.thousandeyes.api.model.UnauthorizedError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkScheduledTestsResultsApi
 */
@Disabled
public class NetworkScheduledTestsResultsApiTest {

    private final NetworkScheduledTestsResultsApi api = new NetworkScheduledTestsResultsApi();

    /**
     * Retrieve pathvis network scheduled test results
     *
     * Returns a summary of the path visualization data collected from each endpoint agent to the destination. In each path visualization attempt, one attempt is made to reach the destination. Each set of data is summarized, based on response time, number of hops, and response time to the target. A time frame must be specified, or the most recent round within last 2 hours is returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestResultNetworkPathvisTest() throws ApiException {
        String testId = null;
        String aid = null;
        String window = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String cursor = null;
        GetTestResultNetworkPathvis200Response response = api.getTestResultNetworkPathvis(testId, aid, window, startDate, endDate, cursor);
        // TODO: test validations
    }

    /**
     * Retrieve pathvis network scheduled test results details
     *
     * Returns a hop-by-hop summary of the path trace data collected during path visualization. In each round, one path discovery attempt is made to reach the destination. The entire path is returned. A &#x60;roundId&#x60; must be specified. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestResultPathvisAgentRoundTest() throws ApiException {
        String testId = null;
        String agentId = null;
        String roundId = null;
        String aid = null;
        GetTestResultPathvisAgentRound200Response response = api.getTestResultPathvisAgentRound(testId, agentId, roundId, aid);
        // TODO: test validations
    }

    /**
     * Retrieve network scheduled test results
     *
     * Returns network metrics (loss, latency, and jitter) from each endpoint agent, for each roundId within the specified time window, as determined by search filters. If a time frame is provided, the rounds relevant to that time frame are returned, and the order is not predefined unless the user specifies a sort order in the filter. When no time frame is provided, the latest rounds are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postFetchTestResultMetricsTest() throws ApiException {
        String testId = null;
        String aid = null;
        String window = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String cursor = null;
        TestsDataRoundsSearch testsDataRoundsSearch = null;
        PostFetchTestResultMetrics200Response response = api.postFetchTestResultMetrics(testId, aid, window, startDate, endDate, cursor, testsDataRoundsSearch);
        // TODO: test validations
    }

    /**
     * Retrieve network scheduled test results from multiple tests
     *
     * Returns network metrics, including loss, latency, and jitter, for multiple test IDs obtained from each endpoint agent. It allows you to specify a time window using search filters to retrieve metrics for specific round IDs within that time frame. The default order of results is unspecified unless you include a sorting preference in the filter. When no time frame is provided, the API returns metrics for the most recent rounds. Access to all accounts associated with the specified test IDs is required to use this endpoint. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postFetchTestResultMetricsMultiTestTest() throws ApiException {
        String aid = null;
        String window = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        BigDecimal max = null;
        String cursor = null;
        MultiTestIdTestsDataRoundsSearch multiTestIdTestsDataRoundsSearch = null;
        PostFetchTestResultMetricsMultiTest200Response response = api.postFetchTestResultMetricsMultiTest(aid, window, startDate, endDate, max, cursor, multiTestIdTestsDataRoundsSearch);
        // TODO: test validations
    }

}
