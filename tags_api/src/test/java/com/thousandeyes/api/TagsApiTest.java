/*
 * Tags API
 * The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature allows for: * Better support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API: * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`.     
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api;

import com.thousandeyes.ApiException;
import com.thousandeyes.api.model.ApiError;
import com.thousandeyes.api.model.BulkTagResponse;
import com.thousandeyes.api.model.Error;
import com.thousandeyes.api.model.Expand;
import com.thousandeyes.api.model.GetTag;
import com.thousandeyes.api.model.Tag;
import com.thousandeyes.api.model.TagCollection;
import java.util.UUID;
import com.thousandeyes.api.model.UnauthorizedError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Create tag
     *
     * Creates a new tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        String aid = null;
        Tag body = null;
        Tag response = api.createTag(aid, body);
        // TODO: test validations
    }

    /**
     * Create multiple tags
     *
     * Creates multiple tags. Note the response includes a &#x60;statuses&#x60; array. This array provides status information for each tag object, indexed 1:1 with the &#x60;tags&#x60; array.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagBulkTest() throws ApiException {
        String aid = null;
        BulkTagResponse bulkTagResponse = null;
        BulkTagResponse response = api.createTagBulk(aid, bulkTagResponse);
        // TODO: test validations
    }

    /**
     * Delete tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        String id = null;
        String aid = null;
        api.deleteTag(id, aid);
        // TODO: test validations
    }

    /**
     * Retrieve tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        UUID id = null;
        String aid = null;
        Expand expand = null;
        GetTag response = api.getTag(id, aid, expand);
        // TODO: test validations
    }

    /**
     * List tags
     *
     * This endpoint returns a list of tags in the specified account group (&#x60;aid&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        String aid = null;
        Expand expand = null;
        TagCollection response = api.getTags(aid, expand);
        // TODO: test validations
    }

    /**
     * Update tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        String id = null;
        String aid = null;
        Tag body = null;
        Tag response = api.updateTag(id, aid, body);
        // TODO: test validations
    }

}
