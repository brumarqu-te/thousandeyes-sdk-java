/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.ApiReportDataComponentLabelMapEntry;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * Map of group labels.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:19.739212Z[Europe/London]")
public class ApiReportDataComponentLabelMap {
  public static final String SERIALIZED_NAME_GROUP_PROPERTY = "groupProperty";
  @SerializedName(SERIALIZED_NAME_GROUP_PROPERTY)
  private String groupProperty;

  public static final String SERIALIZED_NAME_GROUP_LABELS = "groupLabels";
  @SerializedName(SERIALIZED_NAME_GROUP_LABELS)
  private List<ApiReportDataComponentLabelMapEntry> groupLabels;

  public ApiReportDataComponentLabelMap() {
  }

  public ApiReportDataComponentLabelMap groupProperty(String groupProperty) {
    
    this.groupProperty = groupProperty;
    return this;
  }

   /**
   * Defines the criterion used to aggregate data points under specific group values.
   * @return groupProperty
  **/
  @javax.annotation.Nullable
  public String getGroupProperty() {
    return groupProperty;
  }


  public void setGroupProperty(String groupProperty) {
    this.groupProperty = groupProperty;
  }


  public ApiReportDataComponentLabelMap groupLabels(List<ApiReportDataComponentLabelMapEntry> groupLabels) {
    
    this.groupLabels = groupLabels;
    return this;
  }

  public ApiReportDataComponentLabelMap addGroupLabelsItem(ApiReportDataComponentLabelMapEntry groupLabelsItem) {
    if (this.groupLabels == null) {
      this.groupLabels = new ArrayList<>();
    }
    this.groupLabels.add(groupLabelsItem);
    return this;
  }

   /**
   * List of group labels.
   * @return groupLabels
  **/
  @javax.annotation.Nullable
  public List<ApiReportDataComponentLabelMapEntry> getGroupLabels() {
    return groupLabels;
  }


  public void setGroupLabels(List<ApiReportDataComponentLabelMapEntry> groupLabels) {
    this.groupLabels = groupLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiReportDataComponentLabelMap apiReportDataComponentLabelMap = (ApiReportDataComponentLabelMap) o;
    return Objects.equals(this.groupProperty, apiReportDataComponentLabelMap.groupProperty) &&
        Objects.equals(this.groupLabels, apiReportDataComponentLabelMap.groupLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupProperty, groupLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiReportDataComponentLabelMap {\n");
    sb.append("    groupProperty: ").append(toIndentedString(groupProperty)).append("\n");
    sb.append("    groupLabels: ").append(toIndentedString(groupLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupProperty");
    openapiFields.add("groupLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiReportDataComponentLabelMap
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiReportDataComponentLabelMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiReportDataComponentLabelMap is not found in the empty JSON string", ApiReportDataComponentLabelMap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiReportDataComponentLabelMap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiReportDataComponentLabelMap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("groupProperty") != null && !jsonObj.get("groupProperty").isJsonNull()) && !jsonObj.get("groupProperty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupProperty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupProperty").toString()));
      }
      if (jsonObj.get("groupLabels") != null && !jsonObj.get("groupLabels").isJsonNull()) {
        JsonArray jsonArraygroupLabels = jsonObj.getAsJsonArray("groupLabels");
        if (jsonArraygroupLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupLabels` to be an array in the JSON string but got `%s`", jsonObj.get("groupLabels").toString()));
          }

          // validate the optional field `groupLabels` (array)
          for (int i = 0; i < jsonArraygroupLabels.size(); i++) {
            ApiReportDataComponentLabelMapEntry.validateJsonElement(jsonArraygroupLabels.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiReportDataComponentLabelMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiReportDataComponentLabelMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiReportDataComponentLabelMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiReportDataComponentLabelMap.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiReportDataComponentLabelMap>() {
           @Override
           public void write(JsonWriter out, ApiReportDataComponentLabelMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiReportDataComponentLabelMap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiReportDataComponentLabelMap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiReportDataComponentLabelMap
  * @throws IOException if the JSON string is invalid with respect to ApiReportDataComponentLabelMap
  */
  public static ApiReportDataComponentLabelMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiReportDataComponentLabelMap.class);
  }

 /**
  * Convert an instance of ApiReportDataComponentLabelMap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

