/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Determines how to aggregate the the metric.
 */
@JsonAdapter(WidgetMeasureType.Adapter.class)
public enum WidgetMeasureType {
  
  MINIMUM("MINIMUM"),
  
  MAXIMUM("MAXIMUM"),
  
  MEAN("MEAN"),
  
  MEDIAN("MEDIAN"),
  
  NTH_PERCENTILE("NTH_PERCENTILE"),
  
  PERCPOSITIVE("PERCPOSITIVE"),
  
  PERCZERO("PERCZERO"),
  
  STDDEV("STDDEV"),
  
  TOTAL("TOTAL"),
  
  VALUES("VALUES");

  private String value;

  WidgetMeasureType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static WidgetMeasureType fromValue(String value) {
    for (WidgetMeasureType b : WidgetMeasureType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<WidgetMeasureType> {
    @Override
    public void write(final JsonWriter jsonWriter, final WidgetMeasureType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public WidgetMeasureType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return WidgetMeasureType.fromValue(value);
    }
  }
}

