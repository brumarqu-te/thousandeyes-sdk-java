/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.ApiDashboardAsw;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * The data displayed on a numbers card.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:19.739212Z[Europe/London]")
public class ApiNumbersCardData {
  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_PREVIOUS_VALUE = "previousValue";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VALUE)
  private Double previousValue;

  public static final String SERIALIZED_NAME_BIN_SIZE = "binSize";
  @SerializedName(SERIALIZED_NAME_BIN_SIZE)
  private Long binSize;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_NUMBER_OF_DATA_POINTS = "numberOfDataPoints";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DATA_POINTS)
  private Long numberOfDataPoints;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ALERT_SUPPRESSION_WINDOWS = "alertSuppressionWindows";
  @SerializedName(SERIALIZED_NAME_ALERT_SUPPRESSION_WINDOWS)
  private List<ApiDashboardAsw> alertSuppressionWindows;

  public ApiNumbersCardData() {
  }

  public ApiNumbersCardData cardId(String cardId) {
    
    this.cardId = cardId;
    return this;
  }

   /**
   * Identifier of the card.
   * @return cardId
  **/
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public ApiNumbersCardData startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * UTC start date of the data shown in the API output (ISO date-time format).
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ApiNumbersCardData endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * UTC end date of the data shown in the API output (ISO date-time format).
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public ApiNumbersCardData previousValue(Double previousValue) {
    
    this.previousValue = previousValue;
    return this;
  }

   /**
   * Previous value if &#x60;compareToPreviousValue &#x3D;&#x3D; true&#x60; in configuration.
   * @return previousValue
  **/
  @javax.annotation.Nullable
  public Double getPreviousValue() {
    return previousValue;
  }


  public void setPreviousValue(Double previousValue) {
    this.previousValue = previousValue;
  }


  public ApiNumbersCardData binSize(Long binSize) {
    
    this.binSize = binSize;
    return this;
  }

   /**
   * Duration of each bin.
   * @return binSize
  **/
  @javax.annotation.Nullable
  public Long getBinSize() {
    return binSize;
  }


  public void setBinSize(Long binSize) {
    this.binSize = binSize;
  }


  public ApiNumbersCardData timestamp(Long timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp of the aggregated data point.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public ApiNumbersCardData numberOfDataPoints(Long numberOfDataPoints) {
    
    this.numberOfDataPoints = numberOfDataPoints;
    return this;
  }

   /**
   * Number of points aggregated into the data point
   * @return numberOfDataPoints
  **/
  @javax.annotation.Nullable
  public Long getNumberOfDataPoints() {
    return numberOfDataPoints;
  }


  public void setNumberOfDataPoints(Long numberOfDataPoints) {
    this.numberOfDataPoints = numberOfDataPoints;
  }


  public ApiNumbersCardData value(Double value) {
    
    this.value = value;
    return this;
  }

   /**
   * Aggregated value.
   * @return value
  **/
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }


  public void setValue(Double value) {
    this.value = value;
  }


  public ApiNumbersCardData status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Message for not fully configured card or no data.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ApiNumbersCardData alertSuppressionWindows(List<ApiDashboardAsw> alertSuppressionWindows) {
    
    this.alertSuppressionWindows = alertSuppressionWindows;
    return this;
  }

  public ApiNumbersCardData addAlertSuppressionWindowsItem(ApiDashboardAsw alertSuppressionWindowsItem) {
    if (this.alertSuppressionWindows == null) {
      this.alertSuppressionWindows = new ArrayList<>();
    }
    this.alertSuppressionWindows.add(alertSuppressionWindowsItem);
    return this;
  }

   /**
   * Get alertSuppressionWindows
   * @return alertSuppressionWindows
  **/
  @javax.annotation.Nullable
  public List<ApiDashboardAsw> getAlertSuppressionWindows() {
    return alertSuppressionWindows;
  }


  public void setAlertSuppressionWindows(List<ApiDashboardAsw> alertSuppressionWindows) {
    this.alertSuppressionWindows = alertSuppressionWindows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiNumbersCardData apiNumbersCardData = (ApiNumbersCardData) o;
    return Objects.equals(this.cardId, apiNumbersCardData.cardId) &&
        Objects.equals(this.startDate, apiNumbersCardData.startDate) &&
        Objects.equals(this.endDate, apiNumbersCardData.endDate) &&
        Objects.equals(this.previousValue, apiNumbersCardData.previousValue) &&
        Objects.equals(this.binSize, apiNumbersCardData.binSize) &&
        Objects.equals(this.timestamp, apiNumbersCardData.timestamp) &&
        Objects.equals(this.numberOfDataPoints, apiNumbersCardData.numberOfDataPoints) &&
        Objects.equals(this.value, apiNumbersCardData.value) &&
        Objects.equals(this.status, apiNumbersCardData.status) &&
        Objects.equals(this.alertSuppressionWindows, apiNumbersCardData.alertSuppressionWindows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardId, startDate, endDate, previousValue, binSize, timestamp, numberOfDataPoints, value, status, alertSuppressionWindows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiNumbersCardData {\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    previousValue: ").append(toIndentedString(previousValue)).append("\n");
    sb.append("    binSize: ").append(toIndentedString(binSize)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    numberOfDataPoints: ").append(toIndentedString(numberOfDataPoints)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    alertSuppressionWindows: ").append(toIndentedString(alertSuppressionWindows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardId");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("previousValue");
    openapiFields.add("binSize");
    openapiFields.add("timestamp");
    openapiFields.add("numberOfDataPoints");
    openapiFields.add("value");
    openapiFields.add("status");
    openapiFields.add("alertSuppressionWindows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiNumbersCardData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiNumbersCardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiNumbersCardData is not found in the empty JSON string", ApiNumbersCardData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiNumbersCardData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiNumbersCardData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardId") != null && !jsonObj.get("cardId").isJsonNull()) && !jsonObj.get("cardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("alertSuppressionWindows") != null && !jsonObj.get("alertSuppressionWindows").isJsonNull()) {
        JsonArray jsonArrayalertSuppressionWindows = jsonObj.getAsJsonArray("alertSuppressionWindows");
        if (jsonArrayalertSuppressionWindows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alertSuppressionWindows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alertSuppressionWindows` to be an array in the JSON string but got `%s`", jsonObj.get("alertSuppressionWindows").toString()));
          }

          // validate the optional field `alertSuppressionWindows` (array)
          for (int i = 0; i < jsonArrayalertSuppressionWindows.size(); i++) {
            ApiDashboardAsw.validateJsonElement(jsonArrayalertSuppressionWindows.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiNumbersCardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiNumbersCardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiNumbersCardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiNumbersCardData.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiNumbersCardData>() {
           @Override
           public void write(JsonWriter out, ApiNumbersCardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiNumbersCardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiNumbersCardData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiNumbersCardData
  * @throws IOException if the JSON string is invalid with respect to ApiNumbersCardData
  */
  public static ApiNumbersCardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiNumbersCardData.class);
  }

 /**
  * Convert an instance of ApiNumbersCardData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

