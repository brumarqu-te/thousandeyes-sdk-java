/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.ApiDataPointGroup;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * Data point of a widget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:19.739212Z[Europe/London]")
public class ApiWidgetDataPoint {
  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_NUMBER_OF_DATA_POINTS = "numberOfDataPoints";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DATA_POINTS)
  private Long numberOfDataPoints;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<ApiDataPointGroup> groups;

  public ApiWidgetDataPoint() {
  }

  public ApiWidgetDataPoint timestamp(Long timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp of the aggregated data point.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public ApiWidgetDataPoint numberOfDataPoints(Long numberOfDataPoints) {
    
    this.numberOfDataPoints = numberOfDataPoints;
    return this;
  }

   /**
   * Number of test data points aggregated into the widget data point.
   * @return numberOfDataPoints
  **/
  @javax.annotation.Nullable
  public Long getNumberOfDataPoints() {
    return numberOfDataPoints;
  }


  public void setNumberOfDataPoints(Long numberOfDataPoints) {
    this.numberOfDataPoints = numberOfDataPoints;
  }


  public ApiWidgetDataPoint value(Double value) {
    
    this.value = value;
    return this;
  }

   /**
   * Aggregated value.
   * @return value
  **/
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }


  public void setValue(Double value) {
    this.value = value;
  }


  public ApiWidgetDataPoint groups(List<ApiDataPointGroup> groups) {
    
    this.groups = groups;
    return this;
  }

  public ApiWidgetDataPoint addGroupsItem(ApiDataPointGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nullable
  public List<ApiDataPointGroup> getGroups() {
    return groups;
  }


  public void setGroups(List<ApiDataPointGroup> groups) {
    this.groups = groups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiWidgetDataPoint apiWidgetDataPoint = (ApiWidgetDataPoint) o;
    return Objects.equals(this.timestamp, apiWidgetDataPoint.timestamp) &&
        Objects.equals(this.numberOfDataPoints, apiWidgetDataPoint.numberOfDataPoints) &&
        Objects.equals(this.value, apiWidgetDataPoint.value) &&
        Objects.equals(this.groups, apiWidgetDataPoint.groups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, numberOfDataPoints, value, groups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiWidgetDataPoint {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    numberOfDataPoints: ").append(toIndentedString(numberOfDataPoints)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timestamp");
    openapiFields.add("numberOfDataPoints");
    openapiFields.add("value");
    openapiFields.add("groups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiWidgetDataPoint
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiWidgetDataPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiWidgetDataPoint is not found in the empty JSON string", ApiWidgetDataPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiWidgetDataPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiWidgetDataPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            ApiDataPointGroup.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiWidgetDataPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiWidgetDataPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiWidgetDataPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiWidgetDataPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiWidgetDataPoint>() {
           @Override
           public void write(JsonWriter out, ApiWidgetDataPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiWidgetDataPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiWidgetDataPoint given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiWidgetDataPoint
  * @throws IOException if the JSON string is invalid with respect to ApiWidgetDataPoint
  */
  public static ApiWidgetDataPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiWidgetDataPoint.class);
  }

 /**
  * Convert an instance of ApiWidgetDataPoint to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

