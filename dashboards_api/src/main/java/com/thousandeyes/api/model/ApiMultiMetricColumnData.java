/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.ApiDashboardAsw;
import com.thousandeyes.api.model.ApiWidgetDataPoint;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * The data presented within a single column of a Multi-Metric table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:34.047854Z[Europe/London]")
public class ApiMultiMetricColumnData {
  public static final String SERIALIZED_NAME_COLUMN_ID = "columnId";
  @SerializedName(SERIALIZED_NAME_COLUMN_ID)
  private String columnId;

  public static final String SERIALIZED_NAME_BIN_SIZE = "binSize";
  @SerializedName(SERIALIZED_NAME_BIN_SIZE)
  private Long binSize;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private List<ApiWidgetDataPoint> points;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ALERT_SUPPRESSION_WINDOWS = "alertSuppressionWindows";
  @SerializedName(SERIALIZED_NAME_ALERT_SUPPRESSION_WINDOWS)
  private List<ApiDashboardAsw> alertSuppressionWindows;

  public ApiMultiMetricColumnData() {
  }

  public ApiMultiMetricColumnData columnId(String columnId) {
    
    this.columnId = columnId;
    return this;
  }

   /**
   * Identifier of the column.
   * @return columnId
  **/
  @javax.annotation.Nullable
  public String getColumnId() {
    return columnId;
  }


  public void setColumnId(String columnId) {
    this.columnId = columnId;
  }


  public ApiMultiMetricColumnData binSize(Long binSize) {
    
    this.binSize = binSize;
    return this;
  }

   /**
   * Duration of each bin.
   * @return binSize
  **/
  @javax.annotation.Nullable
  public Long getBinSize() {
    return binSize;
  }


  public void setBinSize(Long binSize) {
    this.binSize = binSize;
  }


  public ApiMultiMetricColumnData points(List<ApiWidgetDataPoint> points) {
    
    this.points = points;
    return this;
  }

  public ApiMultiMetricColumnData addPointsItem(ApiWidgetDataPoint pointsItem) {
    if (this.points == null) {
      this.points = new ArrayList<>();
    }
    this.points.add(pointsItem);
    return this;
  }

   /**
   * Get points
   * @return points
  **/
  @javax.annotation.Nullable
  public List<ApiWidgetDataPoint> getPoints() {
    return points;
  }


  public void setPoints(List<ApiWidgetDataPoint> points) {
    this.points = points;
  }


  public ApiMultiMetricColumnData status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Message for not fully configured card or no data.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public ApiMultiMetricColumnData alertSuppressionWindows(List<ApiDashboardAsw> alertSuppressionWindows) {
    
    this.alertSuppressionWindows = alertSuppressionWindows;
    return this;
  }

  public ApiMultiMetricColumnData addAlertSuppressionWindowsItem(ApiDashboardAsw alertSuppressionWindowsItem) {
    if (this.alertSuppressionWindows == null) {
      this.alertSuppressionWindows = new ArrayList<>();
    }
    this.alertSuppressionWindows.add(alertSuppressionWindowsItem);
    return this;
  }

   /**
   * Get alertSuppressionWindows
   * @return alertSuppressionWindows
  **/
  @javax.annotation.Nullable
  public List<ApiDashboardAsw> getAlertSuppressionWindows() {
    return alertSuppressionWindows;
  }


  public void setAlertSuppressionWindows(List<ApiDashboardAsw> alertSuppressionWindows) {
    this.alertSuppressionWindows = alertSuppressionWindows;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMultiMetricColumnData apiMultiMetricColumnData = (ApiMultiMetricColumnData) o;
    return Objects.equals(this.columnId, apiMultiMetricColumnData.columnId) &&
        Objects.equals(this.binSize, apiMultiMetricColumnData.binSize) &&
        Objects.equals(this.points, apiMultiMetricColumnData.points) &&
        Objects.equals(this.status, apiMultiMetricColumnData.status) &&
        Objects.equals(this.alertSuppressionWindows, apiMultiMetricColumnData.alertSuppressionWindows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnId, binSize, points, status, alertSuppressionWindows);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMultiMetricColumnData {\n");
    sb.append("    columnId: ").append(toIndentedString(columnId)).append("\n");
    sb.append("    binSize: ").append(toIndentedString(binSize)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    alertSuppressionWindows: ").append(toIndentedString(alertSuppressionWindows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnId");
    openapiFields.add("binSize");
    openapiFields.add("points");
    openapiFields.add("status");
    openapiFields.add("alertSuppressionWindows");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiMultiMetricColumnData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiMultiMetricColumnData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiMultiMetricColumnData is not found in the empty JSON string", ApiMultiMetricColumnData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiMultiMetricColumnData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiMultiMetricColumnData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("columnId") != null && !jsonObj.get("columnId").isJsonNull()) && !jsonObj.get("columnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnId").toString()));
      }
      if (jsonObj.get("points") != null && !jsonObj.get("points").isJsonNull()) {
        JsonArray jsonArraypoints = jsonObj.getAsJsonArray("points");
        if (jsonArraypoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("points").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `points` to be an array in the JSON string but got `%s`", jsonObj.get("points").toString()));
          }

          // validate the optional field `points` (array)
          for (int i = 0; i < jsonArraypoints.size(); i++) {
            ApiWidgetDataPoint.validateJsonElement(jsonArraypoints.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("alertSuppressionWindows") != null && !jsonObj.get("alertSuppressionWindows").isJsonNull()) {
        JsonArray jsonArrayalertSuppressionWindows = jsonObj.getAsJsonArray("alertSuppressionWindows");
        if (jsonArrayalertSuppressionWindows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alertSuppressionWindows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alertSuppressionWindows` to be an array in the JSON string but got `%s`", jsonObj.get("alertSuppressionWindows").toString()));
          }

          // validate the optional field `alertSuppressionWindows` (array)
          for (int i = 0; i < jsonArrayalertSuppressionWindows.size(); i++) {
            ApiDashboardAsw.validateJsonElement(jsonArrayalertSuppressionWindows.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiMultiMetricColumnData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiMultiMetricColumnData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiMultiMetricColumnData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiMultiMetricColumnData.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiMultiMetricColumnData>() {
           @Override
           public void write(JsonWriter out, ApiMultiMetricColumnData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiMultiMetricColumnData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiMultiMetricColumnData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiMultiMetricColumnData
  * @throws IOException if the JSON string is invalid with respect to ApiMultiMetricColumnData
  */
  public static ApiMultiMetricColumnData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiMultiMetricColumnData.class);
  }

 /**
  * Convert an instance of ApiMultiMetricColumnData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

