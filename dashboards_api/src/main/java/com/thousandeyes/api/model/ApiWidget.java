/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AgentWidgetShow;
import com.thousandeyes.api.model.AgentWidgetType;
import com.thousandeyes.api.model.ApiAgentStatusWidget;
import com.thousandeyes.api.model.ApiAggregateProperty;
import com.thousandeyes.api.model.ApiAlertListAlertType;
import com.thousandeyes.api.model.ApiAlertListWidget;
import com.thousandeyes.api.model.ApiAlertListWidgetAllOfActiveWithin;
import com.thousandeyes.api.model.ApiBoxAndWhiskersWidget;
import com.thousandeyes.api.model.ApiColorGridWidget;
import com.thousandeyes.api.model.ApiDuration;
import com.thousandeyes.api.model.ApiGeoMapWidget;
import com.thousandeyes.api.model.ApiGroupedBarchartWidget;
import com.thousandeyes.api.model.ApiMultiMetricColumn;
import com.thousandeyes.api.model.ApiMultiMetricTableWidget;
import com.thousandeyes.api.model.ApiNumbersCard;
import com.thousandeyes.api.model.ApiNumbersCardWidget;
import com.thousandeyes.api.model.ApiPieChartWidget;
import com.thousandeyes.api.model.ApiStackedAreaChartWidget;
import com.thousandeyes.api.model.ApiStackedBarchartWidget;
import com.thousandeyes.api.model.ApiTableWidget;
import com.thousandeyes.api.model.ApiTestTableWidget;
import com.thousandeyes.api.model.ApiTimeseriesWidget;
import com.thousandeyes.api.model.ApiWidgetFilterApiTestTableFilterKey;
import com.thousandeyes.api.model.ApiWidgetFixedYScalePrefix;
import com.thousandeyes.api.model.ApiWidgetMeasure;
import com.thousandeyes.api.model.DashboardMetric;
import com.thousandeyes.api.model.DashboardMetricDirection;
import com.thousandeyes.api.model.MetricGroup;
import com.thousandeyes.api.model.SelfLinksLinks;
import com.thousandeyes.api.model.TimeseriesDatasource;
import com.thousandeyes.api.model.VisualMode;
import com.thousandeyes.api.model.WidgetSortDirection;
import com.thousandeyes.api.model.WidgetSortProperty;
import com.thousandeyes.api.model.WidgetType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.thousandeyes.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:34.047854Z[Europe/London]")
public class ApiWidget extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ApiWidget.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ApiWidget.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ApiWidget' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ApiAgentStatusWidget> adapterApiAgentStatusWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiAgentStatusWidget.class));
            final TypeAdapter<ApiAlertListWidget> adapterApiAlertListWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiAlertListWidget.class));
            final TypeAdapter<ApiBoxAndWhiskersWidget> adapterApiBoxAndWhiskersWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiBoxAndWhiskersWidget.class));
            final TypeAdapter<ApiColorGridWidget> adapterApiColorGridWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiColorGridWidget.class));
            final TypeAdapter<ApiGeoMapWidget> adapterApiGeoMapWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiGeoMapWidget.class));
            final TypeAdapter<ApiGroupedBarchartWidget> adapterApiGroupedBarchartWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiGroupedBarchartWidget.class));
            final TypeAdapter<ApiMultiMetricTableWidget> adapterApiMultiMetricTableWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiMultiMetricTableWidget.class));
            final TypeAdapter<ApiNumbersCardWidget> adapterApiNumbersCardWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiNumbersCardWidget.class));
            final TypeAdapter<ApiPieChartWidget> adapterApiPieChartWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiPieChartWidget.class));
            final TypeAdapter<ApiStackedAreaChartWidget> adapterApiStackedAreaChartWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiStackedAreaChartWidget.class));
            final TypeAdapter<ApiStackedBarchartWidget> adapterApiStackedBarchartWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiStackedBarchartWidget.class));
            final TypeAdapter<ApiTableWidget> adapterApiTableWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiTableWidget.class));
            final TypeAdapter<ApiTestTableWidget> adapterApiTestTableWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiTestTableWidget.class));
            final TypeAdapter<ApiTimeseriesWidget> adapterApiTimeseriesWidget = gson.getDelegateAdapter(this, TypeToken.get(ApiTimeseriesWidget.class));

            return (TypeAdapter<T>) new TypeAdapter<ApiWidget>() {
                @Override
                public void write(JsonWriter out, ApiWidget value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ApiAgentStatusWidget`
                    if (value.getActualInstance() instanceof ApiAgentStatusWidget) {
                      JsonElement element = adapterApiAgentStatusWidget.toJsonTree((ApiAgentStatusWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiAlertListWidget`
                    if (value.getActualInstance() instanceof ApiAlertListWidget) {
                      JsonElement element = adapterApiAlertListWidget.toJsonTree((ApiAlertListWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiBoxAndWhiskersWidget`
                    if (value.getActualInstance() instanceof ApiBoxAndWhiskersWidget) {
                      JsonElement element = adapterApiBoxAndWhiskersWidget.toJsonTree((ApiBoxAndWhiskersWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiColorGridWidget`
                    if (value.getActualInstance() instanceof ApiColorGridWidget) {
                      JsonElement element = adapterApiColorGridWidget.toJsonTree((ApiColorGridWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiGeoMapWidget`
                    if (value.getActualInstance() instanceof ApiGeoMapWidget) {
                      JsonElement element = adapterApiGeoMapWidget.toJsonTree((ApiGeoMapWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiGroupedBarchartWidget`
                    if (value.getActualInstance() instanceof ApiGroupedBarchartWidget) {
                      JsonElement element = adapterApiGroupedBarchartWidget.toJsonTree((ApiGroupedBarchartWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiMultiMetricTableWidget`
                    if (value.getActualInstance() instanceof ApiMultiMetricTableWidget) {
                      JsonElement element = adapterApiMultiMetricTableWidget.toJsonTree((ApiMultiMetricTableWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiNumbersCardWidget`
                    if (value.getActualInstance() instanceof ApiNumbersCardWidget) {
                      JsonElement element = adapterApiNumbersCardWidget.toJsonTree((ApiNumbersCardWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiPieChartWidget`
                    if (value.getActualInstance() instanceof ApiPieChartWidget) {
                      JsonElement element = adapterApiPieChartWidget.toJsonTree((ApiPieChartWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiStackedAreaChartWidget`
                    if (value.getActualInstance() instanceof ApiStackedAreaChartWidget) {
                      JsonElement element = adapterApiStackedAreaChartWidget.toJsonTree((ApiStackedAreaChartWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiStackedBarchartWidget`
                    if (value.getActualInstance() instanceof ApiStackedBarchartWidget) {
                      JsonElement element = adapterApiStackedBarchartWidget.toJsonTree((ApiStackedBarchartWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiTableWidget`
                    if (value.getActualInstance() instanceof ApiTableWidget) {
                      JsonElement element = adapterApiTableWidget.toJsonTree((ApiTableWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiTestTableWidget`
                    if (value.getActualInstance() instanceof ApiTestTableWidget) {
                      JsonElement element = adapterApiTestTableWidget.toJsonTree((ApiTestTableWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ApiTimeseriesWidget`
                    if (value.getActualInstance() instanceof ApiTimeseriesWidget) {
                      JsonElement element = adapterApiTimeseriesWidget.toJsonTree((ApiTimeseriesWidget)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ApiAgentStatusWidget, ApiAlertListWidget, ApiBoxAndWhiskersWidget, ApiColorGridWidget, ApiGeoMapWidget, ApiGroupedBarchartWidget, ApiMultiMetricTableWidget, ApiNumbersCardWidget, ApiPieChartWidget, ApiStackedAreaChartWidget, ApiStackedBarchartWidget, ApiTableWidget, ApiTestTableWidget, ApiTimeseriesWidget");
                }

                @Override
                public ApiWidget read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ApiAgentStatusWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiAgentStatusWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiAgentStatusWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiAgentStatusWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiAgentStatusWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiAgentStatusWidget'", e);
                    }
                    // deserialize ApiAlertListWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiAlertListWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiAlertListWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiAlertListWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiAlertListWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiAlertListWidget'", e);
                    }
                    // deserialize ApiBoxAndWhiskersWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiBoxAndWhiskersWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiBoxAndWhiskersWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiBoxAndWhiskersWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiBoxAndWhiskersWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiBoxAndWhiskersWidget'", e);
                    }
                    // deserialize ApiColorGridWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiColorGridWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiColorGridWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiColorGridWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiColorGridWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiColorGridWidget'", e);
                    }
                    // deserialize ApiGeoMapWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiGeoMapWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiGeoMapWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiGeoMapWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiGeoMapWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiGeoMapWidget'", e);
                    }
                    // deserialize ApiGroupedBarchartWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiGroupedBarchartWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiGroupedBarchartWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiGroupedBarchartWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiGroupedBarchartWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiGroupedBarchartWidget'", e);
                    }
                    // deserialize ApiMultiMetricTableWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiMultiMetricTableWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiMultiMetricTableWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiMultiMetricTableWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiMultiMetricTableWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiMultiMetricTableWidget'", e);
                    }
                    // deserialize ApiNumbersCardWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiNumbersCardWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiNumbersCardWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiNumbersCardWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiNumbersCardWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiNumbersCardWidget'", e);
                    }
                    // deserialize ApiPieChartWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiPieChartWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiPieChartWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiPieChartWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiPieChartWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiPieChartWidget'", e);
                    }
                    // deserialize ApiStackedAreaChartWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiStackedAreaChartWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiStackedAreaChartWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiStackedAreaChartWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiStackedAreaChartWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiStackedAreaChartWidget'", e);
                    }
                    // deserialize ApiStackedBarchartWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiStackedBarchartWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiStackedBarchartWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiStackedBarchartWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiStackedBarchartWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiStackedBarchartWidget'", e);
                    }
                    // deserialize ApiTableWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiTableWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiTableWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiTableWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiTableWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiTableWidget'", e);
                    }
                    // deserialize ApiTestTableWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiTestTableWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiTestTableWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiTestTableWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiTestTableWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiTestTableWidget'", e);
                    }
                    // deserialize ApiTimeseriesWidget
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ApiTimeseriesWidget.validateJsonElement(jsonElement);
                      actualAdapter = adapterApiTimeseriesWidget;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'ApiTimeseriesWidget'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ApiTimeseriesWidget failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ApiTimeseriesWidget'", e);
                    }

                    if (match == 1) {
                        ApiWidget ret = new ApiWidget();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ApiWidget: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ApiWidget() {
        super("oneOf", Boolean.FALSE);
    }

    public ApiWidget(ApiAgentStatusWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiAlertListWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiBoxAndWhiskersWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiColorGridWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiGeoMapWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiGroupedBarchartWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiMultiMetricTableWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiNumbersCardWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiPieChartWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiStackedAreaChartWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiStackedBarchartWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiTableWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiTestTableWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ApiWidget(ApiTimeseriesWidget o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ApiAgentStatusWidget", ApiAgentStatusWidget.class);
        schemas.put("ApiAlertListWidget", ApiAlertListWidget.class);
        schemas.put("ApiBoxAndWhiskersWidget", ApiBoxAndWhiskersWidget.class);
        schemas.put("ApiColorGridWidget", ApiColorGridWidget.class);
        schemas.put("ApiGeoMapWidget", ApiGeoMapWidget.class);
        schemas.put("ApiGroupedBarchartWidget", ApiGroupedBarchartWidget.class);
        schemas.put("ApiMultiMetricTableWidget", ApiMultiMetricTableWidget.class);
        schemas.put("ApiNumbersCardWidget", ApiNumbersCardWidget.class);
        schemas.put("ApiPieChartWidget", ApiPieChartWidget.class);
        schemas.put("ApiStackedAreaChartWidget", ApiStackedAreaChartWidget.class);
        schemas.put("ApiStackedBarchartWidget", ApiStackedBarchartWidget.class);
        schemas.put("ApiTableWidget", ApiTableWidget.class);
        schemas.put("ApiTestTableWidget", ApiTestTableWidget.class);
        schemas.put("ApiTimeseriesWidget", ApiTimeseriesWidget.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ApiWidget.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ApiAgentStatusWidget, ApiAlertListWidget, ApiBoxAndWhiskersWidget, ApiColorGridWidget, ApiGeoMapWidget, ApiGroupedBarchartWidget, ApiMultiMetricTableWidget, ApiNumbersCardWidget, ApiPieChartWidget, ApiStackedAreaChartWidget, ApiStackedBarchartWidget, ApiTableWidget, ApiTestTableWidget, ApiTimeseriesWidget
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ApiAgentStatusWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiAlertListWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiBoxAndWhiskersWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiColorGridWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiGeoMapWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiGroupedBarchartWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiMultiMetricTableWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiNumbersCardWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiPieChartWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiStackedAreaChartWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiStackedBarchartWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiTableWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiTestTableWidget) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApiTimeseriesWidget) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ApiAgentStatusWidget, ApiAlertListWidget, ApiBoxAndWhiskersWidget, ApiColorGridWidget, ApiGeoMapWidget, ApiGroupedBarchartWidget, ApiMultiMetricTableWidget, ApiNumbersCardWidget, ApiPieChartWidget, ApiStackedAreaChartWidget, ApiStackedBarchartWidget, ApiTableWidget, ApiTestTableWidget, ApiTimeseriesWidget");
    }

    /**
     * Get the actual instance, which can be the following:
     * ApiAgentStatusWidget, ApiAlertListWidget, ApiBoxAndWhiskersWidget, ApiColorGridWidget, ApiGeoMapWidget, ApiGroupedBarchartWidget, ApiMultiMetricTableWidget, ApiNumbersCardWidget, ApiPieChartWidget, ApiStackedAreaChartWidget, ApiStackedBarchartWidget, ApiTableWidget, ApiTestTableWidget, ApiTimeseriesWidget
     *
     * @return The actual instance (ApiAgentStatusWidget, ApiAlertListWidget, ApiBoxAndWhiskersWidget, ApiColorGridWidget, ApiGeoMapWidget, ApiGroupedBarchartWidget, ApiMultiMetricTableWidget, ApiNumbersCardWidget, ApiPieChartWidget, ApiStackedAreaChartWidget, ApiStackedBarchartWidget, ApiTableWidget, ApiTestTableWidget, ApiTimeseriesWidget)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ApiAgentStatusWidget`. If the actual instance is not `ApiAgentStatusWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiAgentStatusWidget`
     * @throws ClassCastException if the instance is not `ApiAgentStatusWidget`
     */
    public ApiAgentStatusWidget getApiAgentStatusWidget() throws ClassCastException {
        return (ApiAgentStatusWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiAlertListWidget`. If the actual instance is not `ApiAlertListWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiAlertListWidget`
     * @throws ClassCastException if the instance is not `ApiAlertListWidget`
     */
    public ApiAlertListWidget getApiAlertListWidget() throws ClassCastException {
        return (ApiAlertListWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiBoxAndWhiskersWidget`. If the actual instance is not `ApiBoxAndWhiskersWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiBoxAndWhiskersWidget`
     * @throws ClassCastException if the instance is not `ApiBoxAndWhiskersWidget`
     */
    public ApiBoxAndWhiskersWidget getApiBoxAndWhiskersWidget() throws ClassCastException {
        return (ApiBoxAndWhiskersWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiColorGridWidget`. If the actual instance is not `ApiColorGridWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiColorGridWidget`
     * @throws ClassCastException if the instance is not `ApiColorGridWidget`
     */
    public ApiColorGridWidget getApiColorGridWidget() throws ClassCastException {
        return (ApiColorGridWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiGeoMapWidget`. If the actual instance is not `ApiGeoMapWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiGeoMapWidget`
     * @throws ClassCastException if the instance is not `ApiGeoMapWidget`
     */
    public ApiGeoMapWidget getApiGeoMapWidget() throws ClassCastException {
        return (ApiGeoMapWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiGroupedBarchartWidget`. If the actual instance is not `ApiGroupedBarchartWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiGroupedBarchartWidget`
     * @throws ClassCastException if the instance is not `ApiGroupedBarchartWidget`
     */
    public ApiGroupedBarchartWidget getApiGroupedBarchartWidget() throws ClassCastException {
        return (ApiGroupedBarchartWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiMultiMetricTableWidget`. If the actual instance is not `ApiMultiMetricTableWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiMultiMetricTableWidget`
     * @throws ClassCastException if the instance is not `ApiMultiMetricTableWidget`
     */
    public ApiMultiMetricTableWidget getApiMultiMetricTableWidget() throws ClassCastException {
        return (ApiMultiMetricTableWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiNumbersCardWidget`. If the actual instance is not `ApiNumbersCardWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiNumbersCardWidget`
     * @throws ClassCastException if the instance is not `ApiNumbersCardWidget`
     */
    public ApiNumbersCardWidget getApiNumbersCardWidget() throws ClassCastException {
        return (ApiNumbersCardWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiPieChartWidget`. If the actual instance is not `ApiPieChartWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiPieChartWidget`
     * @throws ClassCastException if the instance is not `ApiPieChartWidget`
     */
    public ApiPieChartWidget getApiPieChartWidget() throws ClassCastException {
        return (ApiPieChartWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiStackedAreaChartWidget`. If the actual instance is not `ApiStackedAreaChartWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiStackedAreaChartWidget`
     * @throws ClassCastException if the instance is not `ApiStackedAreaChartWidget`
     */
    public ApiStackedAreaChartWidget getApiStackedAreaChartWidget() throws ClassCastException {
        return (ApiStackedAreaChartWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiStackedBarchartWidget`. If the actual instance is not `ApiStackedBarchartWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiStackedBarchartWidget`
     * @throws ClassCastException if the instance is not `ApiStackedBarchartWidget`
     */
    public ApiStackedBarchartWidget getApiStackedBarchartWidget() throws ClassCastException {
        return (ApiStackedBarchartWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiTableWidget`. If the actual instance is not `ApiTableWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiTableWidget`
     * @throws ClassCastException if the instance is not `ApiTableWidget`
     */
    public ApiTableWidget getApiTableWidget() throws ClassCastException {
        return (ApiTableWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiTestTableWidget`. If the actual instance is not `ApiTestTableWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiTestTableWidget`
     * @throws ClassCastException if the instance is not `ApiTestTableWidget`
     */
    public ApiTestTableWidget getApiTestTableWidget() throws ClassCastException {
        return (ApiTestTableWidget)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ApiTimeseriesWidget`. If the actual instance is not `ApiTimeseriesWidget`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApiTimeseriesWidget`
     * @throws ClassCastException if the instance is not `ApiTimeseriesWidget`
     */
    public ApiTimeseriesWidget getApiTimeseriesWidget() throws ClassCastException {
        return (ApiTimeseriesWidget)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiWidget
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ApiAgentStatusWidget
    try {
      ApiAgentStatusWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiAgentStatusWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiAlertListWidget
    try {
      ApiAlertListWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiAlertListWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiBoxAndWhiskersWidget
    try {
      ApiBoxAndWhiskersWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiBoxAndWhiskersWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiColorGridWidget
    try {
      ApiColorGridWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiColorGridWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiGeoMapWidget
    try {
      ApiGeoMapWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiGeoMapWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiGroupedBarchartWidget
    try {
      ApiGroupedBarchartWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiGroupedBarchartWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiMultiMetricTableWidget
    try {
      ApiMultiMetricTableWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiMultiMetricTableWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiNumbersCardWidget
    try {
      ApiNumbersCardWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiNumbersCardWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiPieChartWidget
    try {
      ApiPieChartWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiPieChartWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiStackedAreaChartWidget
    try {
      ApiStackedAreaChartWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiStackedAreaChartWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiStackedBarchartWidget
    try {
      ApiStackedBarchartWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiStackedBarchartWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiTableWidget
    try {
      ApiTableWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiTableWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiTestTableWidget
    try {
      ApiTestTableWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiTestTableWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ApiTimeseriesWidget
    try {
      ApiTimeseriesWidget.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ApiTimeseriesWidget failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for ApiWidget with oneOf schemas: ApiAgentStatusWidget, ApiAlertListWidget, ApiBoxAndWhiskersWidget, ApiColorGridWidget, ApiGeoMapWidget, ApiGroupedBarchartWidget, ApiMultiMetricTableWidget, ApiNumbersCardWidget, ApiPieChartWidget, ApiStackedAreaChartWidget, ApiStackedBarchartWidget, ApiTableWidget, ApiTestTableWidget, ApiTimeseriesWidget. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of ApiWidget given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiWidget
  * @throws IOException if the JSON string is invalid with respect to ApiWidget
  */
  public static ApiWidget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiWidget.class);
  }

 /**
  * Convert an instance of ApiWidget to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

