/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.ApiNumbersCardAllOfFixedTimespan;
import com.thousandeyes.api.model.ApiWidgetFixedYScalePrefix;
import com.thousandeyes.api.model.ApiWidgetMeasure;
import com.thousandeyes.api.model.DashboardMetric;
import com.thousandeyes.api.model.DashboardMetricDirection;
import com.thousandeyes.api.model.MetricGroup;
import com.thousandeyes.api.model.NumbersCardDatasource;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * An individual number card within the numbers card widget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:19.739212Z[Europe/London]")
public class ApiNumbersCard {
  public static final String SERIALIZED_NAME_MIN_SCALE = "minScale";
  @SerializedName(SERIALIZED_NAME_MIN_SCALE)
  private Float minScale;

  public static final String SERIALIZED_NAME_MAX_SCALE = "maxScale";
  @SerializedName(SERIALIZED_NAME_MAX_SCALE)
  private Float maxScale;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private ApiWidgetFixedYScalePrefix unit;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MEASURE = "measure";
  @SerializedName(SERIALIZED_NAME_MEASURE)
  private ApiWidgetMeasure measure;

  public static final String SERIALIZED_NAME_COMPARE_TO_PREVIOUS_VALUE = "compareToPreviousValue";
  @SerializedName(SERIALIZED_NAME_COMPARE_TO_PREVIOUS_VALUE)
  private Boolean compareToPreviousValue;

  public static final String SERIALIZED_NAME_FIXED_TIMESPAN = "fixedTimespan";
  @SerializedName(SERIALIZED_NAME_FIXED_TIMESPAN)
  private ApiNumbersCardAllOfFixedTimespan fixedTimespan;

  public static final String SERIALIZED_NAME_SHOULD_EXCLUDE_ALERT_SUPPRESSION_WINDOWS = "shouldExcludeAlertSuppressionWindows";
  @SerializedName(SERIALIZED_NAME_SHOULD_EXCLUDE_ALERT_SUPPRESSION_WINDOWS)
  private Boolean shouldExcludeAlertSuppressionWindows;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private NumbersCardDatasource dataSource;

  public static final String SERIALIZED_NAME_METRIC_GROUP = "metricGroup";
  @SerializedName(SERIALIZED_NAME_METRIC_GROUP)
  private MetricGroup metricGroup;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DashboardMetricDirection direction;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private DashboardMetric metric;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Map<String, Set<Object>> filters = new HashMap<>();

  public ApiNumbersCard() {
  }

  public ApiNumbersCard minScale(Float minScale) {
    
    this.minScale = minScale;
    return this;
  }

   /**
   * Mininum scale configured in the widget.
   * @return minScale
  **/
  @javax.annotation.Nullable
  public Float getMinScale() {
    return minScale;
  }


  public void setMinScale(Float minScale) {
    this.minScale = minScale;
  }


  public ApiNumbersCard maxScale(Float maxScale) {
    
    this.maxScale = maxScale;
    return this;
  }

   /**
   * Maximum scale configured in the widget.
   * @return maxScale
  **/
  @javax.annotation.Nullable
  public Float getMaxScale() {
    return maxScale;
  }


  public void setMaxScale(Float maxScale) {
    this.maxScale = maxScale;
  }


  public ApiNumbersCard unit(ApiWidgetFixedYScalePrefix unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  public ApiWidgetFixedYScalePrefix getUnit() {
    return unit;
  }


  public void setUnit(ApiWidgetFixedYScalePrefix unit) {
    this.unit = unit;
  }


  public ApiNumbersCard id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifier of the widget.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ApiNumbersCard description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the number card.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ApiNumbersCard measure(ApiWidgetMeasure measure) {
    
    this.measure = measure;
    return this;
  }

   /**
   * Get measure
   * @return measure
  **/
  @javax.annotation.Nullable
  public ApiWidgetMeasure getMeasure() {
    return measure;
  }


  public void setMeasure(ApiWidgetMeasure measure) {
    this.measure = measure;
  }


  public ApiNumbersCard compareToPreviousValue(Boolean compareToPreviousValue) {
    
    this.compareToPreviousValue = compareToPreviousValue;
    return this;
  }

   /**
   * Get compareToPreviousValue
   * @return compareToPreviousValue
  **/
  @javax.annotation.Nullable
  public Boolean getCompareToPreviousValue() {
    return compareToPreviousValue;
  }


  public void setCompareToPreviousValue(Boolean compareToPreviousValue) {
    this.compareToPreviousValue = compareToPreviousValue;
  }


  public ApiNumbersCard fixedTimespan(ApiNumbersCardAllOfFixedTimespan fixedTimespan) {
    
    this.fixedTimespan = fixedTimespan;
    return this;
  }

   /**
   * Get fixedTimespan
   * @return fixedTimespan
  **/
  @javax.annotation.Nullable
  public ApiNumbersCardAllOfFixedTimespan getFixedTimespan() {
    return fixedTimespan;
  }


  public void setFixedTimespan(ApiNumbersCardAllOfFixedTimespan fixedTimespan) {
    this.fixedTimespan = fixedTimespan;
  }


  public ApiNumbersCard shouldExcludeAlertSuppressionWindows(Boolean shouldExcludeAlertSuppressionWindows) {
    
    this.shouldExcludeAlertSuppressionWindows = shouldExcludeAlertSuppressionWindows;
    return this;
  }

   /**
   * Excludes alert suppression windows from the widget when set to &#x60;true&#x60;.
   * @return shouldExcludeAlertSuppressionWindows
  **/
  @javax.annotation.Nullable
  public Boolean getShouldExcludeAlertSuppressionWindows() {
    return shouldExcludeAlertSuppressionWindows;
  }


  public void setShouldExcludeAlertSuppressionWindows(Boolean shouldExcludeAlertSuppressionWindows) {
    this.shouldExcludeAlertSuppressionWindows = shouldExcludeAlertSuppressionWindows;
  }


  public ApiNumbersCard dataSource(NumbersCardDatasource dataSource) {
    
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @javax.annotation.Nullable
  public NumbersCardDatasource getDataSource() {
    return dataSource;
  }


  public void setDataSource(NumbersCardDatasource dataSource) {
    this.dataSource = dataSource;
  }


  public ApiNumbersCard metricGroup(MetricGroup metricGroup) {
    
    this.metricGroup = metricGroup;
    return this;
  }

   /**
   * Get metricGroup
   * @return metricGroup
  **/
  @javax.annotation.Nullable
  public MetricGroup getMetricGroup() {
    return metricGroup;
  }


  public void setMetricGroup(MetricGroup metricGroup) {
    this.metricGroup = metricGroup;
  }


  public ApiNumbersCard direction(DashboardMetricDirection direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  public DashboardMetricDirection getDirection() {
    return direction;
  }


  public void setDirection(DashboardMetricDirection direction) {
    this.direction = direction;
  }


  public ApiNumbersCard metric(DashboardMetric metric) {
    
    this.metric = metric;
    return this;
  }

   /**
   * Get metric
   * @return metric
  **/
  @javax.annotation.Nullable
  public DashboardMetric getMetric() {
    return metric;
  }


  public void setMetric(DashboardMetric metric) {
    this.metric = metric;
  }


  public ApiNumbersCard filters(Map<String, Set<Object>> filters) {
    
    this.filters = filters;
    return this;
  }

  public ApiNumbersCard putFiltersItem(String key, Set<Object> filtersItem) {
    if (this.filters == null) {
      this.filters = new HashMap<>();
    }
    this.filters.put(key, filtersItem);
    return this;
  }

   /**
   * Filters to apply to the widget.
   * @return filters
  **/
  @javax.annotation.Nullable
  public Map<String, Set<Object>> getFilters() {
    return filters;
  }


  public void setFilters(Map<String, Set<Object>> filters) {
    this.filters = filters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiNumbersCard apiNumbersCard = (ApiNumbersCard) o;
    return Objects.equals(this.minScale, apiNumbersCard.minScale) &&
        Objects.equals(this.maxScale, apiNumbersCard.maxScale) &&
        Objects.equals(this.unit, apiNumbersCard.unit) &&
        Objects.equals(this.id, apiNumbersCard.id) &&
        Objects.equals(this.description, apiNumbersCard.description) &&
        Objects.equals(this.measure, apiNumbersCard.measure) &&
        Objects.equals(this.compareToPreviousValue, apiNumbersCard.compareToPreviousValue) &&
        Objects.equals(this.fixedTimespan, apiNumbersCard.fixedTimespan) &&
        Objects.equals(this.shouldExcludeAlertSuppressionWindows, apiNumbersCard.shouldExcludeAlertSuppressionWindows) &&
        Objects.equals(this.dataSource, apiNumbersCard.dataSource) &&
        Objects.equals(this.metricGroup, apiNumbersCard.metricGroup) &&
        Objects.equals(this.direction, apiNumbersCard.direction) &&
        Objects.equals(this.metric, apiNumbersCard.metric) &&
        Objects.equals(this.filters, apiNumbersCard.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minScale, maxScale, unit, id, description, measure, compareToPreviousValue, fixedTimespan, shouldExcludeAlertSuppressionWindows, dataSource, metricGroup, direction, metric, filters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiNumbersCard {\n");
    sb.append("    minScale: ").append(toIndentedString(minScale)).append("\n");
    sb.append("    maxScale: ").append(toIndentedString(maxScale)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    measure: ").append(toIndentedString(measure)).append("\n");
    sb.append("    compareToPreviousValue: ").append(toIndentedString(compareToPreviousValue)).append("\n");
    sb.append("    fixedTimespan: ").append(toIndentedString(fixedTimespan)).append("\n");
    sb.append("    shouldExcludeAlertSuppressionWindows: ").append(toIndentedString(shouldExcludeAlertSuppressionWindows)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    metricGroup: ").append(toIndentedString(metricGroup)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minScale");
    openapiFields.add("maxScale");
    openapiFields.add("unit");
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("measure");
    openapiFields.add("compareToPreviousValue");
    openapiFields.add("fixedTimespan");
    openapiFields.add("shouldExcludeAlertSuppressionWindows");
    openapiFields.add("dataSource");
    openapiFields.add("metricGroup");
    openapiFields.add("direction");
    openapiFields.add("metric");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiNumbersCard
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiNumbersCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiNumbersCard is not found in the empty JSON string", ApiNumbersCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiNumbersCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiNumbersCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `measure`
      if (jsonObj.get("measure") != null && !jsonObj.get("measure").isJsonNull()) {
        ApiWidgetMeasure.validateJsonElement(jsonObj.get("measure"));
      }
      // validate the optional field `fixedTimespan`
      if (jsonObj.get("fixedTimespan") != null && !jsonObj.get("fixedTimespan").isJsonNull()) {
        ApiNumbersCardAllOfFixedTimespan.validateJsonElement(jsonObj.get("fixedTimespan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiNumbersCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiNumbersCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiNumbersCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiNumbersCard.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiNumbersCard>() {
           @Override
           public void write(JsonWriter out, ApiNumbersCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiNumbersCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiNumbersCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiNumbersCard
  * @throws IOException if the JSON string is invalid with respect to ApiNumbersCard
  */
  public static ApiNumbersCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiNumbersCard.class);
  }

 /**
  * Convert an instance of ApiNumbersCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

