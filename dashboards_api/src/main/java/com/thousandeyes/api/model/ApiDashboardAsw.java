/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AswRepeat;
import com.thousandeyes.api.model.AswRepeatUnit;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * Alert suppression window shown in a widget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:19.739212Z[Europe/London]")
public class ApiDashboardAsw {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEST_IDS = "testIds";
  @SerializedName(SERIALIZED_NAME_TEST_IDS)
  private Set<String> testIds;

  public static final String SERIALIZED_NAME_START_TIMES = "startTimes";
  @SerializedName(SERIALIZED_NAME_START_TIMES)
  private List<OffsetDateTime> startTimes;

  public static final String SERIALIZED_NAME_DURATION_IN_SECONDS = "durationInSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_SECONDS)
  private Long durationInSeconds;

  public static final String SERIALIZED_NAME_REPEAT = "repeat";
  @SerializedName(SERIALIZED_NAME_REPEAT)
  private AswRepeat repeat;

  public static final String SERIALIZED_NAME_REPEAT_EVERY = "repeatEvery";
  @SerializedName(SERIALIZED_NAME_REPEAT_EVERY)
  private Integer repeatEvery;

  public static final String SERIALIZED_NAME_REPEAT_UNIT = "repeatUnit";
  @SerializedName(SERIALIZED_NAME_REPEAT_UNIT)
  private AswRepeatUnit repeatUnit;

  public ApiDashboardAsw() {
  }

  public ApiDashboardAsw id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifier of the alert suppression window.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ApiDashboardAsw name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the alert suppression window.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ApiDashboardAsw testIds(Set<String> testIds) {
    
    this.testIds = testIds;
    return this;
  }

  public ApiDashboardAsw addTestIdsItem(String testIdsItem) {
    if (this.testIds == null) {
      this.testIds = new LinkedHashSet<>();
    }
    this.testIds.add(testIdsItem);
    return this;
  }

   /**
   * Get testIds
   * @return testIds
  **/
  @javax.annotation.Nullable
  public Set<String> getTestIds() {
    return testIds;
  }


  public void setTestIds(Set<String> testIds) {
    this.testIds = testIds;
  }


  public ApiDashboardAsw startTimes(List<OffsetDateTime> startTimes) {
    
    this.startTimes = startTimes;
    return this;
  }

  public ApiDashboardAsw addStartTimesItem(OffsetDateTime startTimesItem) {
    if (this.startTimes == null) {
      this.startTimes = new ArrayList<>();
    }
    this.startTimes.add(startTimesItem);
    return this;
  }

   /**
   * Get startTimes
   * @return startTimes
  **/
  @javax.annotation.Nullable
  public List<OffsetDateTime> getStartTimes() {
    return startTimes;
  }


  public void setStartTimes(List<OffsetDateTime> startTimes) {
    this.startTimes = startTimes;
  }


  public ApiDashboardAsw durationInSeconds(Long durationInSeconds) {
    
    this.durationInSeconds = durationInSeconds;
    return this;
  }

   /**
   * Get durationInSeconds
   * @return durationInSeconds
  **/
  @javax.annotation.Nullable
  public Long getDurationInSeconds() {
    return durationInSeconds;
  }


  public void setDurationInSeconds(Long durationInSeconds) {
    this.durationInSeconds = durationInSeconds;
  }


  public ApiDashboardAsw repeat(AswRepeat repeat) {
    
    this.repeat = repeat;
    return this;
  }

   /**
   * Get repeat
   * @return repeat
  **/
  @javax.annotation.Nullable
  public AswRepeat getRepeat() {
    return repeat;
  }


  public void setRepeat(AswRepeat repeat) {
    this.repeat = repeat;
  }


  public ApiDashboardAsw repeatEvery(Integer repeatEvery) {
    
    this.repeatEvery = repeatEvery;
    return this;
  }

   /**
   * Get repeatEvery
   * @return repeatEvery
  **/
  @javax.annotation.Nullable
  public Integer getRepeatEvery() {
    return repeatEvery;
  }


  public void setRepeatEvery(Integer repeatEvery) {
    this.repeatEvery = repeatEvery;
  }


  public ApiDashboardAsw repeatUnit(AswRepeatUnit repeatUnit) {
    
    this.repeatUnit = repeatUnit;
    return this;
  }

   /**
   * Get repeatUnit
   * @return repeatUnit
  **/
  @javax.annotation.Nullable
  public AswRepeatUnit getRepeatUnit() {
    return repeatUnit;
  }


  public void setRepeatUnit(AswRepeatUnit repeatUnit) {
    this.repeatUnit = repeatUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiDashboardAsw apiDashboardAsw = (ApiDashboardAsw) o;
    return Objects.equals(this.id, apiDashboardAsw.id) &&
        Objects.equals(this.name, apiDashboardAsw.name) &&
        Objects.equals(this.testIds, apiDashboardAsw.testIds) &&
        Objects.equals(this.startTimes, apiDashboardAsw.startTimes) &&
        Objects.equals(this.durationInSeconds, apiDashboardAsw.durationInSeconds) &&
        Objects.equals(this.repeat, apiDashboardAsw.repeat) &&
        Objects.equals(this.repeatEvery, apiDashboardAsw.repeatEvery) &&
        Objects.equals(this.repeatUnit, apiDashboardAsw.repeatUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, testIds, startTimes, durationInSeconds, repeat, repeatEvery, repeatUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiDashboardAsw {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    testIds: ").append(toIndentedString(testIds)).append("\n");
    sb.append("    startTimes: ").append(toIndentedString(startTimes)).append("\n");
    sb.append("    durationInSeconds: ").append(toIndentedString(durationInSeconds)).append("\n");
    sb.append("    repeat: ").append(toIndentedString(repeat)).append("\n");
    sb.append("    repeatEvery: ").append(toIndentedString(repeatEvery)).append("\n");
    sb.append("    repeatUnit: ").append(toIndentedString(repeatUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("testIds");
    openapiFields.add("startTimes");
    openapiFields.add("durationInSeconds");
    openapiFields.add("repeat");
    openapiFields.add("repeatEvery");
    openapiFields.add("repeatUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiDashboardAsw
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiDashboardAsw.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiDashboardAsw is not found in the empty JSON string", ApiDashboardAsw.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiDashboardAsw.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiDashboardAsw` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("testIds") != null && !jsonObj.get("testIds").isJsonNull() && !jsonObj.get("testIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testIds` to be an array in the JSON string but got `%s`", jsonObj.get("testIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("startTimes") != null && !jsonObj.get("startTimes").isJsonNull() && !jsonObj.get("startTimes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimes` to be an array in the JSON string but got `%s`", jsonObj.get("startTimes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiDashboardAsw.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiDashboardAsw' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiDashboardAsw> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiDashboardAsw.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiDashboardAsw>() {
           @Override
           public void write(JsonWriter out, ApiDashboardAsw value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiDashboardAsw read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiDashboardAsw given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiDashboardAsw
  * @throws IOException if the JSON string is invalid with respect to ApiDashboardAsw
  */
  public static ApiDashboardAsw fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiDashboardAsw.class);
  }

 /**
  * Convert an instance of ApiDashboardAsw to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

