/*
 * Dashboards API
 * Manage ThousandEyes Dashboards
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api;

import com.thousandeyes.ApiException;
import com.thousandeyes.api.model.ApiDashboardSnapshot;
import com.thousandeyes.api.model.DashboardSnapshots200Response;
import com.thousandeyes.api.model.Error;
import com.thousandeyes.api.model.GenerateDashboardSnapshotRequest;
import com.thousandeyes.api.model.SnapshotDataByWidget200Response;
import java.net.URI;
import com.thousandeyes.api.model.UnauthorizedError;
import com.thousandeyes.api.model.UpdateSnapshotExpirationDateApiRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardSnapshotsApi
 */
@Disabled
public class DashboardSnapshotsApiTest {

    private final DashboardSnapshotsApi api = new DashboardSnapshotsApi();

    /**
     * Create dashboard snapshot
     *
     * Creates a new dashboard snapshot within your account group. The &#x60;Edit Snapshots&#x60; permission is required to use this endpoint. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDashboardSnapshotTest() throws ApiException {
        GenerateDashboardSnapshotRequest generateDashboardSnapshotRequest = null;
        String aid = null;
        ApiDashboardSnapshot response = api.createDashboardSnapshot(generateDashboardSnapshotRequest, aid);
        // TODO: test validations
    }

    /**
     * Retrieve dashboard snapshot
     *
     * This endpoint returns a list of widgets configured in dashboard snapshot configured in ThousandEyes. Seed this endpoint with a snapshotId found from the /dashboard-snapshots endpoint. This endpoint requires the &#x60;View Snapshots&#x60; permission be assigned to the role of the user accessing this endpoint. Returns a list of widgets configured within a dashboard snapshot. Use the &#x60;snapshotId&#x60; obtained from the &#x60;/dashboard-snapshots&#x60; endpoint. The &#x60;View Snapshots&#x60; permission is required to use this endpoint.\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardSnapshotByIdTest() throws ApiException {
        String snapshotId = null;
        String aid = null;
        ApiDashboardSnapshot response = api.dashboardSnapshotById(snapshotId, aid);
        // TODO: test validations
    }

    /**
     * List dashboard snapshots
     *
     * Returns a list of dashboard snapshots within your account group. Use this data to identify a specific dashboard snapshot, which can be used in other endpoints to access aggregated data. The &#x60;View Snapshots&#x60; permission is required to use this endpoint.\&quot; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardSnapshotsTest() throws ApiException {
        String aid = null;
        String dashboardId = null;
        String cursor = null;
        DashboardSnapshots200Response response = api.dashboardSnapshots(aid, dashboardId, cursor);
        // TODO: test validations
    }

    /**
     * Delete dashboard snapshot
     *
     * Deletes a dashboard snapshot using the &#x60;snapshotId&#x60; provided in the request. Users with the &#x60;Edit reports for all users in account group&#x60; permission (Account Admin) can delete any dashboard snapshot. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDashboardSnapshotTest() throws ApiException {
        String snapshotId = null;
        String aid = null;
        api.deleteDashboardSnapshot(snapshotId, aid);
        // TODO: test validations
    }

    /**
     * Retrieve dashboard snapshot data
     *
     * Returns actual metrics used in the generation of a dashboard snapshot. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void snapshotDataByWidgetTest() throws ApiException {
        String snapshotId = null;
        String widgetId = null;
        String aid = null;
        SnapshotDataByWidget200Response response = api.snapshotDataByWidget(snapshotId, widgetId, aid);
        // TODO: test validations
    }

    /**
     * Update snapshot expiration
     *
     * Updates the expiration date of a dashboard snapshot. The &#x60;Edit snapshots&#x60; permission is required to access this endpoint. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSnapshotExpirationDateTest() throws ApiException {
        String snapshotId = null;
        UpdateSnapshotExpirationDateApiRequest updateSnapshotExpirationDateApiRequest = null;
        String aid = null;
        api.updateSnapshotExpirationDate(snapshotId, updateSnapshotExpirationDateApiRequest, aid);
        // TODO: test validations
    }

}
