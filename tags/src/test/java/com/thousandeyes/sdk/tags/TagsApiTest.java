/*
 * Tags API
 * The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.tags;

import com.thousandeyes.sdk.tags.model.ApiError;
import com.thousandeyes.sdk.tags.model.BulkTagResponse;
import com.thousandeyes.sdk.tags.model.Error;
import com.thousandeyes.sdk.tags.model.ExpandTagsOptions;
import com.thousandeyes.sdk.tags.model.Tag;
import com.thousandeyes.sdk.tags.model.TagInfo;
import com.thousandeyes.sdk.tags.model.Tags;
import com.thousandeyes.sdk.tags.model.UnauthorizedError;
import com.thousandeyes.sdk.tags.model.ValidationError;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.common.ContentTypes.AUTHORIZATION;
import static com.github.tomakehurst.wiremock.common.ContentTypes.CONTENT_TYPE;
import static com.thousandeyes.sdk.serialization.JSON.getDefault;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
import com.github.tomakehurst.wiremock.junit5.WireMockTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.NativeApiClient;


/**
 * Request and Response model deserialization tests for TagsApi
 */
@WireMockTest
public class TagsApiTest {
    private static final String TOKEN = "valid-token";
    private static final String BEARER_TOKEN = "Bearer %s".formatted(TOKEN);
    private static TagsApi api;
    private final ObjectMapper mapper = getDefault()
            .getMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

    @BeforeAll
    public static void setup(WireMockRuntimeInfo wireMockRuntimeInfo) {
        ApiClient client = NativeApiClient.builder()
                                .baseUri(wireMockRuntimeInfo.getHttpBaseUrl())
                                .bearerToken(TOKEN)
                                .build();
        api = new TagsApi(client);
    }
    
    /**
     * Create tag
     * <p>
     * Creates a new tag.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void createTagRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "accessType" : "all",
                  "assignments" : [ {
                    "id" : "123",
                    "type" : "test"
                  }, {
                    "id" : "123",
                    "type" : "test"
                  } ],
                  "color" : "#FF0000",
                  "icon" : "icon",
                  "description" : "To tag assets in San Francisco",
                  "legacyId" : 0.8008281904610115,
                  "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                  "aid" : 1234,
                  "value" : "sfo",
                  "key" : "branch",
                  "createDate" : "2022-03-01T23:31:11Z",
                  "objectType" : "test"
                }
                                 """;
        var requestBodyContentType = "application/json";
        TagInfo mappedRequest = 
                mapper.readValue(requestBodyJson, TagInfo.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "accessType" : "all",
                  "assignments" : [ {
                    "id" : "123",
                    "type" : "test"
                  }, {
                    "id" : "123",
                    "type" : "test"
                  } ],
                  "color" : "#FF0000",
                  "icon" : "icon",
                  "description" : "To tag assets in San Francisco",
                  "legacyId" : 0.8008281904610115,
                  "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                  "aid" : 1234,
                  "value" : "sfo",
                  "key" : "branch",
                  "createDate" : "2022-03-01T23:31:11Z",
                  "objectType" : "test"
                }
                                  """;
        var statusCode = 201;
        var responseContentType = "application/json";
        TagInfo mappedResponse = 
                mapper.readValue(responseBodyJson, TagInfo.class);
        assertNotNull(mappedResponse);

        var path = "/tags";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.createTag(null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Create multiple tags
     * <p>
     * Creates multiple tags. Note the response includes a &#x60;statuses&#x60; array. This array provides status information for each tag object, indexed 1:1 with the &#x60;tags&#x60; array.  
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void createTagsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "errors" : [ {
                    "tag" : {
                      "key" : {
                        "accessType" : "all",
                        "assignments" : [ {
                          "id" : "123",
                          "type" : "test"
                        }, {
                          "id" : "123",
                          "type" : "test"
                        } ],
                        "color" : "#FF0000",
                        "icon" : "icon",
                        "description" : "To tag assets in San Francisco",
                        "legacyId" : 0.8008281904610115,
                        "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                        "aid" : 1234,
                        "value" : "sfo",
                        "key" : "branch",
                        "createDate" : "2022-03-01T23:31:11Z",
                        "objectType" : "test"
                      }
                    },
                    "message" : "Object successfully created",
                    "responseCode" : 200
                  }, {
                    "tag" : {
                      "key" : {
                        "accessType" : "all",
                        "assignments" : [ {
                          "id" : "123",
                          "type" : "test"
                        }, {
                          "id" : "123",
                          "type" : "test"
                        } ],
                        "color" : "#FF0000",
                        "icon" : "icon",
                        "description" : "To tag assets in San Francisco",
                        "legacyId" : 0.8008281904610115,
                        "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                        "aid" : 1234,
                        "value" : "sfo",
                        "key" : "branch",
                        "createDate" : "2022-03-01T23:31:11Z",
                        "objectType" : "test"
                      }
                    },
                    "message" : "Object successfully created",
                    "responseCode" : 200
                  } ],
                  "tags" : [ {
                    "assignments" : [ {
                      "id" : "123",
                      "type" : "test"
                    }, {
                      "id" : "123",
                      "type" : "test"
                    } ],
                    "color" : "#FF0000",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "icon" : "icon",
                    "description" : "To tag assets in San Francisco",
                    "objectType" : "test",
                    "accessType" : "all",
                    "legacyId" : 0.8008281904610115,
                    "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                    "aid" : 1234,
                    "value" : "sfo",
                    "key" : "branch",
                    "createDate" : "2022-03-01T23:31:11Z"
                  }, {
                    "assignments" : [ {
                      "id" : "123",
                      "type" : "test"
                    }, {
                      "id" : "123",
                      "type" : "test"
                    } ],
                    "color" : "#FF0000",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "icon" : "icon",
                    "description" : "To tag assets in San Francisco",
                    "objectType" : "test",
                    "accessType" : "all",
                    "legacyId" : 0.8008281904610115,
                    "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                    "aid" : 1234,
                    "value" : "sfo",
                    "key" : "branch",
                    "createDate" : "2022-03-01T23:31:11Z"
                  } ]
                }
                                 """;
        var requestBodyContentType = "application/json";
        BulkTagResponse mappedRequest = 
                mapper.readValue(requestBodyJson, BulkTagResponse.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "errors" : [ {
                    "tag" : {
                      "key" : {
                        "accessType" : "all",
                        "assignments" : [ {
                          "id" : "123",
                          "type" : "test"
                        }, {
                          "id" : "123",
                          "type" : "test"
                        } ],
                        "color" : "#FF0000",
                        "icon" : "icon",
                        "description" : "To tag assets in San Francisco",
                        "legacyId" : 0.8008281904610115,
                        "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                        "aid" : 1234,
                        "value" : "sfo",
                        "key" : "branch",
                        "createDate" : "2022-03-01T23:31:11Z",
                        "objectType" : "test"
                      }
                    },
                    "message" : "Object successfully created",
                    "responseCode" : 200
                  }, {
                    "tag" : {
                      "key" : {
                        "accessType" : "all",
                        "assignments" : [ {
                          "id" : "123",
                          "type" : "test"
                        }, {
                          "id" : "123",
                          "type" : "test"
                        } ],
                        "color" : "#FF0000",
                        "icon" : "icon",
                        "description" : "To tag assets in San Francisco",
                        "legacyId" : 0.8008281904610115,
                        "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                        "aid" : 1234,
                        "value" : "sfo",
                        "key" : "branch",
                        "createDate" : "2022-03-01T23:31:11Z",
                        "objectType" : "test"
                      }
                    },
                    "message" : "Object successfully created",
                    "responseCode" : 200
                  } ],
                  "tags" : [ {
                    "assignments" : [ {
                      "id" : "123",
                      "type" : "test"
                    }, {
                      "id" : "123",
                      "type" : "test"
                    } ],
                    "color" : "#FF0000",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "icon" : "icon",
                    "description" : "To tag assets in San Francisco",
                    "objectType" : "test",
                    "accessType" : "all",
                    "legacyId" : 0.8008281904610115,
                    "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                    "aid" : 1234,
                    "value" : "sfo",
                    "key" : "branch",
                    "createDate" : "2022-03-01T23:31:11Z"
                  }, {
                    "assignments" : [ {
                      "id" : "123",
                      "type" : "test"
                    }, {
                      "id" : "123",
                      "type" : "test"
                    } ],
                    "color" : "#FF0000",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "icon" : "icon",
                    "description" : "To tag assets in San Francisco",
                    "objectType" : "test",
                    "accessType" : "all",
                    "legacyId" : 0.8008281904610115,
                    "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                    "aid" : 1234,
                    "value" : "sfo",
                    "key" : "branch",
                    "createDate" : "2022-03-01T23:31:11Z"
                  } ]
                }
                                  """;
        var statusCode = 207;
        var responseContentType = "application/json";
        BulkTagResponse mappedResponse = 
                mapper.readValue(responseBodyJson, BulkTagResponse.class);
        assertNotNull(mappedResponse);

        var path = "/tags/bulk";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.createTags(null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Delete tag
     * <p>
     * Deletes a tag.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void deleteTagRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "c6b78e57-81a2-4c5f-a11a-d96c3c664d55";


        var statusCode = 204;

        var path = "/tags/{id}";
        stubFor(delete(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withStatus(statusCode)));

        var apiResponse = api.deleteTagWithHttpInfo(id, null);
        assertEquals(statusCode, apiResponse.getStatusCode());
    }
    
    /**
     * Retrieve tag
     * <p>
     * Retrieves a tag using its ID.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getTagRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "c6b78e57-81a2-4c5f-a11a-d96c3c664d55";


        var responseBodyJson = """
                {
                  "assignments" : [ {
                    "id" : "123",
                    "type" : "test"
                  }, {
                    "id" : "123",
                    "type" : "test"
                  } ],
                  "color" : "#FF0000",
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "icon" : "icon",
                  "description" : "To tag assets in San Francisco",
                  "objectType" : "test",
                  "accessType" : "all",
                  "legacyId" : 0.8008281904610115,
                  "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                  "aid" : 1234,
                  "value" : "sfo",
                  "key" : "branch",
                  "createDate" : "2022-03-01T23:31:11Z"
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        Tag mappedResponse = 
                mapper.readValue(responseBodyJson, Tag.class);
        assertNotNull(mappedResponse);

        var path = "/tags/{id}";
        stubFor(get(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getTag(id, null, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * List tags
     * <p>
     * This operation returns a list of tags in the specified account group (&#x60;aid&#x60;).
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getTagsRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {


        var responseBodyJson = """
                {
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "tags" : [ {
                    "assignments" : [ {
                      "id" : "123",
                      "type" : "test"
                    }, {
                      "id" : "123",
                      "type" : "test"
                    } ],
                    "color" : "#FF0000",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "icon" : "icon",
                    "description" : "To tag assets in San Francisco",
                    "objectType" : "test",
                    "accessType" : "all",
                    "legacyId" : 0.8008281904610115,
                    "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                    "aid" : 1234,
                    "value" : "sfo",
                    "key" : "branch",
                    "createDate" : "2022-03-01T23:31:11Z"
                  }, {
                    "assignments" : [ {
                      "id" : "123",
                      "type" : "test"
                    }, {
                      "id" : "123",
                      "type" : "test"
                    } ],
                    "color" : "#FF0000",
                    "_links" : {
                      "self" : {
                        "hreflang" : "hreflang",
                        "templated" : true,
                        "profile" : "profile",
                        "name" : "name",
                        "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                        "type" : "type",
                        "deprecation" : "deprecation",
                        "title" : "title"
                      }
                    },
                    "icon" : "icon",
                    "description" : "To tag assets in San Francisco",
                    "objectType" : "test",
                    "accessType" : "all",
                    "legacyId" : 0.8008281904610115,
                    "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                    "aid" : 1234,
                    "value" : "sfo",
                    "key" : "branch",
                    "createDate" : "2022-03-01T23:31:11Z"
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        Tags mappedResponse = 
                mapper.readValue(responseBodyJson, Tags.class);
        assertNotNull(mappedResponse);

        var path = "/tags";
        stubFor(get(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getTags(null, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Update tag
     * <p>
     * Updates a tag.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void updateTagRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "c6b78e57-81a2-4c5f-a11a-d96c3c664d55";

        var requestBodyJson = """
                {
                  "accessType" : "all",
                  "assignments" : [ {
                    "id" : "123",
                    "type" : "test"
                  }, {
                    "id" : "123",
                    "type" : "test"
                  } ],
                  "color" : "#FF0000",
                  "icon" : "icon",
                  "description" : "To tag assets in San Francisco",
                  "legacyId" : 0.8008281904610115,
                  "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                  "aid" : 1234,
                  "value" : "sfo",
                  "key" : "branch",
                  "createDate" : "2022-03-01T23:31:11Z",
                  "objectType" : "test"
                }
                                 """;
        var requestBodyContentType = "application/json";
        TagInfo mappedRequest = 
                mapper.readValue(requestBodyJson, TagInfo.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "accessType" : "all",
                  "assignments" : [ {
                    "id" : "123",
                    "type" : "test"
                  }, {
                    "id" : "123",
                    "type" : "test"
                  } ],
                  "color" : "#FF0000",
                  "icon" : "icon",
                  "description" : "To tag assets in San Francisco",
                  "legacyId" : 0.8008281904610115,
                  "id" : "5aeab5d5-0d34-4d44-a7ac-fb440185295c",
                  "aid" : 1234,
                  "value" : "sfo",
                  "key" : "branch",
                  "createDate" : "2022-03-01T23:31:11Z",
                  "objectType" : "test"
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        TagInfo mappedResponse = 
                mapper.readValue(responseBodyJson, TagInfo.class);
        assertNotNull(mappedResponse);

        var path = "/tags/{id}";
        stubFor(put(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.updateTag(id, null, mappedRequest);
        assertEquals(mappedResponse, apiResponse);
    }
    
}
