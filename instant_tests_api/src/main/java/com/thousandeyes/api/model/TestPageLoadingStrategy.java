/*
 * Instant Tests API
 *  ### Overview The Instant Tests API endpoint lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * * &#x60;normal&#x60;: The test waits until the entire page is fully loaded, including the downloading and parsing of HTML content as well as all associated resources, before advancing to the next action in the transaction test script.  * &#x60;eager&#x60;: The test waits for the DOMContentLoaded event, indicating that HTML content is downloaded and parsed, and the document reaches the \&quot;interactive\&quot; readiness state, before proceeding to the next action in the test script. * &#x60;none&#x60;: The test only waits for the download of HTML content. Once the HTML is downloaded, the test continues to the next action in the transaction test script without waiting for additional resources. 
 */
@JsonAdapter(TestPageLoadingStrategy.Adapter.class)
public enum TestPageLoadingStrategy {
  
  NORMAL("normal"),
  
  EAGER("eager"),
  
  NONE("none");

  private String value;

  TestPageLoadingStrategy(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TestPageLoadingStrategy fromValue(String value) {
    for (TestPageLoadingStrategy b : TestPageLoadingStrategy.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TestPageLoadingStrategy> {
    @Override
    public void write(final JsonWriter jsonWriter, final TestPageLoadingStrategy enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TestPageLoadingStrategy read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TestPageLoadingStrategy.fromValue(value);
    }
  }
}

