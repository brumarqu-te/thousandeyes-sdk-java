/*
 * Instant Tests API
 *  ### Overview The Instant Tests API endpoint lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * InstantTestRequestAgentsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:28.202795Z[Europe/London]")
public class InstantTestRequestAgentsInner {
  public static final String SERIALIZED_NAME_AGENT_ID = "agentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private String agentId;

  public static final String SERIALIZED_NAME_SOURCE_IP_ADDRESS = "sourceIpAddress";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP_ADDRESS)
  private String sourceIpAddress;

  public InstantTestRequestAgentsInner() {
  }

  public InstantTestRequestAgentsInner agentId(String agentId) {
    
    this.agentId = agentId;
    return this;
  }

   /**
   * Identifier for the agent (get &#x60;agentId&#x60; from &#x60;/agents&#x60; endpoint).
   * @return agentId
  **/
  @javax.annotation.Nullable
  public String getAgentId() {
    return agentId;
  }


  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }


  public InstantTestRequestAgentsInner sourceIpAddress(String sourceIpAddress) {
    
    this.sourceIpAddress = sourceIpAddress;
    return this;
  }

   /**
   * IP address from the agent&#39;s &#x60;ipAddresses&#x60; field (get &#x60;ipAddresses&#x60; from &#x60;/agents&#x60; endpoint). Used for interface selection.
   * @return sourceIpAddress
  **/
  @javax.annotation.Nullable
  public String getSourceIpAddress() {
    return sourceIpAddress;
  }


  public void setSourceIpAddress(String sourceIpAddress) {
    this.sourceIpAddress = sourceIpAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantTestRequestAgentsInner instantTestRequestAgentsInner = (InstantTestRequestAgentsInner) o;
    return Objects.equals(this.agentId, instantTestRequestAgentsInner.agentId) &&
        Objects.equals(this.sourceIpAddress, instantTestRequestAgentsInner.sourceIpAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, sourceIpAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantTestRequestAgentsInner {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    sourceIpAddress: ").append(toIndentedString(sourceIpAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentId");
    openapiFields.add("sourceIpAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InstantTestRequestAgentsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstantTestRequestAgentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstantTestRequestAgentsInner is not found in the empty JSON string", InstantTestRequestAgentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstantTestRequestAgentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstantTestRequestAgentsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentId") != null && !jsonObj.get("agentId").isJsonNull()) && !jsonObj.get("agentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentId").toString()));
      }
      if ((jsonObj.get("sourceIpAddress") != null && !jsonObj.get("sourceIpAddress").isJsonNull()) && !jsonObj.get("sourceIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIpAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstantTestRequestAgentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstantTestRequestAgentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstantTestRequestAgentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstantTestRequestAgentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<InstantTestRequestAgentsInner>() {
           @Override
           public void write(JsonWriter out, InstantTestRequestAgentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstantTestRequestAgentsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstantTestRequestAgentsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstantTestRequestAgentsInner
  * @throws IOException if the JSON string is invalid with respect to InstantTestRequestAgentsInner
  */
  public static InstantTestRequestAgentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstantTestRequestAgentsInner.class);
  }

 /**
  * Convert an instance of InstantTestRequestAgentsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

