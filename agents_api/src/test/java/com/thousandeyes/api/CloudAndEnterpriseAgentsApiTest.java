/*
 * Agents API
 *  ## Overview Manage all agents available to your account in ThousandEyes, including both Cloud and Enterprise Agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api;

import com.thousandeyes.ApiException;
import com.thousandeyes.api.model.AgentDetailsExpand;
import com.thousandeyes.api.model.AgentListExpand;
import com.thousandeyes.api.model.CloudEnterpriseAgentType;
import com.thousandeyes.api.model.EnterpriseAgentRequestBody;
import com.thousandeyes.api.model.Error;
import com.thousandeyes.api.model.GetAgentDetails200Response;
import com.thousandeyes.api.model.GetAgents200Response;
import com.thousandeyes.api.model.UnauthorizedError;
import com.thousandeyes.api.model.UpdateEnterpriseAgentDetails200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudAndEnterpriseAgentsApi
 */
@Disabled
public class CloudAndEnterpriseAgentsApiTest {

    private final CloudAndEnterpriseAgentsApi api = new CloudAndEnterpriseAgentsApi();

    /**
     * Delete Enterprise Agent
     *
     * Deletes an Enterprise Agent.  Important notes related to agent removal: * If an agent is deleted, the modification date for tests using that agent at the time it was deleted will be changed. * If a deleted agent is the final remaining agent on a test, then the test will be disabled when the agent is removed. * If an agent is removed, it must be re-initialized to use the same machine again in different context. Virtual Appliances can be updated using the Reset State button in the Advanced tab of the agent management interface. Users running packaged versions of Linux will need to remove /var/lib/te-agent/\\*.sqlite in order to reinitialize an agent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnterpriseAgentTest() throws ApiException {
        String agentId = null;
        String aid = null;
        api.deleteEnterpriseAgent(agentId, aid);
        // TODO: test validations
    }

    /**
     * Retrieve Cloud and Enterprise Agent
     *
     * Returns details for an agent, including assigned tests.  For Enterprise Agents, this endpoint returns additional details, including utilization data, assigned accounts, a list of account groups the agent is assigned to, and utilization details. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAgentDetailsTest() throws ApiException {
        String agentId = null;
        String aid = null;
        List<AgentDetailsExpand> expand = null;
        GetAgentDetails200Response response = api.getAgentDetails(agentId, aid, expand);
        // TODO: test validations
    }

    /**
     * List Cloud and Enterprise Agents
     *
     * Returns a list of all agents available to your ThousandEyes account, including both Enterprise and Cloud Agents.  If an agent is an Enterprise Agent, this endpoint returns the agentâ€™s public and private IP addresses, as well as the public network where the agent is located. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAgentsTest() throws ApiException {
        String aid = null;
        List<AgentListExpand> expand = null;
        List<CloudEnterpriseAgentType> agentTypes = null;
        GetAgents200Response response = api.getAgents(aid, expand, agentTypes);
        // TODO: test validations
    }

    /**
     * Update Enterprise Agent
     *
     * Updates details for an Enterprise Agent. This endpoint can only be used for Enterprise Agents, and only for users in a role that permits modification of Enterprise Agents.  Important notes related to agent modification on tests: * if an agent is removed from a test, the modification date for tests using that agent at the time it was removed will be changed. * If an agent is removed from an entire account group, then all tests using this agent in the removed account group will be updated to reflect the removed agent. * If a removed agent is the final remaining agent on a test, then the test will be disabled when the agent is removed.  Users can update the following fields: * &#x60;agentName&#x60;: String representation of an agent. No two agents can have the same display name. * &#x60;enabled&#x60;: Boolean representation of agent state. * &#x60;accountGroups&#x60;: An array of account group ids. See &#x60;v7/account-groups&#x60; to pull a list of account IDs. * &#x60;tests&#x60;: An array of test Is. See &#x60;v7/tests&#x60; to retrieve a list tests available in the current account context. * &#x60;ipv6Policy&#x60;: Enum representation of the IP version policy. * &#x60;keepBrowserCache&#x60;: Boolean representation of the Keep browser cache state. * &#x60;targetForTests&#x60;: String representation of the target IP address or domain name. This represents the test destination when agent is acting as a test target in an agent-to-agent test. * &#x60;localResolutionPrefixes&#x60;: This array of strings represents the public IP ranges where the Enterprise Agent performs rDNS (Reverse DNS) lookups. The range should be in CIDR notation, such as &#x60;10.1.1.0/24&#x60;. Please note that a maximum of 5 prefixes is allowed. This only applies to Enterprise Agents and Enterprise Agent clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnterpriseAgentDetailsTest() throws ApiException {
        String agentId = null;
        EnterpriseAgentRequestBody enterpriseAgentRequestBody = null;
        String aid = null;
        List<AgentDetailsExpand> expand = null;
        UpdateEnterpriseAgentDetails200Response response = api.updateEnterpriseAgentDetails(agentId, enterpriseAgentRequestBody, aid, expand);
        // TODO: test validations
    }

}
