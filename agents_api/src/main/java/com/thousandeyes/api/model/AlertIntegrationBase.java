/*
 * Agents API
 *  ## Overview Manage all agents available to your account in ThousandEyes, including both Cloud and Enterprise Agents.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AlertIntegrationType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * AlertIntegrationBase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:12.244629Z[Europe/London]")
public class AlertIntegrationBase {
  public static final String SERIALIZED_NAME_INTEGRATION_ID = "integrationId";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
  private String integrationId;

  public static final String SERIALIZED_NAME_INTEGRATION_NAME = "integrationName";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_NAME)
  private String integrationName;

  public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "integrationType";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
  private AlertIntegrationType integrationType;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_AUTH_METHOD = "authMethod";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD)
  private String authMethod;

  public static final String SERIALIZED_NAME_AUTH_USER = "authUser";
  @SerializedName(SERIALIZED_NAME_AUTH_USER)
  private String authUser;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "authToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public AlertIntegrationBase() {
  }

  public AlertIntegrationBase integrationId(String integrationId) {
    
    this.integrationId = integrationId;
    return this;
  }

   /**
   * Unique ID of the integration.
   * @return integrationId
  **/
  @javax.annotation.Nullable
  public String getIntegrationId() {
    return integrationId;
  }


  public void setIntegrationId(String integrationId) {
    this.integrationId = integrationId;
  }


  public AlertIntegrationBase integrationName(String integrationName) {
    
    this.integrationName = integrationName;
    return this;
  }

   /**
   * Name of the integration.
   * @return integrationName
  **/
  @javax.annotation.Nullable
  public String getIntegrationName() {
    return integrationName;
  }


  public void setIntegrationName(String integrationName) {
    this.integrationName = integrationName;
  }


  public AlertIntegrationBase integrationType(AlertIntegrationType integrationType) {
    
    this.integrationType = integrationType;
    return this;
  }

   /**
   * Get integrationType
   * @return integrationType
  **/
  @javax.annotation.Nullable
  public AlertIntegrationType getIntegrationType() {
    return integrationType;
  }


  public void setIntegrationType(AlertIntegrationType integrationType) {
    this.integrationType = integrationType;
  }


  public AlertIntegrationBase target(String target) {
    
    this.target = target;
    return this;
  }

   /**
   * Target URL of the integration.
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }


  public void setTarget(String target) {
    this.target = target;
  }


  public AlertIntegrationBase authMethod(String authMethod) {
    
    this.authMethod = authMethod;
    return this;
  }

   /**
   * (PagerDuty only) Authentication method.
   * @return authMethod
  **/
  @javax.annotation.Nullable
  public String getAuthMethod() {
    return authMethod;
  }


  public void setAuthMethod(String authMethod) {
    this.authMethod = authMethod;
  }


  public AlertIntegrationBase authUser(String authUser) {
    
    this.authUser = authUser;
    return this;
  }

   /**
   * (PagerDuty only) Authentication user.
   * @return authUser
  **/
  @javax.annotation.Nullable
  public String getAuthUser() {
    return authUser;
  }


  public void setAuthUser(String authUser) {
    this.authUser = authUser;
  }


  public AlertIntegrationBase authToken(String authToken) {
    
    this.authToken = authToken;
    return this;
  }

   /**
   * (PagerDuty only) Authentication token.
   * @return authToken
  **/
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }


  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public AlertIntegrationBase channel(String channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * (Slack only) Slack &#x60;#channel&#x60; or &#x60;@user&#x60;.
   * @return channel
  **/
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }


  public void setChannel(String channel) {
    this.channel = channel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertIntegrationBase alertIntegrationBase = (AlertIntegrationBase) o;
    return Objects.equals(this.integrationId, alertIntegrationBase.integrationId) &&
        Objects.equals(this.integrationName, alertIntegrationBase.integrationName) &&
        Objects.equals(this.integrationType, alertIntegrationBase.integrationType) &&
        Objects.equals(this.target, alertIntegrationBase.target) &&
        Objects.equals(this.authMethod, alertIntegrationBase.authMethod) &&
        Objects.equals(this.authUser, alertIntegrationBase.authUser) &&
        Objects.equals(this.authToken, alertIntegrationBase.authToken) &&
        Objects.equals(this.channel, alertIntegrationBase.channel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationId, integrationName, integrationType, target, authMethod, authUser, authToken, channel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertIntegrationBase {\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    integrationName: ").append(toIndentedString(integrationName)).append("\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    authMethod: ").append(toIndentedString(authMethod)).append("\n");
    sb.append("    authUser: ").append(toIndentedString(authUser)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("integrationId");
    openapiFields.add("integrationName");
    openapiFields.add("integrationType");
    openapiFields.add("target");
    openapiFields.add("authMethod");
    openapiFields.add("authUser");
    openapiFields.add("authToken");
    openapiFields.add("channel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AlertIntegrationBase
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertIntegrationBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertIntegrationBase is not found in the empty JSON string", AlertIntegrationBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertIntegrationBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertIntegrationBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("integrationId") != null && !jsonObj.get("integrationId").isJsonNull()) && !jsonObj.get("integrationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationId").toString()));
      }
      if ((jsonObj.get("integrationName") != null && !jsonObj.get("integrationName").isJsonNull()) && !jsonObj.get("integrationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationName").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("authMethod") != null && !jsonObj.get("authMethod").isJsonNull()) && !jsonObj.get("authMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authMethod").toString()));
      }
      if ((jsonObj.get("authUser") != null && !jsonObj.get("authUser").isJsonNull()) && !jsonObj.get("authUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authUser").toString()));
      }
      if ((jsonObj.get("authToken") != null && !jsonObj.get("authToken").isJsonNull()) && !jsonObj.get("authToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authToken").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertIntegrationBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertIntegrationBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertIntegrationBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertIntegrationBase.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertIntegrationBase>() {
           @Override
           public void write(JsonWriter out, AlertIntegrationBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertIntegrationBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlertIntegrationBase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlertIntegrationBase
  * @throws IOException if the JSON string is invalid with respect to AlertIntegrationBase
  */
  public static AlertIntegrationBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertIntegrationBase.class);
  }

 /**
  * Convert an instance of AlertIntegrationBase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

