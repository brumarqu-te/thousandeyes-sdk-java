/*
 * Tests API
 *  ### Overview This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AlertRoundsViolationMode;
import com.thousandeyes.api.model.AlertType;
import com.thousandeyes.api.model.TestDirection;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * AlertRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-30T09:45:15.741232Z[Europe/London]")
public class AlertRule {
  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private TestDirection direction = TestDirection.TO_TARGET;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_ALERT_TYPE = "alertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private AlertType alertType;

  public static final String SERIALIZED_NAME_MINIMUM_SOURCES = "minimumSources";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SOURCES)
  private Integer minimumSources;

  public static final String SERIALIZED_NAME_MINIMUM_SOURCES_PCT = "minimumSourcesPct";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SOURCES_PCT)
  private Integer minimumSourcesPct;

  public static final String SERIALIZED_NAME_ROUNDS_VIOLATING_MODE = "roundsViolatingMode";
  @SerializedName(SERIALIZED_NAME_ROUNDS_VIOLATING_MODE)
  private AlertRoundsViolationMode roundsViolatingMode;

  public static final String SERIALIZED_NAME_ROUNDS_VIOLATING_OUT_OF = "roundsViolatingOutOf";
  @SerializedName(SERIALIZED_NAME_ROUNDS_VIOLATING_OUT_OF)
  private Integer roundsViolatingOutOf;

  public static final String SERIALIZED_NAME_ROUNDS_VIOLATING_REQUIRED = "roundsViolatingRequired";
  @SerializedName(SERIALIZED_NAME_ROUNDS_VIOLATING_REQUIRED)
  private Integer roundsViolatingRequired;

  public AlertRule() {
  }

  
  public AlertRule(
     String ruleId, 
     String ruleName, 
     String expression, 
     Boolean isDefault, 
     Integer minimumSources, 
     Integer minimumSourcesPct, 
     Integer roundsViolatingOutOf, 
     Integer roundsViolatingRequired
  ) {
    this();
    this.ruleId = ruleId;
    this.ruleName = ruleName;
    this.expression = expression;
    this.isDefault = isDefault;
    this.minimumSources = minimumSources;
    this.minimumSourcesPct = minimumSourcesPct;
    this.roundsViolatingOutOf = roundsViolatingOutOf;
    this.roundsViolatingRequired = roundsViolatingRequired;
  }

   /**
   * Unique ID of the rule
   * @return ruleId
  **/
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }




   /**
   * Name of the alert rule
   * @return ruleName
  **/
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }




   /**
   * String expression of alert rule
   * @return expression
  **/
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }




  public AlertRule direction(TestDirection direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  public TestDirection getDirection() {
    return direction;
  }


  public void setDirection(TestDirection direction) {
    this.direction = direction;
  }


   /**
   * Alert rules allow up to 1 alert rule to be selected as a default for each type. By checking the default option, this alert rule will be automatically included on subsequently created tests that test a metric used in alerting here
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }




  public AlertRule alertType(AlertType alertType) {
    
    this.alertType = alertType;
    return this;
  }

   /**
   * Get alertType
   * @return alertType
  **/
  @javax.annotation.Nullable
  public AlertType getAlertType() {
    return alertType;
  }


  public void setAlertType(AlertType alertType) {
    this.alertType = alertType;
  }


   /**
   * The minimum number of agents or monitors that must meet the specified criteria in order to trigger the alert
   * @return minimumSources
  **/
  @javax.annotation.Nullable
  public Integer getMinimumSources() {
    return minimumSources;
  }




   /**
   * the minimum percentage of all assigned agents or monitors that must meet the specified criteria in order to trigger the alert
   * @return minimumSourcesPct
  **/
  @javax.annotation.Nullable
  public Integer getMinimumSourcesPct() {
    return minimumSourcesPct;
  }




  public AlertRule roundsViolatingMode(AlertRoundsViolationMode roundsViolatingMode) {
    
    this.roundsViolatingMode = roundsViolatingMode;
    return this;
  }

   /**
   * Get roundsViolatingMode
   * @return roundsViolatingMode
  **/
  @javax.annotation.Nullable
  public AlertRoundsViolationMode getRoundsViolatingMode() {
    return roundsViolatingMode;
  }


  public void setRoundsViolatingMode(AlertRoundsViolationMode roundsViolatingMode) {
    this.roundsViolatingMode = roundsViolatingMode;
  }


   /**
   * Specifies the divisor (y value) for the “X of Y times” condition.
   * @return roundsViolatingOutOf
  **/
  @javax.annotation.Nullable
  public Integer getRoundsViolatingOutOf() {
    return roundsViolatingOutOf;
  }




   /**
   * Specifies the numerator (x value) for the “X of Y times” condition
   * @return roundsViolatingRequired
  **/
  @javax.annotation.Nullable
  public Integer getRoundsViolatingRequired() {
    return roundsViolatingRequired;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertRule alertRule = (AlertRule) o;
    return Objects.equals(this.ruleId, alertRule.ruleId) &&
        Objects.equals(this.ruleName, alertRule.ruleName) &&
        Objects.equals(this.expression, alertRule.expression) &&
        Objects.equals(this.direction, alertRule.direction) &&
        Objects.equals(this.isDefault, alertRule.isDefault) &&
        Objects.equals(this.alertType, alertRule.alertType) &&
        Objects.equals(this.minimumSources, alertRule.minimumSources) &&
        Objects.equals(this.minimumSourcesPct, alertRule.minimumSourcesPct) &&
        Objects.equals(this.roundsViolatingMode, alertRule.roundsViolatingMode) &&
        Objects.equals(this.roundsViolatingOutOf, alertRule.roundsViolatingOutOf) &&
        Objects.equals(this.roundsViolatingRequired, alertRule.roundsViolatingRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, ruleName, expression, direction, isDefault, alertType, minimumSources, minimumSourcesPct, roundsViolatingMode, roundsViolatingOutOf, roundsViolatingRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertRule {\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    minimumSources: ").append(toIndentedString(minimumSources)).append("\n");
    sb.append("    minimumSourcesPct: ").append(toIndentedString(minimumSourcesPct)).append("\n");
    sb.append("    roundsViolatingMode: ").append(toIndentedString(roundsViolatingMode)).append("\n");
    sb.append("    roundsViolatingOutOf: ").append(toIndentedString(roundsViolatingOutOf)).append("\n");
    sb.append("    roundsViolatingRequired: ").append(toIndentedString(roundsViolatingRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleId");
    openapiFields.add("ruleName");
    openapiFields.add("expression");
    openapiFields.add("direction");
    openapiFields.add("isDefault");
    openapiFields.add("alertType");
    openapiFields.add("minimumSources");
    openapiFields.add("minimumSourcesPct");
    openapiFields.add("roundsViolatingMode");
    openapiFields.add("roundsViolatingOutOf");
    openapiFields.add("roundsViolatingRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AlertRule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertRule is not found in the empty JSON string", AlertRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if ((jsonObj.get("ruleName") != null && !jsonObj.get("ruleName").isJsonNull()) && !jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertRule>() {
           @Override
           public void write(JsonWriter out, AlertRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlertRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlertRule
  * @throws IOException if the JSON string is invalid with respect to AlertRule
  */
  public static AlertRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertRule.class);
  }

 /**
  * Convert an instance of AlertRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

