/*
 * Administrative API
 * Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API. This API provides the following operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These operations can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.    For more information about the administrative models, see [Account Management](https://docs.thousandeyes.com/product-documentation/user-management).
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.sdk.account.management.administrative;

import com.thousandeyes.sdk.account.management.administrative.model.Error;
import com.thousandeyes.sdk.account.management.administrative.model.RoleDetail;
import com.thousandeyes.sdk.account.management.administrative.model.RoleRequestBody;
import com.thousandeyes.sdk.account.management.administrative.model.Roles;
import java.net.URI;
import com.thousandeyes.sdk.account.management.administrative.model.UnauthorizedError;
import com.thousandeyes.sdk.account.management.administrative.model.ValidationError;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.common.ContentTypes.AUTHORIZATION;
import static com.github.tomakehurst.wiremock.common.ContentTypes.CONTENT_TYPE;
import static com.thousandeyes.sdk.serialization.JSON.getDefault;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.core.JsonProcessingException;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
import com.github.tomakehurst.wiremock.junit5.WireMockTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.sdk.client.ApiClient;
import com.thousandeyes.sdk.client.ApiException;
import com.thousandeyes.sdk.client.NativeApiClient;


/**
 * Request and Response model deserialization tests for RolesApi
 */
@WireMockTest
public class RolesApiTest {
    private static final String TOKEN = "valid-token";
    private static final String BEARER_TOKEN = "Bearer %s".formatted(TOKEN);
    private static RolesApi api;
    private final ObjectMapper mapper = getDefault()
            .getMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

    @BeforeAll
    public static void setup(WireMockRuntimeInfo wireMockRuntimeInfo) {
        ApiClient client = NativeApiClient.builder()
                                .baseUri(wireMockRuntimeInfo.getHttpBaseUrl())
                                .bearerToken(TOKEN)
                                .build();
        api = new RolesApi(client);
    }
    
    /**
     * Create role
     * <p>
     * Creates a new role.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void createRoleRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {

        var requestBodyJson = """
                {
                  "permissions" : [ "56", "315" ],
                  "name" : "Organization Admin"
                }
                                 """;
        var requestBodyContentType = "application/json";
        RoleRequestBody mappedRequest = 
                mapper.readValue(requestBodyJson, RoleRequestBody.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "roleId" : "35",
                  "permissions" : [ {
                    "label" : "View reports",
                    "permissionId" : "1",
                    "isManagementPermission" : true,
                    "permission" : "REPORT_READ"
                  }, {
                    "label" : "View snapshots",
                    "permissionId" : "51",
                    "isManagementPermission" : false,
                    "permission" : "REPORT_SNAPSHOTS_READ"
                  } ],
                  "name" : "Organization Admin",
                  "isBuiltin" : true
                }
                                  """;
        var statusCode = 201;
        var responseContentType = "application/json";
        RoleDetail mappedResponse = 
                mapper.readValue(responseBodyJson, RoleDetail.class);
        assertNotNull(mappedResponse);

        var path = "/roles";
        stubFor(post(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.createRole(mappedRequest, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Delete role
     * <p>
     * Deletes a role using its ID. The user needs appropriate permissions to successfully call this operation.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void deleteRoleRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "23";


        var statusCode = 204;

        var path = "/roles/{id}";
        stubFor(delete(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withStatus(statusCode)));

        var apiResponse = api.deleteRoleWithHttpInfo(id, null);
        assertEquals(statusCode, apiResponse.getStatusCode());
    }
    
    /**
     * Retrieve role
     * <p>
     * Returns detailed information about a role using its ID.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getRoleRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "23";


        var responseBodyJson = """
                {
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "roleId" : "35",
                  "permissions" : [ {
                    "label" : "View reports",
                    "permissionId" : "1",
                    "isManagementPermission" : true,
                    "permission" : "REPORT_READ"
                  }, {
                    "label" : "View snapshots",
                    "permissionId" : "51",
                    "isManagementPermission" : false,
                    "permission" : "REPORT_SNAPSHOTS_READ"
                  } ],
                  "name" : "Organization Admin",
                  "isBuiltin" : true
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        RoleDetail mappedResponse = 
                mapper.readValue(responseBodyJson, RoleDetail.class);
        assertNotNull(mappedResponse);

        var path = "/roles/{id}";
        stubFor(get(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getRole(id, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * List roles
     * <p>
     * Retrieves a list of defined roles visible to the current user.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void getRolesRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {


        var responseBodyJson = """
                {
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "roles" : [ {
                    "roleId" : "35",
                    "name" : "Organization Admin",
                    "isBuiltin" : true,
                    "hasManagementPermissions" : true
                  }, {
                    "roleId" : "35",
                    "name" : "Organization Admin",
                    "isBuiltin" : true,
                    "hasManagementPermissions" : true
                  } ]
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        Roles mappedResponse = 
                mapper.readValue(responseBodyJson, Roles.class);
        assertNotNull(mappedResponse);

        var path = "/roles";
        stubFor(get(urlPathTemplate(path))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.getRoles(null);
        assertEquals(mappedResponse, apiResponse);
    }
    
    /**
     * Update role
     * <p>
     * Updates a user-defined role using its ID.  When updating a role, the following applies:  * The full list of permissions must be sent, This operation does not support delta-based grant or revoking of permissions.  * Permission definitions and details can be obtained from the Permissions operation.
     *
     * @throws JsonProcessingException if the deserialization fails
     */
    @Test
    public void updateRoleRequestAndResponseDeserializationTest()
            throws JsonProcessingException, ApiException
    {
        String id = "23";

        var requestBodyJson = """
                {
                  "permissions" : [ "56", "315" ],
                  "name" : "Organization Admin"
                }
                                 """;
        var requestBodyContentType = "application/json";
        RoleRequestBody mappedRequest = 
                mapper.readValue(requestBodyJson, RoleRequestBody.class);
        assertNotNull(mappedRequest);

        var responseBodyJson = """
                {
                  "_links" : {
                    "self" : {
                      "hreflang" : "hreflang",
                      "templated" : true,
                      "profile" : "profile",
                      "name" : "name",
                      "href" : "https://api.thousandeyes.com/v7/link/to/resource/id",
                      "type" : "type",
                      "deprecation" : "deprecation",
                      "title" : "title"
                    }
                  },
                  "roleId" : "35",
                  "permissions" : [ {
                    "label" : "View reports",
                    "permissionId" : "1",
                    "isManagementPermission" : true,
                    "permission" : "REPORT_READ"
                  }, {
                    "label" : "View snapshots",
                    "permissionId" : "51",
                    "isManagementPermission" : false,
                    "permission" : "REPORT_SNAPSHOTS_READ"
                  } ],
                  "name" : "Organization Admin",
                  "isBuiltin" : true
                }
                                  """;
        var statusCode = 200;
        var responseContentType = "application/json";
        RoleDetail mappedResponse = 
                mapper.readValue(responseBodyJson, RoleDetail.class);
        assertNotNull(mappedResponse);

        var path = "/roles/{id}";
        stubFor(put(urlPathTemplate(path))
                        .withPathParam("id", equalTo(URLEncoder.encode(id, StandardCharsets.UTF_8)))
                        .withHeader(AUTHORIZATION, equalTo(BEARER_TOKEN))
                        .withHeader(CONTENT_TYPE, equalTo(requestBodyContentType))
                        .withRequestBody(equalToJson(requestBodyJson))
                        .willReturn(aResponse()
                                            .withHeader(CONTENT_TYPE, responseContentType)
                                            .withBody(responseBodyJson)
                                            .withStatus(statusCode)));

        var apiResponse = api.updateRole(id, mappedRequest, null);
        assertEquals(mappedResponse, apiResponse);
    }
    
}
