/*
 * Alerts API
 *  ## Overview Manage all alerts, alert rules and alert suppression windows.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AlertRoundsViolationMode;
import com.thousandeyes.api.model.AlertType;
import com.thousandeyes.api.model.BaseTest;
import com.thousandeyes.api.model.Notification;
import com.thousandeyes.api.model.SelfLinksLinks;
import com.thousandeyes.api.model.Severity;
import com.thousandeyes.api.model.TestDirection;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * GetAlertRuleDetails200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:23.082356Z[Europe/London]")
public class GetAlertRuleDetails200Response {
  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private TestDirection direction = TestDirection.TO_TARGET;

  public static final String SERIALIZED_NAME_NOTIFY_ON_CLEAR = "notifyOnClear";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_CLEAR)
  private Boolean notifyOnClear;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_ALERT_TYPE = "alertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private AlertType alertType;

  public static final String SERIALIZED_NAME_MINIMUM_SOURCES = "minimumSources";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SOURCES)
  private Integer minimumSources;

  public static final String SERIALIZED_NAME_MINIMUM_SOURCES_PCT = "minimumSourcesPct";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SOURCES_PCT)
  private Integer minimumSourcesPct;

  public static final String SERIALIZED_NAME_ROUNDS_VIOLATING_MODE = "roundsViolatingMode";
  @SerializedName(SERIALIZED_NAME_ROUNDS_VIOLATING_MODE)
  private AlertRoundsViolationMode roundsViolatingMode;

  public static final String SERIALIZED_NAME_ROUNDS_VIOLATING_OUT_OF = "roundsViolatingOutOf";
  @SerializedName(SERIALIZED_NAME_ROUNDS_VIOLATING_OUT_OF)
  private Integer roundsViolatingOutOf;

  public static final String SERIALIZED_NAME_ROUNDS_VIOLATING_REQUIRED = "roundsViolatingRequired";
  @SerializedName(SERIALIZED_NAME_ROUNDS_VIOLATING_REQUIRED)
  private Integer roundsViolatingRequired;

  public static final String SERIALIZED_NAME_INCLUDE_COVERED_PREFIXES = "includeCoveredPrefixes";
  @SerializedName(SERIALIZED_NAME_INCLUDE_COVERED_PREFIXES)
  private Boolean includeCoveredPrefixes;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Severity severity;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private Notification notifications;

  public static final String SERIALIZED_NAME_TESTS = "tests";
  @SerializedName(SERIALIZED_NAME_TESTS)
  private List<BaseTest> tests;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private SelfLinksLinks links;

  public GetAlertRuleDetails200Response() {
  }

  
  public GetAlertRuleDetails200Response(
     String ruleId, 
     List<BaseTest> tests
  ) {
    this();
    this.ruleId = ruleId;
    this.tests = tests;
  }

   /**
   * Unique ID of the rule.
   * @return ruleId
  **/
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }




  public GetAlertRuleDetails200Response ruleName(String ruleName) {
    
    this.ruleName = ruleName;
    return this;
  }

   /**
   * Name of the alert rule.
   * @return ruleName
  **/
  @javax.annotation.Nonnull
  public String getRuleName() {
    return ruleName;
  }


  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public GetAlertRuleDetails200Response expression(String expression) {
    
    this.expression = expression;
    return this;
  }

   /**
   * The expression of the alert rule.
   * @return expression
  **/
  @javax.annotation.Nonnull
  public String getExpression() {
    return expression;
  }


  public void setExpression(String expression) {
    this.expression = expression;
  }


  public GetAlertRuleDetails200Response direction(TestDirection direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  public TestDirection getDirection() {
    return direction;
  }


  public void setDirection(TestDirection direction) {
    this.direction = direction;
  }


  public GetAlertRuleDetails200Response notifyOnClear(Boolean notifyOnClear) {
    
    this.notifyOnClear = notifyOnClear;
    return this;
  }

   /**
   * Send notification when alert clears.
   * @return notifyOnClear
  **/
  @javax.annotation.Nullable
  public Boolean getNotifyOnClear() {
    return notifyOnClear;
  }


  public void setNotifyOnClear(Boolean notifyOnClear) {
    this.notifyOnClear = notifyOnClear;
  }


  public GetAlertRuleDetails200Response isDefault(Boolean isDefault) {
    
    this.isDefault = isDefault;
    return this;
  }

   /**
   * If set to &#x60;true&#x60;, this alert rule becomes the default for its test type and is automatically applied to newly created tests with relevant metrics. Only one default alert rule is allowed per test type.
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public GetAlertRuleDetails200Response alertType(AlertType alertType) {
    
    this.alertType = alertType;
    return this;
  }

   /**
   * Get alertType
   * @return alertType
  **/
  @javax.annotation.Nonnull
  public AlertType getAlertType() {
    return alertType;
  }


  public void setAlertType(AlertType alertType) {
    this.alertType = alertType;
  }


  public GetAlertRuleDetails200Response minimumSources(Integer minimumSources) {
    
    this.minimumSources = minimumSources;
    return this;
  }

   /**
   * The minimum number of agents or monitors that must meet the specified criteria to trigger the alert.
   * @return minimumSources
  **/
  @javax.annotation.Nullable
  public Integer getMinimumSources() {
    return minimumSources;
  }


  public void setMinimumSources(Integer minimumSources) {
    this.minimumSources = minimumSources;
  }


  public GetAlertRuleDetails200Response minimumSourcesPct(Integer minimumSourcesPct) {
    
    this.minimumSourcesPct = minimumSourcesPct;
    return this;
  }

   /**
   * The minimum percentage of all assigned agents or monitors that must meet the specified criteria to trigger the alert.
   * @return minimumSourcesPct
  **/
  @javax.annotation.Nullable
  public Integer getMinimumSourcesPct() {
    return minimumSourcesPct;
  }


  public void setMinimumSourcesPct(Integer minimumSourcesPct) {
    this.minimumSourcesPct = minimumSourcesPct;
  }


  public GetAlertRuleDetails200Response roundsViolatingMode(AlertRoundsViolationMode roundsViolatingMode) {
    
    this.roundsViolatingMode = roundsViolatingMode;
    return this;
  }

   /**
   * Get roundsViolatingMode
   * @return roundsViolatingMode
  **/
  @javax.annotation.Nullable
  public AlertRoundsViolationMode getRoundsViolatingMode() {
    return roundsViolatingMode;
  }


  public void setRoundsViolatingMode(AlertRoundsViolationMode roundsViolatingMode) {
    this.roundsViolatingMode = roundsViolatingMode;
  }


  public GetAlertRuleDetails200Response roundsViolatingOutOf(Integer roundsViolatingOutOf) {
    
    this.roundsViolatingOutOf = roundsViolatingOutOf;
    return this;
  }

   /**
   * Specifies the divisor (y value) in the “X of Y times” condition.
   * @return roundsViolatingOutOf
  **/
  @javax.annotation.Nonnull
  public Integer getRoundsViolatingOutOf() {
    return roundsViolatingOutOf;
  }


  public void setRoundsViolatingOutOf(Integer roundsViolatingOutOf) {
    this.roundsViolatingOutOf = roundsViolatingOutOf;
  }


  public GetAlertRuleDetails200Response roundsViolatingRequired(Integer roundsViolatingRequired) {
    
    this.roundsViolatingRequired = roundsViolatingRequired;
    return this;
  }

   /**
   * Specifies the numerator (x value) in the “X of Y times” condition.
   * @return roundsViolatingRequired
  **/
  @javax.annotation.Nonnull
  public Integer getRoundsViolatingRequired() {
    return roundsViolatingRequired;
  }


  public void setRoundsViolatingRequired(Integer roundsViolatingRequired) {
    this.roundsViolatingRequired = roundsViolatingRequired;
  }


  public GetAlertRuleDetails200Response includeCoveredPrefixes(Boolean includeCoveredPrefixes) {
    
    this.includeCoveredPrefixes = includeCoveredPrefixes;
    return this;
  }

   /**
   * Set true to include covered prefixes in the BGP alert rule. Only applicable to BGP alert rules.
   * @return includeCoveredPrefixes
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeCoveredPrefixes() {
    return includeCoveredPrefixes;
  }


  public void setIncludeCoveredPrefixes(Boolean includeCoveredPrefixes) {
    this.includeCoveredPrefixes = includeCoveredPrefixes;
  }


  public GetAlertRuleDetails200Response severity(Severity severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @javax.annotation.Nullable
  public Severity getSeverity() {
    return severity;
  }


  public void setSeverity(Severity severity) {
    this.severity = severity;
  }


  public GetAlertRuleDetails200Response notifications(Notification notifications) {
    
    this.notifications = notifications;
    return this;
  }

   /**
   * Get notifications
   * @return notifications
  **/
  @javax.annotation.Nullable
  public Notification getNotifications() {
    return notifications;
  }


  public void setNotifications(Notification notifications) {
    this.notifications = notifications;
  }


   /**
   * Get tests
   * @return tests
  **/
  @javax.annotation.Nullable
  public List<BaseTest> getTests() {
    return tests;
  }




  public GetAlertRuleDetails200Response links(SelfLinksLinks links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public SelfLinksLinks getLinks() {
    return links;
  }


  public void setLinks(SelfLinksLinks links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAlertRuleDetails200Response getAlertRuleDetails200Response = (GetAlertRuleDetails200Response) o;
    return Objects.equals(this.ruleId, getAlertRuleDetails200Response.ruleId) &&
        Objects.equals(this.ruleName, getAlertRuleDetails200Response.ruleName) &&
        Objects.equals(this.expression, getAlertRuleDetails200Response.expression) &&
        Objects.equals(this.direction, getAlertRuleDetails200Response.direction) &&
        Objects.equals(this.notifyOnClear, getAlertRuleDetails200Response.notifyOnClear) &&
        Objects.equals(this.isDefault, getAlertRuleDetails200Response.isDefault) &&
        Objects.equals(this.alertType, getAlertRuleDetails200Response.alertType) &&
        Objects.equals(this.minimumSources, getAlertRuleDetails200Response.minimumSources) &&
        Objects.equals(this.minimumSourcesPct, getAlertRuleDetails200Response.minimumSourcesPct) &&
        Objects.equals(this.roundsViolatingMode, getAlertRuleDetails200Response.roundsViolatingMode) &&
        Objects.equals(this.roundsViolatingOutOf, getAlertRuleDetails200Response.roundsViolatingOutOf) &&
        Objects.equals(this.roundsViolatingRequired, getAlertRuleDetails200Response.roundsViolatingRequired) &&
        Objects.equals(this.includeCoveredPrefixes, getAlertRuleDetails200Response.includeCoveredPrefixes) &&
        Objects.equals(this.severity, getAlertRuleDetails200Response.severity) &&
        Objects.equals(this.notifications, getAlertRuleDetails200Response.notifications) &&
        Objects.equals(this.tests, getAlertRuleDetails200Response.tests) &&
        Objects.equals(this.links, getAlertRuleDetails200Response.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleId, ruleName, expression, direction, notifyOnClear, isDefault, alertType, minimumSources, minimumSourcesPct, roundsViolatingMode, roundsViolatingOutOf, roundsViolatingRequired, includeCoveredPrefixes, severity, notifications, tests, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAlertRuleDetails200Response {\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    notifyOnClear: ").append(toIndentedString(notifyOnClear)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    minimumSources: ").append(toIndentedString(minimumSources)).append("\n");
    sb.append("    minimumSourcesPct: ").append(toIndentedString(minimumSourcesPct)).append("\n");
    sb.append("    roundsViolatingMode: ").append(toIndentedString(roundsViolatingMode)).append("\n");
    sb.append("    roundsViolatingOutOf: ").append(toIndentedString(roundsViolatingOutOf)).append("\n");
    sb.append("    roundsViolatingRequired: ").append(toIndentedString(roundsViolatingRequired)).append("\n");
    sb.append("    includeCoveredPrefixes: ").append(toIndentedString(includeCoveredPrefixes)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ruleId");
    openapiFields.add("ruleName");
    openapiFields.add("expression");
    openapiFields.add("direction");
    openapiFields.add("notifyOnClear");
    openapiFields.add("isDefault");
    openapiFields.add("alertType");
    openapiFields.add("minimumSources");
    openapiFields.add("minimumSourcesPct");
    openapiFields.add("roundsViolatingMode");
    openapiFields.add("roundsViolatingOutOf");
    openapiFields.add("roundsViolatingRequired");
    openapiFields.add("includeCoveredPrefixes");
    openapiFields.add("severity");
    openapiFields.add("notifications");
    openapiFields.add("tests");
    openapiFields.add("_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleName");
    openapiRequiredFields.add("expression");
    openapiRequiredFields.add("alertType");
    openapiRequiredFields.add("roundsViolatingOutOf");
    openapiRequiredFields.add("roundsViolatingRequired");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetAlertRuleDetails200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAlertRuleDetails200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAlertRuleDetails200Response is not found in the empty JSON string", GetAlertRuleDetails200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAlertRuleDetails200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAlertRuleDetails200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetAlertRuleDetails200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if (!jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
      if (!jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      // validate the optional field `notifications`
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        Notification.validateJsonElement(jsonObj.get("notifications"));
      }
      if (jsonObj.get("tests") != null && !jsonObj.get("tests").isJsonNull()) {
        JsonArray jsonArraytests = jsonObj.getAsJsonArray("tests");
        if (jsonArraytests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tests` to be an array in the JSON string but got `%s`", jsonObj.get("tests").toString()));
          }

          // validate the optional field `tests` (array)
          for (int i = 0; i < jsonArraytests.size(); i++) {
            BaseTest.validateJsonElement(jsonArraytests.get(i));
          };
        }
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        SelfLinksLinks.validateJsonElement(jsonObj.get("_links"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAlertRuleDetails200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAlertRuleDetails200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAlertRuleDetails200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAlertRuleDetails200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAlertRuleDetails200Response>() {
           @Override
           public void write(JsonWriter out, GetAlertRuleDetails200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAlertRuleDetails200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetAlertRuleDetails200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAlertRuleDetails200Response
  * @throws IOException if the JSON string is invalid with respect to GetAlertRuleDetails200Response
  */
  public static GetAlertRuleDetails200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAlertRuleDetails200Response.class);
  }

 /**
  * Convert an instance of GetAlertRuleDetails200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

