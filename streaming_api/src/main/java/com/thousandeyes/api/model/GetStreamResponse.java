/*
 * ThousandEyes for OpenTelemetry
 *  Configure ThousandEyes to stream or push test data to a OpenTelemetry compliant endpoint with the ThousandEyes for OpenTelemetry API. 
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AuditOperationWithUpdate;
import com.thousandeyes.api.model.EndpointType;
import com.thousandeyes.api.model.PutStreamTagMatchInner;
import com.thousandeyes.api.model.StreamResponseLinks;
import com.thousandeyes.api.model.StreamType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * GetStreamResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:45.623833Z[Europe/London]")
public class GetStreamResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private StreamResponseLinks links;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private StreamType type;

  public static final String SERIALIZED_NAME_ENDPOINT_TYPE = "endpointType";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_TYPE)
  private EndpointType endpointType = EndpointType.GRPC;

  public static final String SERIALIZED_NAME_STREAM_ENDPOINT_URL = "streamEndpointUrl";
  @SerializedName(SERIALIZED_NAME_STREAM_ENDPOINT_URL)
  private String streamEndpointUrl;

  public static final String SERIALIZED_NAME_CUSTOM_HEADERS = "customHeaders";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADERS)
  private Map<String, String> customHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_TAG_MATCH = "tagMatch";
  @SerializedName(SERIALIZED_NAME_TAG_MATCH)
  private List<PutStreamTagMatchInner> tagMatch;

  public static final String SERIALIZED_NAME_AUDIT_OPERATION = "auditOperation";
  @SerializedName(SERIALIZED_NAME_AUDIT_OPERATION)
  private AuditOperationWithUpdate auditOperation;

  public GetStreamResponse() {
  }

  
  public GetStreamResponse(
     String id
  ) {
    this();
    this.id = id;
  }

   /**
   * The data stream ID
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }




  public GetStreamResponse enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Flag to enable or disable the stream integration.
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GetStreamResponse links(StreamResponseLinks links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public StreamResponseLinks getLinks() {
    return links;
  }


  public void setLinks(StreamResponseLinks links) {
    this.links = links;
  }


  public GetStreamResponse type(StreamType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public StreamType getType() {
    return type;
  }


  public void setType(StreamType type) {
    this.type = type;
  }


  public GetStreamResponse endpointType(EndpointType endpointType) {
    
    this.endpointType = endpointType;
    return this;
  }

   /**
   * Get endpointType
   * @return endpointType
  **/
  @javax.annotation.Nullable
  public EndpointType getEndpointType() {
    return endpointType;
  }


  public void setEndpointType(EndpointType endpointType) {
    this.endpointType = endpointType;
  }


  public GetStreamResponse streamEndpointUrl(String streamEndpointUrl) {
    
    this.streamEndpointUrl = streamEndpointUrl;
    return this;
  }

   /**
   * The URL ThousandEyes sends data stream to. For a URL to be valid, it needs to: - Be syntactically correct. - Be reachable. - Use the HTTPS protocol. - When using the &#x60;grpc&#x60; endpointType, streamEndpointUrl cannot contain paths:     - Valid . &#x60;grpc&#x60; - &#x60;https://example.com&#x60;     - Invalid . &#x60;grpc&#x60; - &#x60;https://example.com/collector&#x60;.     - Valid . &#x60;http&#x60; - &#x60;https://example.com/collector&#x60;.      - When using the &#x60;http&#x60; endpointType, the endpoint must match the exact final full URL (including the path if there is one) to which the metrics will be sent. Examples below:     - &#x60;https://api.honeycomb.io:443/v1/metrics&#x60;     - &#x60;https://ingest.eu0.signalfx.com/v2/datapoint/otlp&#x60;
   * @return streamEndpointUrl
  **/
  @javax.annotation.Nullable
  public String getStreamEndpointUrl() {
    return streamEndpointUrl;
  }


  public void setStreamEndpointUrl(String streamEndpointUrl) {
    this.streamEndpointUrl = streamEndpointUrl;
  }


  public GetStreamResponse customHeaders(Map<String, String> customHeaders) {
    
    this.customHeaders = customHeaders;
    return this;
  }

  public GetStreamResponse putCustomHeadersItem(String key, String customHeadersItem) {
    if (this.customHeaders == null) {
      this.customHeaders = new HashMap<>();
    }
    this.customHeaders.put(key, customHeadersItem);
    return this;
  }

   /**
   * Custom headers
   * @return customHeaders
  **/
  @javax.annotation.Nullable
  public Map<String, String> getCustomHeaders() {
    return customHeaders;
  }


  public void setCustomHeaders(Map<String, String> customHeaders) {
    this.customHeaders = customHeaders;
  }


  public GetStreamResponse tagMatch(List<PutStreamTagMatchInner> tagMatch) {
    
    this.tagMatch = tagMatch;
    return this;
  }

  public GetStreamResponse addTagMatchItem(PutStreamTagMatchInner tagMatchItem) {
    if (this.tagMatch == null) {
      this.tagMatch = new ArrayList<>();
    }
    this.tagMatch.add(tagMatchItem);
    return this;
  }

   /**
   * A collection of tags that determine what tests are included in the data stream. These tag values are also included as attributes in the data stream metrics.
   * @return tagMatch
  **/
  @javax.annotation.Nullable
  public List<PutStreamTagMatchInner> getTagMatch() {
    return tagMatch;
  }


  public void setTagMatch(List<PutStreamTagMatchInner> tagMatch) {
    this.tagMatch = tagMatch;
  }


  public GetStreamResponse auditOperation(AuditOperationWithUpdate auditOperation) {
    
    this.auditOperation = auditOperation;
    return this;
  }

   /**
   * Get auditOperation
   * @return auditOperation
  **/
  @javax.annotation.Nullable
  public AuditOperationWithUpdate getAuditOperation() {
    return auditOperation;
  }


  public void setAuditOperation(AuditOperationWithUpdate auditOperation) {
    this.auditOperation = auditOperation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetStreamResponse getStreamResponse = (GetStreamResponse) o;
    return Objects.equals(this.id, getStreamResponse.id) &&
        Objects.equals(this.enabled, getStreamResponse.enabled) &&
        Objects.equals(this.links, getStreamResponse.links) &&
        Objects.equals(this.type, getStreamResponse.type) &&
        Objects.equals(this.endpointType, getStreamResponse.endpointType) &&
        Objects.equals(this.streamEndpointUrl, getStreamResponse.streamEndpointUrl) &&
        Objects.equals(this.customHeaders, getStreamResponse.customHeaders) &&
        Objects.equals(this.tagMatch, getStreamResponse.tagMatch) &&
        Objects.equals(this.auditOperation, getStreamResponse.auditOperation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, enabled, links, type, endpointType, streamEndpointUrl, customHeaders, tagMatch, auditOperation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetStreamResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    streamEndpointUrl: ").append(toIndentedString(streamEndpointUrl)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    tagMatch: ").append(toIndentedString(tagMatch)).append("\n");
    sb.append("    auditOperation: ").append(toIndentedString(auditOperation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("enabled");
    openapiFields.add("_links");
    openapiFields.add("type");
    openapiFields.add("endpointType");
    openapiFields.add("streamEndpointUrl");
    openapiFields.add("customHeaders");
    openapiFields.add("tagMatch");
    openapiFields.add("auditOperation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetStreamResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetStreamResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetStreamResponse is not found in the empty JSON string", GetStreamResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetStreamResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetStreamResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        StreamResponseLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("streamEndpointUrl") != null && !jsonObj.get("streamEndpointUrl").isJsonNull()) && !jsonObj.get("streamEndpointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamEndpointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamEndpointUrl").toString()));
      }
      if (jsonObj.get("tagMatch") != null && !jsonObj.get("tagMatch").isJsonNull()) {
        JsonArray jsonArraytagMatch = jsonObj.getAsJsonArray("tagMatch");
        if (jsonArraytagMatch != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tagMatch").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tagMatch` to be an array in the JSON string but got `%s`", jsonObj.get("tagMatch").toString()));
          }

          // validate the optional field `tagMatch` (array)
          for (int i = 0; i < jsonArraytagMatch.size(); i++) {
            PutStreamTagMatchInner.validateJsonElement(jsonArraytagMatch.get(i));
          };
        }
      }
      // validate the optional field `auditOperation`
      if (jsonObj.get("auditOperation") != null && !jsonObj.get("auditOperation").isJsonNull()) {
        AuditOperationWithUpdate.validateJsonElement(jsonObj.get("auditOperation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetStreamResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetStreamResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetStreamResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetStreamResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetStreamResponse>() {
           @Override
           public void write(JsonWriter out, GetStreamResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetStreamResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetStreamResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetStreamResponse
  * @throws IOException if the JSON string is invalid with respect to GetStreamResponse
  */
  public static GetStreamResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetStreamResponse.class);
  }

 /**
  * Convert an instance of GetStreamResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

