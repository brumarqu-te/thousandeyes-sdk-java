/*
 * ThousandEyes for OpenTelemetry
 *  Configure ThousandEyes to stream or push test data to a OpenTelemetry compliant endpoint with the ThousandEyes for OpenTelemetry API. 
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api;

import com.thousandeyes.ApiException;
import com.thousandeyes.api.model.ApiError;
import com.thousandeyes.api.model.ApiErrorIntegrationLimits;
import com.thousandeyes.api.model.BadRequestError;
import com.thousandeyes.api.model.CreateStreamResponse;
import com.thousandeyes.api.model.GetStreamResponse;
import com.thousandeyes.api.model.PutStream;
import com.thousandeyes.api.model.Stream;
import com.thousandeyes.api.model.StreamType;
import com.thousandeyes.api.model.UnauthorizedError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamingApi
 */
@Disabled
public class StreamingApiTest {

    private final StreamingApi api = new StreamingApi();

    /**
     * Create data stream
     *
     * Creates a new data stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamTest() throws ApiException {
        String aid = null;
        Stream stream = null;
        CreateStreamResponse response = api.createStream(aid, stream);
        // TODO: test validations
    }

    /**
     * Delete a data stream
     *
     * Deletes a configured data stream using its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamTest() throws ApiException {
        String id = null;
        String aid = null;
        api.deleteStream(id, aid);
        // TODO: test validations
    }

    /**
     * Retrieve data stream
     *
     * Retrieves a configured data stream using its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamTest() throws ApiException {
        String id = null;
        String aid = null;
        StreamType type = null;
        GetStreamResponse response = api.getStream(id, aid, type);
        // TODO: test validations
    }

    /**
     * List data streams
     *
     * Retrieves a list of configured data streams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamsTest() throws ApiException {
        String aid = null;
        StreamType type = null;
        List<GetStreamResponse> response = api.getStreams(aid, type);
        // TODO: test validations
    }

    /**
     * Update data stream
     *
     * Updates a configured data stream using its ID. The fields are overwritten, not appended.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putStreamTest() throws ApiException {
        String id = null;
        String aid = null;
        PutStream putStream = null;
        GetStreamResponse response = api.putStream(id, aid, putStream);
        // TODO: test validations
    }

}
