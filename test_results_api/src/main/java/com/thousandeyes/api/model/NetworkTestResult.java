/*
 * Test Results API
 * Get test result metrics for Cloud and Enterprise Agent tests.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.Agent;
import com.thousandeyes.api.model.TestDirection;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * NetworkTestResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:31.708307Z[Europe/London]")
public class NetworkTestResult {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_ROUND_ID = "roundId";
  @SerializedName(SERIALIZED_NAME_ROUND_ID)
  private Integer roundId;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links = null;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Integer startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Integer endTime;

  public static final String SERIALIZED_NAME_AVAILABLE_BANDWIDTH = "availableBandwidth";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BANDWIDTH)
  private Double availableBandwidth;

  public static final String SERIALIZED_NAME_AVG_LATENCY = "avgLatency";
  @SerializedName(SERIALIZED_NAME_AVG_LATENCY)
  private Double avgLatency;

  public static final String SERIALIZED_NAME_BANDWIDTH = "bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  private Double bandwidth;

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Double capacity;

  public static final String SERIALIZED_NAME_JITTER = "jitter";
  @SerializedName(SERIALIZED_NAME_JITTER)
  private Double jitter;

  public static final String SERIALIZED_NAME_LOSS = "loss";
  @SerializedName(SERIALIZED_NAME_LOSS)
  private Double loss;

  public static final String SERIALIZED_NAME_MAX_LATENCY = "maxLatency";
  @SerializedName(SERIALIZED_NAME_MAX_LATENCY)
  private Double maxLatency;

  public static final String SERIALIZED_NAME_MIN_LATENCY = "minLatency";
  @SerializedName(SERIALIZED_NAME_MIN_LATENCY)
  private Double minLatency;

  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private Agent agent;

  public static final String SERIALIZED_NAME_SERVER_IP = "serverIp";
  @SerializedName(SERIALIZED_NAME_SERVER_IP)
  private String serverIp;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private TestDirection direction = TestDirection.TO_TARGET;

  public NetworkTestResult() {
  }

  
  public NetworkTestResult(
     OffsetDateTime date, 
     Integer roundId, 
     Integer startTime, 
     Integer endTime, 
     Double availableBandwidth, 
     Double avgLatency, 
     Double bandwidth, 
     Double capacity, 
     Double jitter, 
     Double loss, 
     Double maxLatency, 
     Double minLatency, 
     String serverIp, 
     String server
  ) {
    this();
    this.date = date;
    this.roundId = roundId;
    this.startTime = startTime;
    this.endTime = endTime;
    this.availableBandwidth = availableBandwidth;
    this.avgLatency = avgLatency;
    this.bandwidth = bandwidth;
    this.capacity = capacity;
    this.jitter = jitter;
    this.loss = loss;
    this.maxLatency = maxLatency;
    this.minLatency = minLatency;
    this.serverIp = serverIp;
    this.server = server;
  }

   /**
   * Data point date in UTC (ISO date-time format).
   * @return date
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }




   /**
   * Epoch time (seconds) indicating the start time of the round
   * @return roundId
  **/
  @javax.annotation.Nullable
  public Integer getRoundId() {
    return roundId;
  }




  public NetworkTestResult links(Object links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }


  public void setLinks(Object links) {
    this.links = links;
  }


   /**
   * Epoch time (seconds) indicating the start time of the round
   * @return startTime
  **/
  @javax.annotation.Nullable
  public Integer getStartTime() {
    return startTime;
  }




   /**
   * Epoch time (seconds) indicating the end time of the round
   * @return endTime
  **/
  @javax.annotation.Nullable
  public Integer getEndTime() {
    return endTime;
  }




   /**
   * Get availableBandwidth
   * @return availableBandwidth
  **/
  @javax.annotation.Nullable
  public Double getAvailableBandwidth() {
    return availableBandwidth;
  }




   /**
   * Average RTT for packets sent to destination
   * @return avgLatency
  **/
  @javax.annotation.Nullable
  public Double getAvgLatency() {
    return avgLatency;
  }




   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @javax.annotation.Nullable
  public Double getBandwidth() {
    return bandwidth;
  }




   /**
   * Get capacity
   * @return capacity
  **/
  @javax.annotation.Nullable
  public Double getCapacity() {
    return capacity;
  }




   /**
   * Standard deviation of latency
   * @return jitter
  **/
  @javax.annotation.Nullable
  public Double getJitter() {
    return jitter;
  }




   /**
   * Percentage of packets not reaching destination
   * @return loss
  **/
  @javax.annotation.Nullable
  public Double getLoss() {
    return loss;
  }




   /**
   * Maximum RTT for packets sent to destination
   * @return maxLatency
  **/
  @javax.annotation.Nullable
  public Double getMaxLatency() {
    return maxLatency;
  }




   /**
   * Minimum RTT for packets sent to destination
   * @return minLatency
  **/
  @javax.annotation.Nullable
  public Double getMinLatency() {
    return minLatency;
  }




  public NetworkTestResult agent(Agent agent) {
    
    this.agent = agent;
    return this;
  }

   /**
   * Get agent
   * @return agent
  **/
  @javax.annotation.Nullable
  public Agent getAgent() {
    return agent;
  }


  public void setAgent(Agent agent) {
    this.agent = agent;
  }


   /**
   * IP of target server
   * @return serverIp
  **/
  @javax.annotation.Nullable
  public String getServerIp() {
    return serverIp;
  }




   /**
   * Target server, including port (if method used is TCP)
   * @return server
  **/
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }




  public NetworkTestResult direction(TestDirection direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  public TestDirection getDirection() {
    return direction;
  }


  public void setDirection(TestDirection direction) {
    this.direction = direction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkTestResult networkTestResult = (NetworkTestResult) o;
    return Objects.equals(this.date, networkTestResult.date) &&
        Objects.equals(this.roundId, networkTestResult.roundId) &&
        Objects.equals(this.links, networkTestResult.links) &&
        Objects.equals(this.startTime, networkTestResult.startTime) &&
        Objects.equals(this.endTime, networkTestResult.endTime) &&
        Objects.equals(this.availableBandwidth, networkTestResult.availableBandwidth) &&
        Objects.equals(this.avgLatency, networkTestResult.avgLatency) &&
        Objects.equals(this.bandwidth, networkTestResult.bandwidth) &&
        Objects.equals(this.capacity, networkTestResult.capacity) &&
        Objects.equals(this.jitter, networkTestResult.jitter) &&
        Objects.equals(this.loss, networkTestResult.loss) &&
        Objects.equals(this.maxLatency, networkTestResult.maxLatency) &&
        Objects.equals(this.minLatency, networkTestResult.minLatency) &&
        Objects.equals(this.agent, networkTestResult.agent) &&
        Objects.equals(this.serverIp, networkTestResult.serverIp) &&
        Objects.equals(this.server, networkTestResult.server) &&
        Objects.equals(this.direction, networkTestResult.direction);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, roundId, links, startTime, endTime, availableBandwidth, avgLatency, bandwidth, capacity, jitter, loss, maxLatency, minLatency, agent, serverIp, server, direction);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkTestResult {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    roundId: ").append(toIndentedString(roundId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    availableBandwidth: ").append(toIndentedString(availableBandwidth)).append("\n");
    sb.append("    avgLatency: ").append(toIndentedString(avgLatency)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    jitter: ").append(toIndentedString(jitter)).append("\n");
    sb.append("    loss: ").append(toIndentedString(loss)).append("\n");
    sb.append("    maxLatency: ").append(toIndentedString(maxLatency)).append("\n");
    sb.append("    minLatency: ").append(toIndentedString(minLatency)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    serverIp: ").append(toIndentedString(serverIp)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("roundId");
    openapiFields.add("_links");
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("availableBandwidth");
    openapiFields.add("avgLatency");
    openapiFields.add("bandwidth");
    openapiFields.add("capacity");
    openapiFields.add("jitter");
    openapiFields.add("loss");
    openapiFields.add("maxLatency");
    openapiFields.add("minLatency");
    openapiFields.add("agent");
    openapiFields.add("serverIp");
    openapiFields.add("server");
    openapiFields.add("direction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NetworkTestResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkTestResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkTestResult is not found in the empty JSON string", NetworkTestResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkTestResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkTestResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agent`
      if (jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonNull()) {
        Agent.validateJsonElement(jsonObj.get("agent"));
      }
      if ((jsonObj.get("serverIp") != null && !jsonObj.get("serverIp").isJsonNull()) && !jsonObj.get("serverIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverIp").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkTestResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkTestResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkTestResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkTestResult.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkTestResult>() {
           @Override
           public void write(JsonWriter out, NetworkTestResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkTestResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NetworkTestResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NetworkTestResult
  * @throws IOException if the JSON string is invalid with respect to NetworkTestResult
  */
  public static NetworkTestResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkTestResult.class);
  }

 /**
  * Convert an instance of NetworkTestResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

