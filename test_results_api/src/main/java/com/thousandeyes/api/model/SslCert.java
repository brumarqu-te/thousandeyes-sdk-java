/*
 * Test Results API
 * Get test result metrics for Cloud and Enterprise Agent tests.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * SslCert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:31.708307Z[Europe/London]")
public class SslCert {
  public static final String SERIALIZED_NAME_DAYS_UNTIL_EXPIRY = "daysUntilExpiry";
  @SerializedName(SERIALIZED_NAME_DAYS_UNTIL_EXPIRY)
  private Integer daysUntilExpiry;

  public static final String SERIALIZED_NAME_IS_FETCH_DATE_IN_VALID_CERT_DATE_RANGE = "isFetchDateInValidCertDateRange";
  @SerializedName(SERIALIZED_NAME_IS_FETCH_DATE_IN_VALID_CERT_DATE_RANGE)
  private String isFetchDateInValidCertDateRange;

  public static final String SERIALIZED_NAME_HAS_VALID_SIGNING_CERT = "hasValidSigningCert";
  @SerializedName(SERIALIZED_NAME_HAS_VALID_SIGNING_CERT)
  private String hasValidSigningCert;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuerName";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_VALID_BEFORE = "validBefore";
  @SerializedName(SERIALIZED_NAME_VALID_BEFORE)
  private OffsetDateTime validBefore;

  public static final String SERIALIZED_NAME_VALID_AFTER = "validAfter";
  @SerializedName(SERIALIZED_NAME_VALID_AFTER)
  private OffsetDateTime validAfter;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES = "subjectAlternativeNames";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES)
  private List<String> subjectAlternativeNames;

  public static final String SERIALIZED_NAME_SUBJECT_NAME = "subjectName";
  @SerializedName(SERIALIZED_NAME_SUBJECT_NAME)
  private String subjectName;

  public SslCert() {
  }

  public SslCert daysUntilExpiry(Integer daysUntilExpiry) {
    
    this.daysUntilExpiry = daysUntilExpiry;
    return this;
  }

   /**
   * Days until certificate expires, rounded down. 0 is shown if there are less than 24 hours remaining. Calculated when the test was executed.
   * @return daysUntilExpiry
  **/
  @javax.annotation.Nullable
  public Integer getDaysUntilExpiry() {
    return daysUntilExpiry;
  }


  public void setDaysUntilExpiry(Integer daysUntilExpiry) {
    this.daysUntilExpiry = daysUntilExpiry;
  }


  public SslCert isFetchDateInValidCertDateRange(String isFetchDateInValidCertDateRange) {
    
    this.isFetchDateInValidCertDateRange = isFetchDateInValidCertDateRange;
    return this;
  }

   /**
   * True when certificate fetch date is within the valid certificate date range, false otherwise
   * @return isFetchDateInValidCertDateRange
  **/
  @javax.annotation.Nullable
  public String getIsFetchDateInValidCertDateRange() {
    return isFetchDateInValidCertDateRange;
  }


  public void setIsFetchDateInValidCertDateRange(String isFetchDateInValidCertDateRange) {
    this.isFetchDateInValidCertDateRange = isFetchDateInValidCertDateRange;
  }


  public SslCert hasValidSigningCert(String hasValidSigningCert) {
    
    this.hasValidSigningCert = hasValidSigningCert;
    return this;
  }

   /**
   * This field is implicitly true; it is output only when false. false indicates this certificate was missing a valid signing certificate in the chain.
   * @return hasValidSigningCert
  **/
  @javax.annotation.Nullable
  public String getHasValidSigningCert() {
    return hasValidSigningCert;
  }


  public void setHasValidSigningCert(String hasValidSigningCert) {
    this.hasValidSigningCert = hasValidSigningCert;
  }


  public SslCert issuerName(String issuerName) {
    
    this.issuerName = issuerName;
    return this;
  }

   /**
   * Certificate issuer
   * @return issuerName
  **/
  @javax.annotation.Nullable
  public String getIssuerName() {
    return issuerName;
  }


  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  public SslCert validBefore(OffsetDateTime validBefore) {
    
    this.validBefore = validBefore;
    return this;
  }

   /**
   * Certificate is not valid after this date
   * @return validBefore
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidBefore() {
    return validBefore;
  }


  public void setValidBefore(OffsetDateTime validBefore) {
    this.validBefore = validBefore;
  }


  public SslCert validAfter(OffsetDateTime validAfter) {
    
    this.validAfter = validAfter;
    return this;
  }

   /**
   * Certificate is not valid before this date
   * @return validAfter
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getValidAfter() {
    return validAfter;
  }


  public void setValidAfter(OffsetDateTime validAfter) {
    this.validAfter = validAfter;
  }


  public SslCert subjectAlternativeNames(List<String> subjectAlternativeNames) {
    
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  public SslCert addSubjectAlternativeNamesItem(String subjectAlternativeNamesItem) {
    if (this.subjectAlternativeNames == null) {
      this.subjectAlternativeNames = new ArrayList<>();
    }
    this.subjectAlternativeNames.add(subjectAlternativeNamesItem);
    return this;
  }

   /**
   * Alternative name(s) of the certificate subject, extracted from the Subject Alternative Name (SAN) X.509 certificate extension, for example example.com, www2.example.com
   * @return subjectAlternativeNames
  **/
  @javax.annotation.Nullable
  public List<String> getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }


  public void setSubjectAlternativeNames(List<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }


  public SslCert subjectName(String subjectName) {
    
    this.subjectName = subjectName;
    return this;
  }

   /**
   * certificate’s subject name - a value of the common name (CN) RDN from the certificate’s Subject attribute, for example www.example.com
   * @return subjectName
  **/
  @javax.annotation.Nullable
  public String getSubjectName() {
    return subjectName;
  }


  public void setSubjectName(String subjectName) {
    this.subjectName = subjectName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SslCert sslCert = (SslCert) o;
    return Objects.equals(this.daysUntilExpiry, sslCert.daysUntilExpiry) &&
        Objects.equals(this.isFetchDateInValidCertDateRange, sslCert.isFetchDateInValidCertDateRange) &&
        Objects.equals(this.hasValidSigningCert, sslCert.hasValidSigningCert) &&
        Objects.equals(this.issuerName, sslCert.issuerName) &&
        Objects.equals(this.validBefore, sslCert.validBefore) &&
        Objects.equals(this.validAfter, sslCert.validAfter) &&
        Objects.equals(this.subjectAlternativeNames, sslCert.subjectAlternativeNames) &&
        Objects.equals(this.subjectName, sslCert.subjectName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysUntilExpiry, isFetchDateInValidCertDateRange, hasValidSigningCert, issuerName, validBefore, validAfter, subjectAlternativeNames, subjectName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SslCert {\n");
    sb.append("    daysUntilExpiry: ").append(toIndentedString(daysUntilExpiry)).append("\n");
    sb.append("    isFetchDateInValidCertDateRange: ").append(toIndentedString(isFetchDateInValidCertDateRange)).append("\n");
    sb.append("    hasValidSigningCert: ").append(toIndentedString(hasValidSigningCert)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    validBefore: ").append(toIndentedString(validBefore)).append("\n");
    sb.append("    validAfter: ").append(toIndentedString(validAfter)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("    subjectName: ").append(toIndentedString(subjectName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daysUntilExpiry");
    openapiFields.add("isFetchDateInValidCertDateRange");
    openapiFields.add("hasValidSigningCert");
    openapiFields.add("issuerName");
    openapiFields.add("validBefore");
    openapiFields.add("validAfter");
    openapiFields.add("subjectAlternativeNames");
    openapiFields.add("subjectName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SslCert
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SslCert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SslCert is not found in the empty JSON string", SslCert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SslCert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SslCert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("isFetchDateInValidCertDateRange") != null && !jsonObj.get("isFetchDateInValidCertDateRange").isJsonNull()) && !jsonObj.get("isFetchDateInValidCertDateRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isFetchDateInValidCertDateRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isFetchDateInValidCertDateRange").toString()));
      }
      if ((jsonObj.get("hasValidSigningCert") != null && !jsonObj.get("hasValidSigningCert").isJsonNull()) && !jsonObj.get("hasValidSigningCert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasValidSigningCert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasValidSigningCert").toString()));
      }
      if ((jsonObj.get("issuerName") != null && !jsonObj.get("issuerName").isJsonNull()) && !jsonObj.get("issuerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjectAlternativeNames") != null && !jsonObj.get("subjectAlternativeNames").isJsonNull() && !jsonObj.get("subjectAlternativeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectAlternativeNames` to be an array in the JSON string but got `%s`", jsonObj.get("subjectAlternativeNames").toString()));
      }
      if ((jsonObj.get("subjectName") != null && !jsonObj.get("subjectName").isJsonNull()) && !jsonObj.get("subjectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SslCert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SslCert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SslCert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SslCert.class));

       return (TypeAdapter<T>) new TypeAdapter<SslCert>() {
           @Override
           public void write(JsonWriter out, SslCert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SslCert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SslCert given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SslCert
  * @throws IOException if the JSON string is invalid with respect to SslCert
  */
  public static SslCert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SslCert.class);
  }

 /**
  * Convert an instance of SslCert to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

