/*
 * Administrative API
 * ## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * Permission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:21.831308Z[Europe/London]")
public class Permission {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PERMISSION_ID = "permissionId";
  @SerializedName(SERIALIZED_NAME_PERMISSION_ID)
  private String permissionId;

  public static final String SERIALIZED_NAME_IS_MANAGEMENT_PERMISSION = "isManagementPermission";
  @SerializedName(SERIALIZED_NAME_IS_MANAGEMENT_PERMISSION)
  private Boolean isManagementPermission;

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private String permission;

  public Permission() {
  }

  public Permission label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Label corresponding to the permission.
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public Permission permissionId(String permissionId) {
    
    this.permissionId = permissionId;
    return this;
  }

   /**
   * Unique ID representing the permission.
   * @return permissionId
  **/
  @javax.annotation.Nullable
  public String getPermissionId() {
    return permissionId;
  }


  public void setPermissionId(String permissionId) {
    this.permissionId = permissionId;
  }


  public Permission isManagementPermission(Boolean isManagementPermission) {
    
    this.isManagementPermission = isManagementPermission;
    return this;
  }

   /**
   * Flag indicating whether the permission is classified as a management permission.
   * @return isManagementPermission
  **/
  @javax.annotation.Nullable
  public Boolean getIsManagementPermission() {
    return isManagementPermission;
  }


  public void setIsManagementPermission(Boolean isManagementPermission) {
    this.isManagementPermission = isManagementPermission;
  }


  public Permission permission(String permission) {
    
    this.permission = permission;
    return this;
  }

   /**
   * Permission name
   * @return permission
  **/
  @javax.annotation.Nullable
  public String getPermission() {
    return permission;
  }


  public void setPermission(String permission) {
    this.permission = permission;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permission permission = (Permission) o;
    return Objects.equals(this.label, permission.label) &&
        Objects.equals(this.permissionId, permission.permissionId) &&
        Objects.equals(this.isManagementPermission, permission.isManagementPermission) &&
        Objects.equals(this.permission, permission.permission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, permissionId, isManagementPermission, permission);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permission {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    permissionId: ").append(toIndentedString(permissionId)).append("\n");
    sb.append("    isManagementPermission: ").append(toIndentedString(isManagementPermission)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("permissionId");
    openapiFields.add("isManagementPermission");
    openapiFields.add("permission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Permission
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Permission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Permission is not found in the empty JSON string", Permission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Permission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Permission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("permissionId") != null && !jsonObj.get("permissionId").isJsonNull()) && !jsonObj.get("permissionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionId").toString()));
      }
      if ((jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull()) && !jsonObj.get("permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Permission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Permission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Permission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Permission.class));

       return (TypeAdapter<T>) new TypeAdapter<Permission>() {
           @Override
           public void write(JsonWriter out, Permission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Permission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Permission given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Permission
  * @throws IOException if the JSON string is invalid with respect to Permission
  */
  public static Permission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Permission.class);
  }

 /**
  * Convert an instance of Permission to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

