/*
 * Administrative API
 * ## Overview Manage users, accounts, and account groups in the ThousandEyes platform using the Administrative API.  This API provides the following endpoints that define the operations to manage your organization:     * `/account-groups`: Account groups are used to divide an organization into different sections. These endpoints can be used to create, retrieve, update and delete account groups.   * `/users`: Create, retrieve, update and delete users within an organization.    * `/roles`: Create, retrieve and update roles for the current user.    * `/permissions`: Retrieve all assignable permissions. Used in the context of modifying roles.    * `/audit-user-events`: Retrieve all activity log events.
 *
 * The version of the OpenAPI document: 7.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.thousandeyes.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.thousandeyes.api.model.AccountGroup1;
import com.thousandeyes.api.model.Role;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.thousandeyes.JSON;

/**
 * AccountGroupRolesAccountGroupRolesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T10:17:21.831308Z[Europe/London]")
public class AccountGroupRolesAccountGroupRolesInner {
  public static final String SERIALIZED_NAME_ACCOUNT_GROUP = "accountGroup";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_GROUP)
  private AccountGroup1 accountGroup;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Role> roles;

  public AccountGroupRolesAccountGroupRolesInner() {
  }

  public AccountGroupRolesAccountGroupRolesInner accountGroup(AccountGroup1 accountGroup) {
    
    this.accountGroup = accountGroup;
    return this;
  }

   /**
   * Get accountGroup
   * @return accountGroup
  **/
  @javax.annotation.Nullable
  public AccountGroup1 getAccountGroup() {
    return accountGroup;
  }


  public void setAccountGroup(AccountGroup1 accountGroup) {
    this.accountGroup = accountGroup;
  }


  public AccountGroupRolesAccountGroupRolesInner roles(List<Role> roles) {
    
    this.roles = roles;
    return this;
  }

  public AccountGroupRolesAccountGroupRolesInner addRolesItem(Role rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @javax.annotation.Nullable
  public List<Role> getRoles() {
    return roles;
  }


  public void setRoles(List<Role> roles) {
    this.roles = roles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountGroupRolesAccountGroupRolesInner accountGroupRolesAccountGroupRolesInner = (AccountGroupRolesAccountGroupRolesInner) o;
    return Objects.equals(this.accountGroup, accountGroupRolesAccountGroupRolesInner.accountGroup) &&
        Objects.equals(this.roles, accountGroupRolesAccountGroupRolesInner.roles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountGroup, roles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountGroupRolesAccountGroupRolesInner {\n");
    sb.append("    accountGroup: ").append(toIndentedString(accountGroup)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountGroup");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountGroupRolesAccountGroupRolesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountGroupRolesAccountGroupRolesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountGroupRolesAccountGroupRolesInner is not found in the empty JSON string", AccountGroupRolesAccountGroupRolesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountGroupRolesAccountGroupRolesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountGroupRolesAccountGroupRolesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountGroup`
      if (jsonObj.get("accountGroup") != null && !jsonObj.get("accountGroup").isJsonNull()) {
        AccountGroup1.validateJsonElement(jsonObj.get("accountGroup"));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            Role.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountGroupRolesAccountGroupRolesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountGroupRolesAccountGroupRolesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountGroupRolesAccountGroupRolesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountGroupRolesAccountGroupRolesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountGroupRolesAccountGroupRolesInner>() {
           @Override
           public void write(JsonWriter out, AccountGroupRolesAccountGroupRolesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountGroupRolesAccountGroupRolesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountGroupRolesAccountGroupRolesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountGroupRolesAccountGroupRolesInner
  * @throws IOException if the JSON string is invalid with respect to AccountGroupRolesAccountGroupRolesInner
  */
  public static AccountGroupRolesAccountGroupRolesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountGroupRolesAccountGroupRolesInner.class);
  }

 /**
  * Convert an instance of AccountGroupRolesAccountGroupRolesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

